// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "extern.h"
#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  // loc(unknown)
  Fp x0(56361032);
  // loc(unknown)
  Fp x1(65280);
  // loc(unknown)
  Fp x2(8388608);
  // loc(unknown)
  Fp x3(56361024);
  // loc(unknown)
  Fp x4(54525952);
  // loc(unknown)
  Fp x5(219862);
  // loc(unknown)
  Fp x6(56361023);
  // loc(unknown)
  Fp x7(47);
  // loc(unknown)
  Fp x8(56360975);
  // loc(unknown)
  Fp x9(56360967);
  // loc(unknown)
  Fp x10(2013235201);
  // loc(unknown)
  Fp x11(2013204481);
  // loc(unknown)
  Fp x12(32768);
  // loc(unknown)
  Fp x13(2013143041);
  // loc(unknown)
  Fp x14(2013020161);
  // loc(unknown)
  Fp x15(8192);
  // loc(unknown)
  Fp x16(2012774401);
  // loc(unknown)
  Fp x17(4096);
  // loc(unknown)
  Fp x18(2012282881);
  // loc(unknown)
  Fp x19(2048);
  // loc(unknown)
  Fp x20(2011299841);
  // loc(unknown)
  Fp x21(2009333761);
  // loc(unknown)
  Fp x22(512);
  // loc(unknown)
  Fp x23(1024);
  // loc(unknown)
  Fp x24(50331661);
  // loc(unknown)
  Fp x25(50331660);
  // loc(unknown)
  Fp x26(50331662);
  // loc(unknown)
  Fp x27(50331658);
  // loc(unknown)
  Fp x28(50331659);
  // loc(unknown)
  Fp x29(50331653);
  // loc(unknown)
  Fp x30(115);
  // loc(unknown)
  Fp x31(131070);
  // loc(unknown)
  Fp x32(131072);
  // loc(unknown)
  Fp x33(31);
  // loc(unknown)
  Fp x34(192);
  // loc(unknown)
  Fp x35(35);
  // loc(unknown)
  Fp x36(4194304);
  // loc(unknown)
  Fp x37(16384);
  // loc(unknown)
  Fp x38(23);
  // loc(unknown)
  Fp x39(55);
  // loc(unknown)
  Fp x40(103);
  // loc(unknown)
  Fp x41(111);
  // loc(unknown)
  Fp x42(99);
  // loc(unknown)
  Fp x43(240);
  // loc(unknown)
  Fp x44(19);
  // loc(unknown)
  Fp x45(51);
  // loc(unknown)
  Fp x46(465814468);
  // loc(unknown)
  Fp x47(1996488705);
  // loc(unknown)
  Fp x48(50331648);
  // loc(unknown)
  Fp x49(248);
  // loc(unknown)
  Fp x50(127);
  // loc(unknown)
  Fp x51(48);
  // loc(unknown)
  Fp x52(1981808641);
  // loc(unknown)
  Fp x53(64);
  // loc(unknown)
  Fp x54(1006632961);
  // loc(unknown)
  Fp x55(1761607681);
  // loc(unknown)
  Fp x56(1887436801);
  // loc(unknown)
  Fp x57(1950351361);
  // loc(unknown)
  Fp x58(96);
  // loc(unknown)
  Fp x59(32);
  // loc(unknown)
  Fp x60(1997537281);
  // loc(unknown)
  Fp x61(128);
  // loc(unknown)
  Fp x62(16);
  // loc(unknown)
  Fp x63(14);
  // loc(unknown)
  Fp x64(13);
  // loc(unknown)
  Fp x65(12);
  // loc(unknown)
  Fp x66(11);
  // loc(unknown)
  Fp x67(10);
  // loc(unknown)
  Fp x68(9);
  // loc(unknown)
  Fp x69(8);
  // loc(unknown)
  Fp x70(7);
  // loc(unknown)
  Fp x71(6);
  // loc(unknown)
  Fp x72(5);
  // loc(unknown)
  Fp x73(15);
  // loc(unknown)
  Fp x74(67108864);
  // loc(unknown)
  Fp x75(1509949441);
  // loc(unknown)
  Fp x76(3);
  // loc(unknown)
  Fp x77(4);
  // loc(unknown)
  Fp x78(65536);
  // loc(unknown)
  Fp x79(16777216);
  // loc(unknown)
  Fp x80(56284855);
  // loc(unknown)
  Fp x81(56284854);
  // loc(unknown)
  Fp x82(56284853);
  // loc(unknown)
  Fp x83(56284852);
  // loc(unknown)
  Fp x84(56284851);
  // loc(unknown)
  Fp x85(56284850);
  // loc(unknown)
  Fp x86(56284849);
  // loc(unknown)
  Fp x87(56284848);
  // loc(unknown)
  Fp x88(2013265919);
  // loc(unknown)
  Fp x89(2013265920);
  // loc(unknown)
  Fp x90(2005401601);
  // loc(unknown)
  Fp x91(256);
  // loc(unknown)
  Fp x92(255);
  // loc(unknown)
  Fp x93(2);
  // loc(unknown)
  Fp x94(254);
  // loc(unknown)
  Fp x95(0);
  // loc(unknown)
  Fp x96(1);
  // loc("Top/Code/OneHot/hot[1](Reg)"("./zirgen/components/mux.h":49:0))
  auto x97 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x97 != Fp::invalid());
  if (x97 != 0) {
    // loc("Top/Code/OneHot/hot[1](Reg)"("zirgen/circuit/rv32im/v1/edsl/top.cpp":17:0))
    auto x98 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x98 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":17:0)
    auto x99 = x96 - x98;
    // loc("Top/Code/Mux/1(SetupInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x100 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x100 != Fp::invalid());
    if (x99 != 0) {
      // loc("zirgen/components/bytes.cpp":21:0)
      {
        auto& reg = args[2][3 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":22:0)
      {
        auto& reg = args[2][4 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
    // loc("zirgen/components/bytes.cpp":117:0)
    auto x101 = x96 - x99;
    if (x101 != 0) {
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x102 = args[2][43 * steps + ((cycle - 1) & mask)];
      assert(x102 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x103 = args[2][44 * steps + ((cycle - 1) & mask)];
      assert(x103 != Fp::invalid());
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x104 = x103 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x105 = (x104 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x106 = x96 - x105;
        if (x106 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x107 = x103 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x107);
            reg = x107;
          }
        }
        if (x105 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x108 = x102 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x108);
            reg = x108;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x109 = args[2][3 * steps + ((cycle - 0) & mask)];
      assert(x109 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x110 = x109 - x102;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x111 = args[2][4 * steps + ((cycle - 0) & mask)];
      assert(x111 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x112 = x111 - x103;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x113 = x110 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x114 = x110 * x113;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x114 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x115 = x112 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x116 = x110 * x115;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x116 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x117 = x112 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x118 = x113 * x117;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x118 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x119 = args[2][3 * steps + ((cycle - 0) & mask)];
    assert(x119 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x120 = args[2][4 * steps + ((cycle - 0) & mask)];
    assert(x120 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x121 = x120 - x94;
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x122 = (x121 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:0)
      auto x123 = x96 - x122;
      if (x123 != 0) {
        // loc("zirgen/components/bytes.cpp":36:0)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x119);
          reg = x119;
        }
        // loc("zirgen/components/bytes.cpp":37:0)
        auto x124 = x120 + x93;
        // loc("zirgen/components/bytes.cpp":37:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x124);
          reg = x124;
        }
      }
      if (x122 != 0) {
        // loc("zirgen/components/bytes.cpp":40:0)
        auto x125 = x119 + x96;
        // loc("zirgen/components/bytes.cpp":40:0)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x125);
          reg = x125;
        }
        // loc("zirgen/components/bytes.cpp":41:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x126 = args[2][5 * steps + ((cycle - 0) & mask)];
    assert(x126 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:0)
    auto x127 = x126 - x119;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x128 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x128 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:0)
    auto x129 = x128 - x120;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x130 = x127 - x96;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x131 = x127 * x130;
    // loc("zirgen/components/bytes.cpp":48:0)
    if (x131 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x132 = x129 + x94;
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x133 = x127 * x132;
    // loc("zirgen/components/bytes.cpp":51:0)
    if (x133 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x134 = x129 - x93;
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x135 = x130 * x134;
    // loc("zirgen/components/bytes.cpp":54:0)
    if (x135 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x136 = x128 - x94;
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x137 = (x136 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:0)
      auto x138 = x96 - x137;
      if (x138 != 0) {
        // loc("zirgen/components/bytes.cpp":36:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x126);
          reg = x126;
        }
        // loc("zirgen/components/bytes.cpp":37:0)
        auto x139 = x128 + x93;
        // loc("zirgen/components/bytes.cpp":37:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x139);
          reg = x139;
        }
      }
      if (x137 != 0) {
        // loc("zirgen/components/bytes.cpp":40:0)
        auto x140 = x126 + x96;
        // loc("zirgen/components/bytes.cpp":40:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x140);
          reg = x140;
        }
        // loc("zirgen/components/bytes.cpp":41:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x141 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x141 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:0)
    auto x142 = x141 - x126;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x143 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x143 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:0)
    auto x144 = x143 - x128;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x145 = x142 - x96;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x146 = x142 * x145;
    // loc("zirgen/components/bytes.cpp":48:0)
    if (x146 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x147 = x144 + x94;
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x148 = x142 * x147;
    // loc("zirgen/components/bytes.cpp":51:0)
    if (x148 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x149 = x144 - x93;
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x150 = x145 * x149;
    // loc("zirgen/components/bytes.cpp":54:0)
    if (x150 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x151 = x143 - x94;
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x152 = (x151 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:0)
      auto x153 = x96 - x152;
      if (x153 != 0) {
        // loc("zirgen/components/bytes.cpp":36:0)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x141);
          reg = x141;
        }
        // loc("zirgen/components/bytes.cpp":37:0)
        auto x154 = x143 + x93;
        // loc("zirgen/components/bytes.cpp":37:0)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x154);
          reg = x154;
        }
      }
      if (x152 != 0) {
        // loc("zirgen/components/bytes.cpp":40:0)
        auto x155 = x141 + x96;
        // loc("zirgen/components/bytes.cpp":40:0)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x155);
          reg = x155;
        }
        // loc("zirgen/components/bytes.cpp":41:0)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x156 = args[2][9 * steps + ((cycle - 0) & mask)];
    assert(x156 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:0)
    auto x157 = x156 - x141;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x158 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x158 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:0)
    auto x159 = x158 - x143;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x160 = x157 - x96;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x161 = x157 * x160;
    // loc("zirgen/components/bytes.cpp":48:0)
    if (x161 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x162 = x159 + x94;
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x163 = x157 * x162;
    // loc("zirgen/components/bytes.cpp":51:0)
    if (x163 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x164 = x159 - x93;
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x165 = x160 * x164;
    // loc("zirgen/components/bytes.cpp":54:0)
    if (x165 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x166 = x158 - x94;
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x167 = (x166 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:0)
      auto x168 = x96 - x167;
      if (x168 != 0) {
        // loc("zirgen/components/bytes.cpp":36:0)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x156);
          reg = x156;
        }
        // loc("zirgen/components/bytes.cpp":37:0)
        auto x169 = x158 + x93;
        // loc("zirgen/components/bytes.cpp":37:0)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x169);
          reg = x169;
        }
      }
      if (x167 != 0) {
        // loc("zirgen/components/bytes.cpp":40:0)
        auto x170 = x156 + x96;
        // loc("zirgen/components/bytes.cpp":40:0)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x170);
          reg = x170;
        }
        // loc("zirgen/components/bytes.cpp":41:0)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x171 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x171 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:0)
    auto x172 = x171 - x156;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x173 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x173 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:0)
    auto x174 = x173 - x158;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x175 = x172 - x96;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x176 = x172 * x175;
    // loc("zirgen/components/bytes.cpp":48:0)
    if (x176 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x177 = x174 + x94;
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x178 = x172 * x177;
    // loc("zirgen/components/bytes.cpp":51:0)
    if (x178 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x179 = x174 - x93;
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x180 = x175 * x179;
    // loc("zirgen/components/bytes.cpp":54:0)
    if (x180 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x181 = x173 - x94;
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x182 = (x181 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:0)
      auto x183 = x96 - x182;
      if (x183 != 0) {
        // loc("zirgen/components/bytes.cpp":36:0)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x171);
          reg = x171;
        }
        // loc("zirgen/components/bytes.cpp":37:0)
        auto x184 = x173 + x93;
        // loc("zirgen/components/bytes.cpp":37:0)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x184);
          reg = x184;
        }
      }
      if (x182 != 0) {
        // loc("zirgen/components/bytes.cpp":40:0)
        auto x185 = x171 + x96;
        // loc("zirgen/components/bytes.cpp":40:0)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x185);
          reg = x185;
        }
        // loc("zirgen/components/bytes.cpp":41:0)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x186 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x186 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:0)
    auto x187 = x186 - x171;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x188 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x188 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:0)
    auto x189 = x188 - x173;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x190 = x187 - x96;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x191 = x187 * x190;
    // loc("zirgen/components/bytes.cpp":48:0)
    if (x191 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x192 = x189 + x94;
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x193 = x187 * x192;
    // loc("zirgen/components/bytes.cpp":51:0)
    if (x193 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x194 = x189 - x93;
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x195 = x190 * x194;
    // loc("zirgen/components/bytes.cpp":54:0)
    if (x195 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x196 = x188 - x94;
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x197 = (x196 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:0)
      auto x198 = x96 - x197;
      if (x198 != 0) {
        // loc("zirgen/components/bytes.cpp":36:0)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x186);
          reg = x186;
        }
        // loc("zirgen/components/bytes.cpp":37:0)
        auto x199 = x188 + x93;
        // loc("zirgen/components/bytes.cpp":37:0)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x199);
          reg = x199;
        }
      }
      if (x197 != 0) {
        // loc("zirgen/components/bytes.cpp":40:0)
        auto x200 = x186 + x96;
        // loc("zirgen/components/bytes.cpp":40:0)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x200);
          reg = x200;
        }
        // loc("zirgen/components/bytes.cpp":41:0)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x201 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x201 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:0)
    auto x202 = x201 - x186;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x203 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x203 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:0)
    auto x204 = x203 - x188;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x205 = x202 - x96;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x206 = x202 * x205;
    // loc("zirgen/components/bytes.cpp":48:0)
    if (x206 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x207 = x204 + x94;
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x208 = x202 * x207;
    // loc("zirgen/components/bytes.cpp":51:0)
    if (x208 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x209 = x204 - x93;
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x210 = x205 * x209;
    // loc("zirgen/components/bytes.cpp":54:0)
    if (x210 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x211 = x203 - x94;
      // loc("zirgen/components/bytes.cpp":34:0)
      auto x212 = (x211 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:0)
      auto x213 = x96 - x212;
      if (x213 != 0) {
        // loc("zirgen/components/bytes.cpp":36:0)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x201);
          reg = x201;
        }
        // loc("zirgen/components/bytes.cpp":37:0)
        auto x214 = x203 + x93;
        // loc("zirgen/components/bytes.cpp":37:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x214);
          reg = x214;
        }
      }
      if (x212 != 0) {
        // loc("zirgen/components/bytes.cpp":40:0)
        auto x215 = x201 + x96;
        // loc("zirgen/components/bytes.cpp":40:0)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x215);
          reg = x215;
        }
        // loc("zirgen/components/bytes.cpp":41:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x216 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x216 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:0)
    auto x217 = x216 - x201;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x218 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x218 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:0)
    auto x219 = x218 - x203;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x220 = x217 - x96;
    // loc("zirgen/components/bytes.cpp":48:0)
    auto x221 = x217 * x220;
    // loc("zirgen/components/bytes.cpp":48:0)
    if (x221 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x222 = x219 + x94;
    // loc("zirgen/components/bytes.cpp":51:0)
    auto x223 = x217 * x222;
    // loc("zirgen/components/bytes.cpp":51:0)
    if (x223 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x224 = x219 - x93;
    // loc("zirgen/components/bytes.cpp":54:0)
    auto x225 = x220 * x224;
    // loc("zirgen/components/bytes.cpp":54:0)
    if (x225 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    if (x100 != 0) {
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:0)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:0)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
    // loc("zirgen/components/bytes.cpp":130:0)
    auto x226 = x96 - x100;
    if (x226 != 0) {
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x227 = x218 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x228 = (x227 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x229 = x96 - x228;
        if (x229 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x216);
            reg = x216;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x230 = x218 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x230);
            reg = x230;
          }
        }
        if (x228 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x231 = x216 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x231);
            reg = x231;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x232 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x232 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x233 = x232 - x216;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x234 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x234 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x235 = x234 - x218;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x236 = x233 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x237 = x233 * x236;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x237 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x238 = x235 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x239 = x233 * x238;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x239 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x240 = x235 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x241 = x236 * x240;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x241 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x242 = x234 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x243 = (x242 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x244 = x96 - x243;
        if (x244 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x232);
            reg = x232;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x245 = x234 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x245);
            reg = x245;
          }
        }
        if (x243 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x246 = x232 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x246);
            reg = x246;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x247 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x247 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x248 = x247 - x232;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x249 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x249 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x250 = x249 - x234;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x251 = x248 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x252 = x248 * x251;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x252 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x253 = x250 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x254 = x248 * x253;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x254 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x255 = x250 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x256 = x251 * x255;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x256 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x257 = x249 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x258 = (x257 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x259 = x96 - x258;
        if (x259 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x247);
            reg = x247;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x260 = x249 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x260);
            reg = x260;
          }
        }
        if (x258 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x261 = x247 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x261);
            reg = x261;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x262 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x262 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x263 = x262 - x247;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x264 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x264 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x265 = x264 - x249;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x266 = x263 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x267 = x263 * x266;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x267 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x268 = x265 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x269 = x263 * x268;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x269 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x270 = x265 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x271 = x266 * x270;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x271 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x272 = x264 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x273 = (x272 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x274 = x96 - x273;
        if (x274 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x262);
            reg = x262;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x275 = x264 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x275);
            reg = x275;
          }
        }
        if (x273 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x276 = x262 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x276);
            reg = x276;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x277 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x277 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x278 = x277 - x262;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x279 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x279 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x280 = x279 - x264;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x281 = x278 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x282 = x278 * x281;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x282 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x283 = x280 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x284 = x278 * x283;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x284 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x285 = x280 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x286 = x281 * x285;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x286 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x287 = x279 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x288 = (x287 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x289 = x96 - x288;
        if (x289 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x277);
            reg = x277;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x290 = x279 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x290);
            reg = x290;
          }
        }
        if (x288 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x291 = x277 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x291);
            reg = x291;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x292 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x292 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x293 = x292 - x277;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x294 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x294 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x295 = x294 - x279;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x296 = x293 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x297 = x293 * x296;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x297 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x298 = x295 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x299 = x293 * x298;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x299 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x300 = x295 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x301 = x296 * x300;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x301 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x302 = x294 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x303 = (x302 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x304 = x96 - x303;
        if (x304 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x292);
            reg = x292;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x305 = x294 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x305);
            reg = x305;
          }
        }
        if (x303 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x306 = x292 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x306);
            reg = x306;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x307 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x307 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x308 = x307 - x292;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x309 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x309 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x310 = x309 - x294;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x311 = x308 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x312 = x308 * x311;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x312 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x313 = x310 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x314 = x308 * x313;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x314 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x315 = x310 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x316 = x311 * x315;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x316 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x317 = x309 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x318 = (x317 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x319 = x96 - x318;
        if (x319 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x307);
            reg = x307;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x320 = x309 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x320);
            reg = x320;
          }
        }
        if (x318 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x321 = x307 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x321);
            reg = x321;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x322 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x322 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x323 = x322 - x307;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x324 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x324 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x325 = x324 - x309;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x326 = x323 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x327 = x323 * x326;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x327 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x328 = x325 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x329 = x323 * x328;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x329 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x330 = x325 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x331 = x326 * x330;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x331 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x332 = x324 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x333 = (x332 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x334 = x96 - x333;
        if (x334 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x322);
            reg = x322;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x335 = x324 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x335);
            reg = x335;
          }
        }
        if (x333 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x336 = x322 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x336);
            reg = x336;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x337 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x337 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x338 = x337 - x322;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x339 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x339 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x340 = x339 - x324;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x341 = x338 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x342 = x338 * x341;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x342 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x343 = x340 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x344 = x338 * x343;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x344 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x345 = x340 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x346 = x341 * x345;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x346 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x347 = x339 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x348 = (x347 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x349 = x96 - x348;
        if (x349 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x337);
            reg = x337;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x350 = x339 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x350);
            reg = x350;
          }
        }
        if (x348 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x351 = x337 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x351);
            reg = x351;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x352 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x352 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x353 = x352 - x337;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x354 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x354 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x355 = x354 - x339;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x356 = x353 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x357 = x353 * x356;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x357 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x358 = x355 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x359 = x353 * x358;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x359 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x360 = x355 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x361 = x356 * x360;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x361 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x362 = x354 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x363 = (x362 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x364 = x96 - x363;
        if (x364 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x352);
            reg = x352;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x365 = x354 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x365);
            reg = x365;
          }
        }
        if (x363 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x366 = x352 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x366);
            reg = x366;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x367 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x367 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x368 = x367 - x352;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x369 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x369 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x370 = x369 - x354;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x371 = x368 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x372 = x368 * x371;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x372 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x373 = x370 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x374 = x368 * x373;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x374 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x375 = x370 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x376 = x371 * x375;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x376 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x377 = x369 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x378 = (x377 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x379 = x96 - x378;
        if (x379 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x367);
            reg = x367;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x380 = x369 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x380);
            reg = x380;
          }
        }
        if (x378 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x381 = x367 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x381);
            reg = x381;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x382 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x382 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x383 = x382 - x367;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x384 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x384 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x385 = x384 - x369;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x386 = x383 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x387 = x383 * x386;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x387 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x388 = x385 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x389 = x383 * x388;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x389 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x390 = x385 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x391 = x386 * x390;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x391 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x392 = x384 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x393 = (x392 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x394 = x96 - x393;
        if (x394 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x382);
            reg = x382;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x395 = x384 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x395);
            reg = x395;
          }
        }
        if (x393 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x396 = x382 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x396);
            reg = x396;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x397 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x397 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x398 = x397 - x382;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x399 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x399 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x400 = x399 - x384;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x401 = x398 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x402 = x398 * x401;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x402 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x403 = x400 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x404 = x398 * x403;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x404 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x405 = x400 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x406 = x401 * x405;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x406 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x407 = x399 - x94;
        // loc("zirgen/components/bytes.cpp":34:0)
        auto x408 = (x407 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:0)
        auto x409 = x96 - x408;
        if (x409 != 0) {
          // loc("zirgen/components/bytes.cpp":36:0)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x397);
            reg = x397;
          }
          // loc("zirgen/components/bytes.cpp":37:0)
          auto x410 = x399 + x93;
          // loc("zirgen/components/bytes.cpp":37:0)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x410);
            reg = x410;
          }
        }
        if (x408 != 0) {
          // loc("zirgen/components/bytes.cpp":40:0)
          auto x411 = x397 + x96;
          // loc("zirgen/components/bytes.cpp":40:0)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x411);
            reg = x411;
          }
          // loc("zirgen/components/bytes.cpp":41:0)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x412 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x412 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:0)
      auto x413 = x412 - x397;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x414 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x414 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:0)
      auto x415 = x414 - x399;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x416 = x413 - x96;
      // loc("zirgen/components/bytes.cpp":48:0)
      auto x417 = x413 * x416;
      // loc("zirgen/components/bytes.cpp":48:0)
      if (x417 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x418 = x415 + x94;
      // loc("zirgen/components/bytes.cpp":51:0)
      auto x419 = x413 * x418;
      // loc("zirgen/components/bytes.cpp":51:0)
      if (x419 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x420 = x415 - x93;
      // loc("zirgen/components/bytes.cpp":54:0)
      auto x421 = x416 * x420;
      // loc("zirgen/components/bytes.cpp":54:0)
      if (x421 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/hot[3](Reg)"("./zirgen/components/mux.h":49:0))
  auto x422 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x422 != Fp::invalid());
  if (x422 != 0) {
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x423 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x423 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:0)
      auto x424 = Fp(x423.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:0)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x424);
        reg = x424;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
    auto x425 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x425 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x426 = x423 - x425;
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x427 = x426 * x90;
    // loc("zirgen/components/bytes.cpp":101:0)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x427);
      reg = x427;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x428 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x428 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:0)
      auto x429 = Fp(x428.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:0)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x429);
        reg = x429;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
    auto x430 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x430 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x431 = x428 - x430;
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x432 = x431 * x90;
    // loc("zirgen/components/bytes.cpp":101:0)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x433 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x434 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
    auto x435 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x436 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x425);
      reg = x425;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x430);
      reg = x430;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    {
      extern_ramWrite(ctx, cycle, "", {x435, x425, x434, x430, x433, x95});
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x437 = args[2][117 * steps + ((cycle - 0) & mask)];
    assert(x437 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x438 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x439 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x440 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:0)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("zirgen/components/ram.cpp":169:0)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("zirgen/components/ram.cpp":170:0)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x437);
      reg = x437;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x441 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x441 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:0)
      auto x442 = Fp(x441.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:0)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x442);
        reg = x442;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
    auto x443 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x444 = x441 - x443;
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x445 = x444 * x90;
    // loc("zirgen/components/bytes.cpp":101:0)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x445);
      reg = x445;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x446 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x446 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:0)
      auto x447 = Fp(x446.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:0)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x447);
        reg = x447;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
    auto x448 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x448 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x449 = x446 - x448;
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x450 = x449 * x90;
    // loc("zirgen/components/bytes.cpp":101:0)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x450);
      reg = x450;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x451 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x451 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x452 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x452 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":41:0)
    auto x453 = x435 + x96;
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x443);
      reg = x443;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x452);
      reg = x452;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x448);
      reg = x448;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    {
      extern_ramWrite(ctx, cycle, "", {x453, x443, x452, x448, x451, x95});
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x454 = args[2][124 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x455 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x456 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x456 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x457 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:0)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("zirgen/components/ram.cpp":169:0)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("zirgen/components/ram.cpp":170:0)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x455);
      reg = x455;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x458 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x458 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:0)
      auto x459 = Fp(x458.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:0)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x459);
        reg = x459;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
    auto x460 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x461 = x458 - x460;
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x462 = x461 * x90;
    // loc("zirgen/components/bytes.cpp":101:0)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x462);
      reg = x462;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x463 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x463 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:0)
      auto x464 = Fp(x463.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:0)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x464);
        reg = x464;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
    auto x465 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x465 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x466 = x463 - x465;
    // loc("zirgen/components/bytes.cpp":97:0)
    auto x467 = x466 * x90;
    // loc("zirgen/components/bytes.cpp":101:0)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x468 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x469 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x469 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":41:0)
    auto x470 = x435 + x93;
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x460);
      reg = x460;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x469);
      reg = x469;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x465);
      reg = x465;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    {
      extern_ramWrite(ctx, cycle, "", {x470, x460, x469, x465, x468, x95});
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x471 = args[2][131 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x472 = args[2][132 * steps + ((cycle - 0) & mask)];
    assert(x472 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x473 = args[2][133 * steps + ((cycle - 0) & mask)];
    assert(x473 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
    auto x474 = args[2][134 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:0)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("zirgen/components/ram.cpp":169:0)
    {
      auto& reg = args[2][129 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("zirgen/components/ram.cpp":170:0)
    {
      auto& reg = args[2][130 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x472);
      reg = x472;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x473);
      reg = x473;
    }
    // loc("zirgen/components/u32.cpp":34:0)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x474);
      reg = x474;
    }
  }
  // loc("Top/Code/OneHot/hot[4](Reg)"("./zirgen/components/mux.h":49:0))
  auto x475 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x475 != Fp::invalid());
  if (x475 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x476 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x476 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x477 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x478 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x478 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x479 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x479 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x480 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x480 != Fp::invalid());
    if (x478 != 0) {
      {
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x481 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x481 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x482 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x482 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x483 = x482 * x93;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x484 = x481 + x483;
      // loc("./zirgen/components/onehot.h":40:0)
      if (x484 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":54:0)
      {
        auto& reg = args[2][175 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      if (x477 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x485 = args[1][36];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x486 = args[1][37];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x487 = args[1][38];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x488 = args[1][39];
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x485);
          reg = x485;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x486);
          reg = x486;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x487);
          reg = x487;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x488);
          reg = x488;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x87, x485, x486, x487, x488, x95});
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x489 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x489 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x490 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x490 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x491 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x491 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x492 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x492 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x489);
          reg = x489;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x490);
          reg = x490;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x491);
          reg = x491;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x492);
          reg = x492;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x493 = args[1][40];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x494 = args[1][41];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x495 = args[1][42];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x496 = args[1][43];
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x493);
          reg = x493;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x494);
          reg = x494;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x495);
          reg = x495;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x496);
          reg = x496;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x86, x493, x494, x495, x496, x95});
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x497 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x497 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x498 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x498 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x499 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x499 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x500 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x500 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x497);
          reg = x497;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x498);
          reg = x498;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x499);
          reg = x499;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x500);
          reg = x500;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x501 = args[1][44];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x502 = args[1][45];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x503 = args[1][46];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x504 = args[1][47];
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x501);
          reg = x501;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x502);
          reg = x502;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x503);
          reg = x503;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x504);
          reg = x504;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x85, x501, x502, x503, x504, x95});
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x505 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x505 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x506 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x506 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x507 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x507 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x508 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x508 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x505);
          reg = x505;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x506);
          reg = x506;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x507);
          reg = x507;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x508);
          reg = x508;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x509 = args[1][48];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x510 = args[1][49];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x511 = args[1][50];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x512 = args[1][51];
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x509);
          reg = x509;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x510);
          reg = x510;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x511);
          reg = x511;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x512);
          reg = x512;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x84, x509, x510, x511, x512, x95});
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x513 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x513 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x514 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x514 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x515 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x515 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x516 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x516 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x513);
          reg = x513;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x514);
          reg = x514;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x515);
          reg = x515;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x516);
          reg = x516;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":62:0)
      auto x517 = x96 - x477;
      if (x517 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x518 = args[1][52];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x519 = args[1][53];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x520 = args[1][54];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x521 = args[1][55];
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x518);
          reg = x518;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x519);
          reg = x519;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x520);
          reg = x520;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x521);
          reg = x521;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x83, x518, x519, x520, x521, x95});
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x522 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x522 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x523 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x523 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x524 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x524 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x525 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x525 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x522);
          reg = x522;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x523);
          reg = x523;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x524);
          reg = x524;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x525);
          reg = x525;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x526 = args[1][56];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x527 = args[1][57];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x528 = args[1][58];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x529 = args[1][59];
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x526);
          reg = x526;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x527);
          reg = x527;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x528);
          reg = x528;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x529);
          reg = x529;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x82, x526, x527, x528, x529, x95});
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x530 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x530 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x531 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x531 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x532 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x532 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x533 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x533 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x530);
          reg = x530;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x531);
          reg = x531;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x532);
          reg = x532;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x533);
          reg = x533;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x534 = args[1][60];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x535 = args[1][61];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x536 = args[1][62];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x537 = args[1][63];
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x534);
          reg = x534;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x535);
          reg = x535;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x536);
          reg = x536;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x537);
          reg = x537;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x81, x534, x535, x536, x537, x95});
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x538 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x538 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x539 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x539 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x540 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x540 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x541 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x541 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x538);
          reg = x538;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x539);
          reg = x539;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x540);
          reg = x540;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x541);
          reg = x541;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x542 = args[1][64];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x543 = args[1][65];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x544 = args[1][66];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x545 = args[1][67];
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x542);
          reg = x542;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x543);
          reg = x543;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x544);
          reg = x544;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x545);
          reg = x545;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x80, x542, x543, x544, x545, x95});
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x546 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x546 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x547 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x547 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x548 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x548 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x549 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x549 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x546);
          reg = x546;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x547);
          reg = x547;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x548);
          reg = x548;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x549);
          reg = x549;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x550 = args[1][32];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x551 = args[1][33];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x552 = args[1][34];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x553 = args[1][35];
      // loc("./zirgen/components/u32.h":27:0)
      auto x554 = x553 * x79;
      // loc("./zirgen/components/u32.h":26:0)
      auto x555 = x552 * x78;
      // loc("./zirgen/components/u32.h":25:0)
      auto x556 = x551 * x91;
      // loc("./zirgen/components/u32.h":25:0)
      auto x557 = x550 + x556;
      // loc("./zirgen/components/u32.h":26:0)
      auto x558 = x557 + x555;
      // loc("./zirgen/components/u32.h":27:0)
      auto x559 = x558 + x554;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x560 = x559 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x561 = Fp(x560.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x561);
          reg = x561;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x562 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x562 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x563 = x560 - x562;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x564 = x563 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x565 = Fp(x564.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x565);
          reg = x565;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x566 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x566 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x567 = x564 - x566;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x568 = x567 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x569 = Fp(x568.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x569);
          reg = x569;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x570 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x570 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x571 = x568 - x570;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x572 = x571 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x573 = Fp(x572.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x573);
          reg = x573;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x574 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x574 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x575 = x572 - x574;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x576 = x575 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x576);
        reg = x576;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x577 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x577 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x578 = x96 - x577;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x579 = x577 * x578;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x579);
        reg = x579;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x580 = x93 - x577;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x581 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x581 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x582 = x581 * x580;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x582 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
    }
    if (x479 != 0) {
      {
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x583 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x583 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x584 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x584 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x585 = x584 * x93;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x586 = x583 + x585;
      // loc("./zirgen/components/onehot.h":40:0)
      if (x586 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x587 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x587 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
      auto x588 = x587 * x74;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x589 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x589 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
      auto x590 = x589 * x79;
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x591 = args[2][8 * steps + ((cycle - 1) & mask)];
      assert(x591 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
      auto x592 = x591 * x78;
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x593 = args[2][7 * steps + ((cycle - 1) & mask)];
      assert(x593 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
      auto x594 = x593 * x91;
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x595 = args[2][6 * steps + ((cycle - 1) & mask)];
      assert(x595 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
      auto x596 = x595 + x594;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
      auto x597 = x596 + x592;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
      auto x598 = x597 + x590;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
      auto x599 = x598 + x588;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
      auto x600 = x599 - x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x601 = x600 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x602 = Fp(x601.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x602);
          reg = x602;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x603 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x603 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x604 = x601 - x603;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x605 = x604 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x606 = Fp(x605.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x606);
          reg = x606;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x607 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x607 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x608 = x605 - x607;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x609 = x608 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x610 = Fp(x609.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x610);
          reg = x610;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x611 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x611 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x612 = x609 - x611;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x613 = x612 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x614 = Fp(x613.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x614);
          reg = x614;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x615 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x615 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x616 = x613 - x615;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x617 = x616 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x617);
        reg = x617;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x618 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x618 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x619 = x96 - x618;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x620 = x618 * x619;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x620);
        reg = x620;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x621 = x93 - x618;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x622 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x622 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x623 = x622 * x621;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x623 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      if (x477 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x624 = args[2][101 * steps + ((cycle - 1) & mask)];
        assert(x624 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x625 = args[2][102 * steps + ((cycle - 1) & mask)];
        assert(x625 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x626 = x625 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x627 = x624 + x626;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x628 = args[2][103 * steps + ((cycle - 1) & mask)];
        assert(x628 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x629 = x628 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x630 = x627 + x629;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x631 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x631 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x632 = x631 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x633 = x630 + x632;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x634 = args[2][105 * steps + ((cycle - 1) & mask)];
        assert(x634 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x635 = x634 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x636 = x633 + x635;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x637 = args[2][106 * steps + ((cycle - 1) & mask)];
        assert(x637 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x638 = x637 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x639 = x636 + x638;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x640 = args[2][107 * steps + ((cycle - 1) & mask)];
        assert(x640 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x641 = x640 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x642 = x639 + x641;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x643 = args[2][108 * steps + ((cycle - 1) & mask)];
        assert(x643 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x644 = x643 * x69;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x645 = x642 + x644;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x646 = args[2][109 * steps + ((cycle - 1) & mask)];
        assert(x646 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x647 = x646 * x68;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x648 = x645 + x647;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x649 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x649 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x650 = x649 * x67;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x651 = x648 + x650;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x652 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x652 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x653 = x652 * x66;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x654 = x651 + x653;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x655 = args[2][112 * steps + ((cycle - 1) & mask)];
        assert(x655 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x656 = x655 * x65;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x657 = x654 + x656;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x658 = args[2][113 * steps + ((cycle - 1) & mask)];
        assert(x658 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x659 = x658 * x64;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x660 = x657 + x659;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x661 = args[2][114 * steps + ((cycle - 1) & mask)];
        assert(x661 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x662 = x661 * x63;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x663 = x660 + x662;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x664 = args[2][115 * steps + ((cycle - 1) & mask)];
        assert(x664 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x665 = x664 * x73;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x666 = x663 + x665;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":77:0)
        auto x667 = x666 - x73;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":77:0)
        if (x667 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:77");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":79:0))
        auto x668 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x668 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":79:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x668);
          reg = x668;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":81:0))
        auto x669 = args[2][118 * steps + ((cycle - 1) & mask)];
        assert(x669 != Fp::invalid());
        {
          auto [x670, x671, x672, x673] = extern_ramRead(ctx, cycle, "", {x669, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x670);
            reg = x670;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x671);
            reg = x671;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x672);
            reg = x672;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x673);
            reg = x673;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x674 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x674 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x675 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x675 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x676 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x676 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x677 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x677 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x669);
          reg = x669;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x674);
          reg = x674;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x675);
          reg = x675;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x676);
          reg = x676;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x677);
          reg = x677;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][106] = x674;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][107] = x675;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][108] = x676;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][109] = x677;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":84:0)
        auto x678 = x669 + x96;
        {
          auto [x679, x680, x681, x682] = extern_ramRead(ctx, cycle, "", {x678, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x679);
            reg = x679;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x680);
            reg = x680;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x681);
            reg = x681;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x682);
            reg = x682;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x683 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x683 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x684 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x684 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x685 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x685 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x686 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x686 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x678);
          reg = x678;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x683);
          reg = x683;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x684);
          reg = x684;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x685);
          reg = x685;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x686);
          reg = x686;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][110] = x683;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][111] = x684;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][112] = x685;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][113] = x686;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":84:0)
        auto x687 = x669 + x93;
        {
          auto [x688, x689, x690, x691] = extern_ramRead(ctx, cycle, "", {x687, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x688);
            reg = x688;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x689);
            reg = x689;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x690);
            reg = x690;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x691);
            reg = x691;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x692 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x692 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x693 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x693 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x694 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x694 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x695 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x695 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x687);
          reg = x687;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x692);
          reg = x692;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x693);
          reg = x693;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x694);
          reg = x694;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x695);
          reg = x695;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][114] = x692;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][115] = x693;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][116] = x694;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][117] = x695;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":84:0)
        auto x696 = x669 + x76;
        {
          auto [x697, x698, x699, x700] = extern_ramRead(ctx, cycle, "", {x696, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x697);
            reg = x697;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x698);
            reg = x698;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x699);
            reg = x699;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x700);
            reg = x700;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x701 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x701 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x702 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x702 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x703 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x703 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x704 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x704 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x696);
          reg = x696;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x701);
          reg = x701;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x702);
          reg = x702;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x703);
          reg = x703;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x704);
          reg = x704;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][118] = x701;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][119] = x702;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][120] = x703;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][121] = x704;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":88:0)
      auto x705 = x96 - x477;
      if (x705 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":90:0))
        auto x706 = args[2][118 * steps + ((cycle - 2) & mask)];
        assert(x706 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":91:0))
        auto x707 = args[2][175 * steps + ((cycle - 1) & mask)];
        assert(x707 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":91:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x707);
          reg = x707;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":95:0)
        auto x708 = x706 + x77;
        {
          auto [x709, x710, x711, x712] = extern_ramRead(ctx, cycle, "", {x708, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x709);
            reg = x709;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x710);
            reg = x710;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x711);
            reg = x711;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x712);
            reg = x712;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x713 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x713 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x714 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x714 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x715 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x715 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x716 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x716 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x708);
          reg = x708;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x713);
          reg = x713;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x714);
          reg = x714;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x715);
          reg = x715;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x716);
          reg = x716;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][122] = x713;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][123] = x714;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][124] = x715;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][125] = x716;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":95:0)
        auto x717 = x708 + x96;
        {
          auto [x718, x719, x720, x721] = extern_ramRead(ctx, cycle, "", {x717, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x718);
            reg = x718;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x719);
            reg = x719;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x720);
            reg = x720;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x721);
            reg = x721;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x722 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x722 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x723 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x723 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x724 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x724 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x725 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x725 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x717);
          reg = x717;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x722);
          reg = x722;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x723);
          reg = x723;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x724);
          reg = x724;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x725);
          reg = x725;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][126] = x722;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][127] = x723;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][128] = x724;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][129] = x725;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":95:0)
        auto x726 = x708 + x93;
        {
          auto [x727, x728, x729, x730] = extern_ramRead(ctx, cycle, "", {x726, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x727);
            reg = x727;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x728);
            reg = x728;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x729);
            reg = x729;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x730);
            reg = x730;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x731 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x731 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x732 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x732 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x733 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x733 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x734 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x734 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x726);
          reg = x726;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x731);
          reg = x731;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x732);
          reg = x732;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x733);
          reg = x733;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x734);
          reg = x734;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][130] = x731;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][131] = x732;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][132] = x733;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][133] = x734;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":95:0)
        auto x735 = x708 + x76;
        {
          auto [x736, x737, x738, x739] = extern_ramRead(ctx, cycle, "", {x735, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x737);
            reg = x737;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x739);
            reg = x739;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x740 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x740 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x741 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x741 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x742 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x742 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x743 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x743 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x741);
          reg = x741;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x742);
          reg = x742;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x743);
          reg = x743;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][134] = x740;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][135] = x741;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][136] = x742;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][137] = x743;
      }
    }
    if (x480 != 0) {
      // loc("Top/mux(Mux)/reset(ResetStep)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":101:0))
      auto x744 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x744 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":101:0)
      {
        auto& reg = args[2][175 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x744);
        reg = x744;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":102:0))
      auto x745 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x745 != Fp::invalid());
      {
        // loc("./zirgen/components/onehot.h":37:0)
        auto x746 = (x745 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x746);
          reg = x746;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        auto x747 = x745 - x96;
        // loc("./zirgen/components/onehot.h":37:0)
        auto x748 = (x747 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x748);
          reg = x748;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        auto x749 = x745 - x93;
        // loc("./zirgen/components/onehot.h":37:0)
        auto x750 = (x749 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x750);
          reg = x750;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x751 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x751 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x752 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x752 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x753 = x752 * x93;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x754 = x751 + x753;
      // loc("./zirgen/components/onehot.h":40:0)
      auto x755 = x754 - x745;
      // loc("./zirgen/components/onehot.h":40:0)
      if (x755 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":105:0))
      auto x756 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x756 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":105:0)
      auto x757 = x96 - x756;
      if (x477 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x758 = args[2][71 * steps + ((cycle - 1) & mask)];
        assert(x758 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
        auto x759 = x758 * x74;
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x760 = args[2][70 * steps + ((cycle - 1) & mask)];
        assert(x760 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
        auto x761 = x760 * x79;
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x762 = args[2][8 * steps + ((cycle - 1) & mask)];
        assert(x762 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
        auto x763 = x762 * x78;
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x764 = args[2][7 * steps + ((cycle - 1) & mask)];
        assert(x764 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
        auto x765 = x764 * x91;
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x766 = args[2][6 * steps + ((cycle - 1) & mask)];
        assert(x766 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
        auto x767 = x766 + x765;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
        auto x768 = x767 + x763;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
        auto x769 = x768 + x761;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
        auto x770 = x769 + x759;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
        auto x771 = x770 - x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x772 = Fp(x771.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x772);
            reg = x772;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x773 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x773 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x774 = x771 - x773;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x775 = x774 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x776 = Fp(x775.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x776);
            reg = x776;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x777 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x777 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x778 = x775 - x777;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x779 = x778 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x780 = Fp(x779.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x780);
            reg = x780;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x781 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x781 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x782 = x779 - x781;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x783 = x782 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x784 = Fp(x783.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x784);
            reg = x784;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x785 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x785 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x786 = x783 - x785;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x787 = x786 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x787);
          reg = x787;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x788 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x788 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x789 = x96 - x788;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x790 = x788 * x789;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x790);
          reg = x790;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x791 = x93 - x788;
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x792 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x792 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x793 = x792 * x791;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x793 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        {
          auto [x794, x795, x796, x797] = extern_ramRead(ctx, cycle, "", {x87, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x794);
            reg = x794;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x795);
            reg = x795;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x796);
            reg = x796;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x797);
            reg = x797;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x798 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x798 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x799 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x799 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x800 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x800 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x801 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x801 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x798);
          reg = x798;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x799);
          reg = x799;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x800);
          reg = x800;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x801);
          reg = x801;
        }
        // loc("zirgen/components/u32.cpp":40:0)
        auto x802 = x798 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][72] = x802;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x803 = x799 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][73] = x803;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x804 = x800 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][74] = x804;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x805 = x801 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][75] = x805;
        {
          auto [x806, x807, x808, x809] = extern_ramRead(ctx, cycle, "", {x86, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x806);
            reg = x806;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x807);
            reg = x807;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x808);
            reg = x808;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x809);
            reg = x809;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x810 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x810 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x811 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x811 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x812 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x812 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x813 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x813 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x810);
          reg = x810;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x811);
          reg = x811;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x812);
          reg = x812;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x813);
          reg = x813;
        }
        // loc("zirgen/components/u32.cpp":40:0)
        auto x814 = x810 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][76] = x814;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x815 = x811 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][77] = x815;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x816 = x812 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][78] = x816;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x817 = x813 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][79] = x817;
        {
          auto [x818, x819, x820, x821] = extern_ramRead(ctx, cycle, "", {x85, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x818);
            reg = x818;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x819);
            reg = x819;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x820);
            reg = x820;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x821);
            reg = x821;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x822 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x822 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x823 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x823 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x824 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x824 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x825 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x825 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x822);
          reg = x822;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x823);
          reg = x823;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x824);
          reg = x824;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x825);
          reg = x825;
        }
        // loc("zirgen/components/u32.cpp":40:0)
        auto x826 = x822 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][80] = x826;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x827 = x823 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][81] = x827;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x828 = x824 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][82] = x828;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x829 = x825 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][83] = x829;
        {
          auto [x830, x831, x832, x833] = extern_ramRead(ctx, cycle, "", {x84, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x830);
            reg = x830;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x831);
            reg = x831;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x832);
            reg = x832;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x833);
            reg = x833;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x834 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x834 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x835 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x835 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x836 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x836 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x837 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x837 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x834);
          reg = x834;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x835);
          reg = x835;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x836);
          reg = x836;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x837);
          reg = x837;
        }
        // loc("zirgen/components/u32.cpp":40:0)
        auto x838 = x834 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][84] = x838;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x839 = x835 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][85] = x839;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x840 = x836 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][86] = x840;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x841 = x837 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][87] = x841;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":35:0)
        auto x842 = x788 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":35:0)
        auto x843 = x785 + x842;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][68] = x773;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][69] = x777;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][70] = x781;
        // loc("zirgen/components/u32.cpp":34:0)
        args[1][71] = x843;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":117:0)
      auto x844 = x96 - x477;
      if (x844 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x845 = args[2][71 * steps + ((cycle - 1) & mask)];
        assert(x845 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
        auto x846 = x845 * x74;
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x847 = args[2][70 * steps + ((cycle - 1) & mask)];
        assert(x847 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
        auto x848 = x847 * x79;
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x849 = args[2][8 * steps + ((cycle - 1) & mask)];
        assert(x849 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
        auto x850 = x849 * x78;
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x851 = args[2][7 * steps + ((cycle - 1) & mask)];
        assert(x851 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
        auto x852 = x851 * x91;
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x853 = args[2][6 * steps + ((cycle - 1) & mask)];
        assert(x853 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
        auto x854 = x853 + x852;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
        auto x855 = x854 + x850;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
        auto x856 = x855 + x848;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
        auto x857 = x856 + x846;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
        auto x858 = x857 - x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x859 = x858 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x860 = Fp(x859.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x860);
            reg = x860;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x861 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x861 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x862 = x859 - x861;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x863 = x862 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x864 = Fp(x863.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x864);
            reg = x864;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x865 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x865 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x866 = x863 - x865;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x867 = x866 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x868 = Fp(x867.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x868);
            reg = x868;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x869 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x869 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x870 = x867 - x869;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x871 = x870 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x872 = Fp(x871.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x872);
            reg = x872;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x873 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x873 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x874 = x871 - x873;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x875 = x874 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x875);
          reg = x875;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x876 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x876 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x877 = x96 - x876;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x878 = x876 * x877;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x878);
          reg = x878;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x879 = x93 - x876;
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x880 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x880 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x881 = x880 * x879;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x881 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        {
          auto [x882, x883, x884, x885] = extern_ramRead(ctx, cycle, "", {x83, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x882);
            reg = x882;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x883);
            reg = x883;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x884);
            reg = x884;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x885);
            reg = x885;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x886 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x886 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x887 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x887 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x888 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x888 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x889 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x889 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x886);
          reg = x886;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x887);
          reg = x887;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x888);
          reg = x888;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x889);
          reg = x889;
        }
        // loc("zirgen/components/u32.cpp":40:0)
        auto x890 = x886 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][88] = x890;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x891 = x887 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][89] = x891;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x892 = x888 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][90] = x892;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x893 = x889 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][91] = x893;
        {
          auto [x894, x895, x896, x897] = extern_ramRead(ctx, cycle, "", {x82, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x894);
            reg = x894;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x895);
            reg = x895;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x896);
            reg = x896;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x897);
            reg = x897;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x898 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x898 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x899 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x899 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x900 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x900 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x901 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x901 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x898);
          reg = x898;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x899);
          reg = x899;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x900);
          reg = x900;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x901);
          reg = x901;
        }
        // loc("zirgen/components/u32.cpp":40:0)
        auto x902 = x898 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][92] = x902;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x903 = x899 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][93] = x903;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x904 = x900 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][94] = x904;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x905 = x901 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][95] = x905;
        {
          auto [x906, x907, x908, x909] = extern_ramRead(ctx, cycle, "", {x81, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x906);
            reg = x906;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x907);
            reg = x907;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x908);
            reg = x908;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x909);
            reg = x909;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x910 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x910 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x911 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x911 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x912 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x912 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x913 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x913 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x910);
          reg = x910;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x911);
          reg = x911;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x912);
          reg = x912;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x913);
          reg = x913;
        }
        // loc("zirgen/components/u32.cpp":40:0)
        auto x914 = x910 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][96] = x914;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x915 = x911 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][97] = x915;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x916 = x912 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][98] = x916;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x917 = x913 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][99] = x917;
        {
          auto [x918, x919, x920, x921] = extern_ramRead(ctx, cycle, "", {x80, x95});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x918);
            reg = x918;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x919);
            reg = x919;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x920);
            reg = x920;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x921);
            reg = x921;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x922 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x922 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x923 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x923 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x924 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x924 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x925 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x925 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x922);
          reg = x922;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x923);
          reg = x923;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x924);
          reg = x924;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x925);
          reg = x925;
        }
        // loc("zirgen/components/u32.cpp":40:0)
        auto x926 = x922 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][100] = x926;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x927 = x923 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][101] = x927;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x928 = x924 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][102] = x928;
        // loc("zirgen/components/u32.cpp":40:0)
        auto x929 = x925 * x757;
        // loc("zirgen/components/u32.cpp":40:0)
        args[1][103] = x929;
      }
    }
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":127:0)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x62);
      reg = x62;
    }
    // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x930 = args[2][71 * steps + ((cycle - 0) & mask)];
    assert(x930 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
    auto x931 = x930 * x74;
    // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x932 = args[2][70 * steps + ((cycle - 0) & mask)];
    assert(x932 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
    auto x933 = x932 * x79;
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x934 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x934 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
    auto x935 = x934 * x78;
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x936 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x936 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
    auto x937 = x936 * x91;
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x938 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x938 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
    auto x939 = x938 + x937;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
    auto x940 = x939 + x935;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
    auto x941 = x940 + x933;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
    auto x942 = x941 + x931;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
    auto x943 = x942 - x77;
    extern_log(ctx, cycle, "%u: Reset: PC = %10x", {x476, x943});
  }
  // loc("Top/Code/OneHot/hot[5](Reg)"("./zirgen/components/mux.h":49:0))
  auto x944 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x944 != Fp::invalid());
  if (x944 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x945 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x945 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x946 = args[2][71 * steps + ((cycle - 1) & mask)];
    assert(x946 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
    auto x947 = x946 * x74;
    // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x948 = args[2][70 * steps + ((cycle - 1) & mask)];
    assert(x948 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
    auto x949 = x948 * x79;
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x950 = args[2][8 * steps + ((cycle - 1) & mask)];
    assert(x950 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
    auto x951 = x950 * x78;
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x952 = args[2][7 * steps + ((cycle - 1) & mask)];
    assert(x952 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
    auto x953 = x952 * x91;
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
    auto x954 = args[2][6 * steps + ((cycle - 1) & mask)];
    assert(x954 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:0)
    auto x955 = x954 + x953;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":29:0)
    auto x956 = x955 + x951;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":30:0)
    auto x957 = x956 + x949;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
    auto x958 = x957 + x947;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":31:0)
    auto x959 = x958 - x77;
    {
      // loc("Top/mux(Mux)/body(BodyStep)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":191:0))
      auto x960 = args[2][99 * steps + ((cycle - 1) & mask)];
      assert(x960 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":192:0)
      auto x961 = x960 - x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":192:0)
      auto x962 = (x961 == 0) ? Fp(1) : Fp(0);
      if (x962 != 0) {
        extern_log(ctx, cycle, "%u: BODY pc: %10x", {x945, x959});
        extern_trace(ctx, cycle, "", {x959});
        auto x963 = extern_getMajor(ctx, cycle, "", {x945, x959});
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x964 = (x963 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x964);
            reg = x964;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x965 = x963 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x966 = (x965 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x966);
            reg = x966;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x967 = x963 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x968 = (x967 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x968);
            reg = x968;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x969 = x963 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x970 = (x969 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x970);
            reg = x970;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x971 = x963 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x972 = (x971 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x972);
            reg = x972;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x973 = x963 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x974 = (x973 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x974);
            reg = x974;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x975 = x963 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x976 = (x975 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x976);
            reg = x976;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x977 = x963 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x978 = (x977 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x978);
            reg = x978;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x979 = x963 - x69;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x980 = (x979 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x980);
            reg = x980;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x981 = x963 - x68;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x982 = (x981 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x982);
            reg = x982;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x983 = x963 - x67;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x984 = (x983 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x984);
            reg = x984;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x985 = x963 - x66;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x986 = (x985 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x986);
            reg = x986;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x987 = x963 - x65;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x988 = (x987 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x988);
            reg = x988;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x989 = x963 - x64;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x990 = (x989 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x990);
            reg = x990;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x991 = x963 - x63;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x992 = (x991 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x992);
            reg = x992;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x993 = x963 - x73;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x994 = (x993 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x994);
            reg = x994;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x995 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x995 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x996 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x996 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x997 = x996 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x998 = x995 + x997;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x999 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x999 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1000 = x999 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1001 = x998 + x1000;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1002 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x1002 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1003 = x1002 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1004 = x1001 + x1003;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1005 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x1005 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1006 = x1005 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1007 = x1004 + x1006;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1008 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x1008 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1009 = x1008 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1010 = x1007 + x1009;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1011 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x1011 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1012 = x1011 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1013 = x1010 + x1012;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1014 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x1014 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1015 = x1014 * x69;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1016 = x1013 + x1015;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1017 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x1017 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1018 = x1017 * x68;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1019 = x1016 + x1018;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1020 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x1020 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1021 = x1020 * x67;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1022 = x1019 + x1021;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1023 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x1023 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1024 = x1023 * x66;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1025 = x1022 + x1024;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1026 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x1026 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1027 = x1026 * x65;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1028 = x1025 + x1027;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1029 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x1029 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1030 = x1029 * x64;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1031 = x1028 + x1030;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1032 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x1032 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1033 = x1032 * x63;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1034 = x1031 + x1033;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1035 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x1035 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1036 = x1035 * x73;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1037 = x1034 + x1036;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x1038 = x1037 - x963;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x1038 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":199:0)
      auto x1039 = x96 - x962;
      if (x1039 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":200:0)
        auto x1040 = x960 - x73;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":200:0)
        auto x1041 = (x1040 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":200:0)
        auto x1042 = x96 - x1041;
        if (x1042 != 0) {
          extern_log(ctx, cycle, "%u: BODY pc: %10x, major = %u", {x945, x959, x960});
        }
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1043 = (x960 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1043);
            reg = x1043;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1044 = x960 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1045 = (x1044 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1045);
            reg = x1045;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1046 = x960 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1047 = (x1046 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1047);
            reg = x1047;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1048 = x960 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1049 = (x1048 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1049);
            reg = x1049;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1050 = x960 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1051 = (x1050 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1051);
            reg = x1051;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1052 = x960 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1053 = (x1052 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1053);
            reg = x1053;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1054 = x960 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1055 = (x1054 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1055);
            reg = x1055;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1056 = x960 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1057 = (x1056 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1057);
            reg = x1057;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1058 = x960 - x69;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1059 = (x1058 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1059);
            reg = x1059;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1060 = x960 - x68;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1061 = (x1060 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1061);
            reg = x1061;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1062 = x960 - x67;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1063 = (x1062 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1063);
            reg = x1063;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1064 = x960 - x66;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1065 = (x1064 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1065);
            reg = x1065;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1066 = x960 - x65;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1067 = (x1066 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1067);
            reg = x1067;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1068 = x960 - x64;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1069 = (x1068 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1069);
            reg = x1069;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1070 = x960 - x63;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1071 = (x1070 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1071);
            reg = x1071;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1041);
            reg = x1041;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1072 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x1072 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1073 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x1073 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1074 = x1073 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1075 = x1072 + x1074;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1076 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x1076 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1077 = x1076 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1078 = x1075 + x1077;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1079 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x1079 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1080 = x1079 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1081 = x1078 + x1080;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1082 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x1082 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1083 = x1082 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1084 = x1081 + x1083;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1085 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x1085 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1086 = x1085 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1087 = x1084 + x1086;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1088 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x1088 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1089 = x1088 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1090 = x1087 + x1089;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1091 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x1091 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1092 = x1091 * x69;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1093 = x1090 + x1092;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1094 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x1094 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1095 = x1094 * x68;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1096 = x1093 + x1095;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1097 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x1097 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1098 = x1097 * x67;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1099 = x1096 + x1098;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1100 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x1100 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1101 = x1100 * x66;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1102 = x1099 + x1101;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1103 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x1103 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1104 = x1103 * x65;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1105 = x1102 + x1104;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1106 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x1106 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1107 = x1106 * x64;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1108 = x1105 + x1107;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1109 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x1109 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1110 = x1109 * x63;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1111 = x1108 + x1110;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1112 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x1112 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1113 = x1112 * x73;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1114 = x1111 + x1113;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x1115 = x1114 - x960;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x1115 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[0](Reg)"("./zirgen/components/mux.h":49:0))
    auto x1116 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x1116 != Fp::invalid());
    if (x1116 != 0) {
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":112:0)
      auto x1117 = x959 * x75;
      {
        auto [x1118, x1119, x1120, x1121] = extern_ramRead(ctx, cycle, "", {x1117, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1118);
          reg = x1118;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1119);
          reg = x1119;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1120);
          reg = x1120;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1121);
          reg = x1121;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1122 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1122 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1123 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1123 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1124 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1124 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1125 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x1125 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1117);
        reg = x1117;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1122);
        reg = x1122;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1123);
        reg = x1123;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1124);
        reg = x1124;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1125);
        reg = x1125;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x1126 = Fp(x1125.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x1127 = x1126 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1127);
          reg = x1127;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x1128 = Fp(x1125.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x1129 = x1128 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1129);
          reg = x1129;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x1130 = Fp(x1125.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x1131 = x1130 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1131);
          reg = x1131;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x1132 = Fp(x1125.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x1133 = x1132 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1133);
          reg = x1133;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x1134 = Fp(x1125.asUInt32() & x71.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x1135 = x1134 * x54;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1135);
          reg = x1135;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:0)
        auto x1136 = Fp(x1125.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1136);
          reg = x1136;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x1137 = Fp(x1124.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x1138 = x1137 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1138);
          reg = x1138;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x1139 = Fp(x1124.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x1140 = x1139 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1140);
          reg = x1140;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x1141 = Fp(x1124.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x1142 = x1141 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1142);
          reg = x1142;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x1143 = Fp(x1124.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x1144 = x1143 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1144);
          reg = x1144;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:0)
        auto x1145 = Fp(x1124.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1145);
          reg = x1145;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x1146 = Fp(x1123.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x1147 = x1146 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1147);
          reg = x1147;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x1148 = Fp(x1123.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x1149 = x1148 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1149);
          reg = x1149;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x1150 = Fp(x1123.asUInt32() & x51.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x1151 = x1150 * x56;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1151);
          reg = x1151;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x1152 = Fp(x1123.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x1153 = x1152 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1153);
          reg = x1153;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:0)
        auto x1154 = Fp(x1123.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1154);
          reg = x1154;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x1155 = Fp(x1122.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x1156 = x1155 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1156);
          reg = x1156;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        auto x1157 = Fp(x1122.asUInt32() & x50.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1157);
          reg = x1157;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1158 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1158 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1159 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1159 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1160 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1160 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1161 = x1160 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1162 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1162 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1163 = x1162 * x69;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1164 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1164 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1165 = x1164 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1166 = x1165 + x1163;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1167 = x1166 + x1161;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1168 = x1167 + x1159;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1169 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1169 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x1170 = x1169 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x1171 = x1170 + x1168;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x1172 = x1171 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x1173 = x1172 + x1158;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x1174 = x1125 - x1173;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      if (x1174 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1175 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1175 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1176 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1176 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1177 = x1176 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1178 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1178 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1179 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1179 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1180 = x1179 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1181 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1181 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1182 = x1181 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1183 = x1182 + x1180;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1184 = x1183 + x1178;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1185 = x1184 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1186 = x1185 + x1177;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1187 = x1186 + x1175;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1188 = x1124 - x1187;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      if (x1188 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1189 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1189 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1190 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1190 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1191 = x1190 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1192 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1192 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1193 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1193 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x1194 = x1193 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x1195 = x1194 + x1192;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1196 = x1195 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1197 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1197 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1198 = x1197 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1199 = x1198 + x1196;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1200 = x1199 + x1191;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1201 = x1200 + x1189;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1202 = x1123 - x1201;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      if (x1202 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x1203 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1203 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1204 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1204 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x1205 = x1204 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x1206 = x1205 + x1203;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x1207 = x1122 - x1206;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      if (x1207 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        auto x1208 = extern_getMinor(ctx, cycle, "", {x1122, x1123, x1124, x1125});
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1209 = (x1208 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1209);
            reg = x1209;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1210 = x1208 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1211 = (x1210 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1211);
            reg = x1211;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1212 = x1208 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1213 = (x1212 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1213);
            reg = x1213;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1214 = x1208 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1215 = (x1214 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1215);
            reg = x1215;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1216 = x1208 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1217 = (x1216 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1217);
            reg = x1217;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1218 = x1208 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1219 = (x1218 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1219);
            reg = x1219;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1220 = x1208 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1221 = (x1220 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1221);
            reg = x1221;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1222 = x1208 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1223 = (x1222 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1223);
            reg = x1223;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1224 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1224 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1225 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1225 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1226 = x1225 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1227 = x1224 + x1226;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1228 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1228 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1229 = x1228 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1230 = x1227 + x1229;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1231 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1231 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1232 = x1231 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1233 = x1230 + x1232;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1234 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1234 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1235 = x1234 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1236 = x1233 + x1235;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1237 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1237 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1238 = x1237 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1239 = x1236 + x1238;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1240 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1240 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1241 = x1240 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1242 = x1239 + x1241;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x1243 = x1242 - x1208;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x1243 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:0))
        auto x1244 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1244 != Fp::invalid());
        if (x1244 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0))
        auto x1245 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1245 != Fp::invalid());
        if (x1245 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0))
        auto x1246 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1246 != Fp::invalid());
        if (x1246 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":43:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":44:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":45:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0))
        auto x1247 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1247 != Fp::invalid());
        if (x1247 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":38:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":39:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":40:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0))
        auto x1248 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1248 != Fp::invalid());
        if (x1248 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":33:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":34:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":35:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0))
        auto x1249 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1249 != Fp::invalid());
        if (x1249 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0))
        auto x1250 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1250 != Fp::invalid());
        if (x1250 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:0))
        auto x1251 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1251 != Fp::invalid());
        if (x1251 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1252 = x1158 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1253 = x1252 + x1184;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1254 = x1159 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1255 = x1160 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1256 = x1255 + x1254;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1257 = x1256 + x1253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1258 = x1164 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1259 = x1169 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1260 = x1259 + x1258;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1261 = x1260 + x1162;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x1262 = x1169 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1257);
            reg = x1257;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1261);
            reg = x1261;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1262);
            reg = x1262;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1262);
            reg = x1262;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x1263 = x1175 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x1264 = x1176 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x1265 = x1264 + x1263;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x1266 = x1265 + x1197;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":134:0)
      auto x1267 = x1266 + x48;
      {
        auto [x1268, x1269, x1270, x1271] = extern_ramRead(ctx, cycle, "", {x1267, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1268);
          reg = x1268;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1269);
          reg = x1269;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1270);
          reg = x1270;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1271);
          reg = x1271;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1272 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1272 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1273 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1273 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1274 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1274 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1275 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x1275 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1267);
        reg = x1267;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1272);
        reg = x1272;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1273);
        reg = x1273;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1274);
        reg = x1274;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1275);
        reg = x1275;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x1276 = x1158 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x1277 = x1276 + x1184;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":135:0)
      auto x1278 = x1277 + x48;
      {
        auto [x1279, x1280, x1281, x1282] = extern_ramRead(ctx, cycle, "", {x1278, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1279);
          reg = x1279;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1280);
          reg = x1280;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1281);
          reg = x1281;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1282);
          reg = x1282;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1283 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x1283 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1284 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x1284 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1285 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x1285 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1286 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x1286 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1278);
        reg = x1278;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1283);
        reg = x1283;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1284);
        reg = x1284;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1285);
        reg = x1285;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1286);
        reg = x1286;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1287 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x1287 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":35:0)
      auto x1288 = x946 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":35:0)
      auto x1289 = x948 + x1288;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x1290 = x954 - x77;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1291 = x1287 * x1290;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1292 = x1287 * x952;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1293 = x1287 * x950;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1294 = x1287 * x1289;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":139:0)
      auto x1295 = x96 - x1287;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1296 = x1295 * x1272;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1297 = x1295 * x1273;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1298 = x1295 * x1274;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1299 = x1295 * x1275;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1300 = x1296 + x1291;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1301 = x1297 + x1292;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1302 = x1298 + x1293;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1303 = x1299 + x1294;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1304 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1304 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1305 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1305 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1306 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1307 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1307 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1308 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x1308 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1309 = x1304 * x1305;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1310 = x1304 * x1306;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1311 = x1304 * x1307;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1312 = x1304 * x1308;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":141:0)
      auto x1313 = x96 - x1304;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1314 = x1313 * x1283;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1315 = x1313 * x1284;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1316 = x1313 * x1285;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1317 = x1313 * x1286;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1318 = x1314 + x1309;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1319 = x1315 + x1310;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1320 = x1316 + x1311;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1321 = x1317 + x1312;
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x1322 = Fp(x1303.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x1323 = x1322 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1323);
          reg = x1323;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x1324 = Fp(x1303.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x1325 = x1324 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1325);
          reg = x1325;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x1326 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1326 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1327 = x1326 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1328 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1328 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1329 = x1328 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1330 = x1329 + x1327;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1331 = x1303 - x1330;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x1331 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x1332 = Fp(x1321.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x1333 = x1332 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1333);
          reg = x1333;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x1334 = Fp(x1321.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x1335 = x1334 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1335);
          reg = x1335;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x1336 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x1336 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1337 = x1336 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1338 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1338 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1339 = x1338 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1340 = x1339 + x1337;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1341 = x1321 - x1340;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x1341 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1318);
        reg = x1318;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1319);
        reg = x1319;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1320);
        reg = x1320;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1321);
        reg = x1321;
      }
      {
        // loc("zirgen/components/u32.cpp":119:0)
        auto x1342 = Fp(x1300.asUInt32() & x1318.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x1343 = Fp(x1301.asUInt32() & x1319.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x1344 = Fp(x1302.asUInt32() & x1320.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x1345 = Fp(x1303.asUInt32() & x1321.asUInt32());
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1342);
          reg = x1342;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1343);
          reg = x1343;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1344);
          reg = x1344;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1345);
          reg = x1345;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1346 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1346 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1347 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1347 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1348 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1348 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1349 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x1349 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1350 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1350 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1351 = x1350 * x1346;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1352 = x1350 * x1347;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1353 = x1350 * x1348;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1354 = x1350 * x1349;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1355 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1355 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1356 = x1355 * x1318;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1357 = x1355 * x1319;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1358 = x1355 * x1320;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1359 = x1355 * x1321;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1360 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1360 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1361 = x1360 * x1300;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1362 = x1360 * x1301;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1363 = x1360 * x1302;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1364 = x1360 * x1303;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1365 = x1361 + x91;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1366 = x1362 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1367 = x1363 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1368 = x1364 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1369 = x1365 + x1356;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1370 = x1366 + x1357;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1371 = x1367 + x1358;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1372 = x1368 + x1359;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1373 = x1369 + x1351;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1374 = x1370 + x1352;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1375 = x1371 + x1353;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1376 = x1372 + x1354;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x1377 = x1374 * x91;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x1378 = x1373 + x1377;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x1379 = Fp(x1378.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1379);
          reg = x1379;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x1380 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x1380 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x1381 = x1378 - x1380;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x1382 = x1381 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x1383 = Fp(x1382.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1383);
          reg = x1383;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x1384 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1384 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x1385 = x1382 - x1384;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x1386 = x1385 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1386);
        reg = x1386;
      }
      // loc("zirgen/components/u32.cpp":154:0)
      auto x1387 = x1376 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1388 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1388 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:0)
      auto x1389 = x1388 + x1375;
      // loc("zirgen/components/u32.cpp":154:0)
      auto x1390 = x1389 + x1387;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x1391 = Fp(x1390.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1391);
          reg = x1391;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x1392 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1392 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x1393 = x1390 - x1392;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x1394 = x1393 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x1395 = Fp(x1394.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1395);
          reg = x1395;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x1396 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1396 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x1397 = x1394 - x1396;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x1398 = x1397 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1398);
        reg = x1398;
      }
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x1399 = Fp(x1396.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x1400 = x1399 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1400);
          reg = x1400;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x1401 = Fp(x1396.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x1402 = x1401 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1402);
          reg = x1402;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x1403 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x1403 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1404 = x1403 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1405 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x1405 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1406 = x1405 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1407 = x1406 + x1404;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x1408 = x1396 - x1407;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x1408 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x1409 = x96 - x1328;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x1410 = x1409 * x1338;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x1411 = x1410 * x1405;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x1412 = x96 - x1405;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x1413 = x96 - x1338;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x1414 = x1328 * x1413;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x1415 = x1414 * x1412;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x1416 = x1415 + x1411;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1416);
        reg = x1416;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x1417 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x1417 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x1418 = x1417 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x1419 = x1418 * x1405;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x1420 = x1417 + x1405;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x1421 = x1420 - x1419;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1421);
        reg = x1421;
      }
      // loc("zirgen/components/u32.cpp":143:0)
      auto x1422 = x1384 * x91;
      // loc("zirgen/components/u32.cpp":143:0)
      auto x1423 = x1380 + x1422;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x1424 = (x1423 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1424);
          reg = x1424;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x1425 = inv(x1423);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1425);
          reg = x1425;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1426 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x1426 != Fp::invalid());
      if (x1426 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x1423 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x1427 = x96 - x1426;
      if (x1427 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1428 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x1428 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x1429 = x1423 * x1428;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x1430 = x1429 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x1430 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":144:0)
      auto x1431 = x1427 * x78;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x1432 = x1396 * x91;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x1433 = x1392 + x1432;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x1434 = x1433 + x1431;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x1435 = (x1434 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1435);
          reg = x1435;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x1436 = inv(x1434);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1436);
          reg = x1436;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1437 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x1437 != Fp::invalid());
      if (x1437 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x1434 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x1438 = x96 - x1437;
      if (x1438 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1439 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x1439 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x1440 = x1434 * x1439;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x1441 = x1440 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x1441 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1442 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1442 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":97:0)
      auto x1443 = x96 - x1442;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1444 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x1444 != Fp::invalid());
      extern_log(ctx, cycle, "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", {x1305, x1306, x1307, x1308, x1266, x1272, x1273, x1274, x1275, x1277, x1283, x1284, x1285, x1286, x1300, x1301, x1302, x1303, x1318, x1319, x1320, x1321, x1380, x1384, x1392, x1396, x1437, x1444, x1443});
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x1445 = x1189 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x1446 = x1190 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x1447 = x1446 + x1445;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x1448 = x1447 + x1204;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x1449 = (x1448 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1449);
          reg = x1449;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x1450 = inv(x1448);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1450);
          reg = x1450;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1451 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x1451 != Fp::invalid());
      if (x1451 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x1448 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x1452 = x96 - x1451;
      if (x1452 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1453 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x1453 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x1454 = x1448 * x1453;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x1455 = x1454 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x1455 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":161:0)
      auto x1456 = x959 + x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:0))
      auto x1457 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1457 != Fp::invalid());
      if (x1457 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:0)
        auto x1458 = x1203 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:0)
        if (x1458 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:38");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:0)
        if (x1195 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:38");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:0)
        if (x1171 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:38");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x1459 = x1456 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1460 = Fp(x1459.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1460);
            reg = x1460;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1461 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1461 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1462 = x1459 - x1461;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1463 = x1462 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1464 = Fp(x1463.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1464);
            reg = x1464;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1465 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1465 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1466 = x1463 - x1465;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1467 = x1466 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1468 = Fp(x1467.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1468);
            reg = x1468;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1469 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1469 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1470 = x1467 - x1469;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1471 = x1470 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x1472 = Fp(x1471.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1472);
            reg = x1472;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1473 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1473 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1474 = x1471 - x1473;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1475 = x1474 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1475);
          reg = x1475;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1476 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1476 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1477 = x96 - x1476;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1478 = x1476 * x1477;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1478);
          reg = x1478;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1479 = x93 - x1476;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1480 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1480 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1481 = x1480 * x1479;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x1481 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1482 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1482 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1482);
          reg = x1482;
        }
        if (x1452 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x1448, x1380, x1384, x1392, x1396});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:0)
          auto x1483 = x1448 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1380);
            reg = x1380;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1384);
            reg = x1384;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1396);
            reg = x1396;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x1483, x1380, x1384, x1392, x1396, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1484 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1484 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1485 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1485 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1486 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1486 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1487 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1487 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1483);
            reg = x1483;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1484);
            reg = x1484;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1485);
            reg = x1485;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1486);
            reg = x1486;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1487);
            reg = x1487;
          }
        }
        if (x1451 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0))
      auto x1488 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1488 != Fp::invalid());
      if (x1488 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0)
        auto x1489 = x1203 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0)
        if (x1489 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:39");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0)
        if (x1195 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:39");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0)
        auto x1490 = x1171 - x59;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0)
        if (x1490 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:39");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x1491 = x1456 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1492 = Fp(x1491.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1492);
            reg = x1492;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1493 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1493 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1494 = x1491 - x1493;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1495 = x1494 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1496 = Fp(x1495.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1496);
            reg = x1496;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1497 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1497 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1498 = x1495 - x1497;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1499 = x1498 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1500 = Fp(x1499.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1500);
            reg = x1500;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1501 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1501 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1502 = x1499 - x1501;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1503 = x1502 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x1504 = Fp(x1503.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1504);
            reg = x1504;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1505 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1505 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1506 = x1503 - x1505;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1507 = x1506 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1507);
          reg = x1507;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1508 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1508 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1509 = x96 - x1508;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1510 = x1508 * x1509;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1510);
          reg = x1510;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1511 = x93 - x1508;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1512 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1512 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1513 = x1512 * x1511;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x1513 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1514 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1514 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1514);
          reg = x1514;
        }
        if (x1452 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x1448, x1380, x1384, x1392, x1396});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:0)
          auto x1515 = x1448 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1380);
            reg = x1380;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1384);
            reg = x1384;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1396);
            reg = x1396;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x1515, x1380, x1384, x1392, x1396, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1516 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1516 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1517 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1517 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1518 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1518 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1519 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1519 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1515);
            reg = x1515;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1516);
            reg = x1516;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1517);
            reg = x1517;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1518);
            reg = x1518;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1519);
            reg = x1519;
          }
        }
        if (x1451 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0))
      auto x1520 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1520 != Fp::invalid());
      if (x1520 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0)
        auto x1521 = x1203 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0)
        if (x1521 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:40");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0)
        auto x1522 = x1195 - x77;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0)
        if (x1522 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:40");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0)
        if (x1171 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:40");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":43:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":44:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":45:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x1523 = x1456 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1524 = Fp(x1523.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1524);
            reg = x1524;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1525 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1525 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1526 = x1523 - x1525;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1527 = x1526 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1528 = Fp(x1527.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1528);
            reg = x1528;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1529 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1529 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1530 = x1527 - x1529;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1531 = x1530 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1532 = Fp(x1531.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1532);
            reg = x1532;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1533 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1533 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1534 = x1531 - x1533;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1535 = x1534 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x1536 = Fp(x1535.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1536);
            reg = x1536;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1537 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1537 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1538 = x1535 - x1537;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1539 = x1538 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1539);
          reg = x1539;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1540 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1540 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1541 = x96 - x1540;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1542 = x1540 * x1541;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1542);
          reg = x1542;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1543 = x93 - x1540;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1544 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1544 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1545 = x1544 * x1543;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x1545 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1546 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1546 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1546);
          reg = x1546;
        }
        if (x1452 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x1448, x1380, x1384, x1392, x1396});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:0)
          auto x1547 = x1448 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1380);
            reg = x1380;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1384);
            reg = x1384;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1396);
            reg = x1396;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x1547, x1380, x1384, x1392, x1396, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1548 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1548 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1549 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1549 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1550 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1550 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1551 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1551 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1547);
            reg = x1547;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1548);
            reg = x1548;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1549);
            reg = x1549;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1550);
            reg = x1550;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1551);
            reg = x1551;
          }
        }
        if (x1451 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0))
      auto x1552 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1552 != Fp::invalid());
      if (x1552 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0)
        auto x1553 = x1203 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0)
        if (x1553 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:41");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0)
        auto x1554 = x1195 - x71;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0)
        if (x1554 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:41");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0)
        if (x1171 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:41");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":38:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":39:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":40:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x1555 = x1456 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1556 = Fp(x1555.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1556);
            reg = x1556;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1557 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1557 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1558 = x1555 - x1557;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1559 = x1558 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1560 = Fp(x1559.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1560);
            reg = x1560;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1561 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1561 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1562 = x1559 - x1561;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1563 = x1562 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1564 = Fp(x1563.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1564);
            reg = x1564;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1565 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1565 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1566 = x1563 - x1565;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1567 = x1566 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x1568 = Fp(x1567.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1568);
            reg = x1568;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1569 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1569 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1570 = x1567 - x1569;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1571 = x1570 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1571);
          reg = x1571;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1572 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1572 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1573 = x96 - x1572;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1574 = x1572 * x1573;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1574);
          reg = x1574;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1575 = x93 - x1572;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1576 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1576 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1577 = x1576 * x1575;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x1577 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1578 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1578 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1578);
          reg = x1578;
        }
        if (x1452 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x1448, x1380, x1384, x1392, x1396});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:0)
          auto x1579 = x1448 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1380);
            reg = x1380;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1384);
            reg = x1384;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1396);
            reg = x1396;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x1579, x1380, x1384, x1392, x1396, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1580 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1580 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1581 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1581 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1582 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1582 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1583 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1583 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1579);
            reg = x1579;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1580);
            reg = x1580;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1581);
            reg = x1581;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1582);
            reg = x1582;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1583);
            reg = x1583;
          }
        }
        if (x1451 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0))
      auto x1584 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1584 != Fp::invalid());
      if (x1584 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0)
        auto x1585 = x1203 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0)
        if (x1585 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:42");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0)
        auto x1586 = x1195 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0)
        if (x1586 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:42");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0)
        if (x1171 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:42");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":33:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":34:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":35:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x1587 = x1456 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1588 = Fp(x1587.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1588);
            reg = x1588;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1589 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1589 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1590 = x1587 - x1589;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1591 = x1590 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1592 = Fp(x1591.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1592);
            reg = x1592;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1593 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1593 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1594 = x1591 - x1593;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1595 = x1594 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1596 = Fp(x1595.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1596);
            reg = x1596;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1597 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1597 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1598 = x1595 - x1597;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1599 = x1598 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x1600 = Fp(x1599.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1600);
            reg = x1600;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1601 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1601 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1602 = x1599 - x1601;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1603 = x1602 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1603);
          reg = x1603;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1604 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1604 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1605 = x96 - x1604;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1606 = x1604 * x1605;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1606);
          reg = x1606;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1607 = x93 - x1604;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1608 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1608 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1609 = x1608 * x1607;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x1609 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1610 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1610 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1610);
          reg = x1610;
        }
        if (x1452 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x1448, x1380, x1384, x1392, x1396});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:0)
          auto x1611 = x1448 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1380);
            reg = x1380;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1384);
            reg = x1384;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1396);
            reg = x1396;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x1611, x1380, x1384, x1392, x1396, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1612 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1612 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1613 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1613 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1614 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1614 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1615 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1615 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1611);
            reg = x1611;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1612);
            reg = x1612;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1613);
            reg = x1613;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1614);
            reg = x1614;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1615);
            reg = x1615;
          }
        }
        if (x1451 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0))
      auto x1616 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1616 != Fp::invalid());
      if (x1616 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0)
        auto x1617 = x1203 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0)
        if (x1617 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:43");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0)
        auto x1618 = x1195 - x93;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0)
        if (x1618 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:43");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0)
        if (x1171 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:43");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x1619 = x1456 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1620 = Fp(x1619.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1620);
            reg = x1620;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1621 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1621 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1622 = x1619 - x1621;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1623 = x1622 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1624 = Fp(x1623.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1624);
            reg = x1624;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1625 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1625 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1626 = x1623 - x1625;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1627 = x1626 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1628 = Fp(x1627.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1628);
            reg = x1628;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1629 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1629 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1630 = x1627 - x1629;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1631 = x1630 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x1632 = Fp(x1631.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1632);
            reg = x1632;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1633 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1633 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1634 = x1631 - x1633;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1635 = x1634 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1635);
          reg = x1635;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1636 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1636 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1637 = x96 - x1636;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1638 = x1636 * x1637;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1638);
          reg = x1638;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1639 = x93 - x1636;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1640 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1640 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1641 = x1640 * x1639;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x1641 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1642 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1642 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1642);
          reg = x1642;
        }
        if (x1452 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x1448, x1444, x95, x95, x95});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:0)
          auto x1643 = x1448 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1444);
            reg = x1444;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x1643, x1444, x95, x95, x95, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1644 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1644 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1645 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1645 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1646 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1646 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1647 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1647 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1643);
            reg = x1643;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1644);
            reg = x1644;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1645);
            reg = x1645;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1646);
            reg = x1646;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1647);
            reg = x1647;
          }
        }
        if (x1451 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0))
      auto x1648 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1648 != Fp::invalid());
      if (x1648 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0)
        auto x1649 = x1203 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0)
        if (x1649 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:44");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0)
        auto x1650 = x1195 - x76;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0)
        if (x1650 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:44");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0)
        if (x1171 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:44");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x1651 = x1456 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1652 = Fp(x1651.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1652);
            reg = x1652;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1653 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1653 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1654 = x1651 - x1653;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1655 = x1654 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1656 = Fp(x1655.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1656);
            reg = x1656;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1657 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1657 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1658 = x1655 - x1657;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1659 = x1658 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1660 = Fp(x1659.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1660);
            reg = x1660;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1661 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1661 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1662 = x1659 - x1661;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1663 = x1662 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x1664 = Fp(x1663.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1664);
            reg = x1664;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1665 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1665 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1666 = x1663 - x1665;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1667 = x1666 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1667);
          reg = x1667;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1668 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1668 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1669 = x96 - x1668;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1670 = x1668 * x1669;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1670);
          reg = x1670;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1671 = x93 - x1668;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1672 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1672 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1673 = x1672 * x1671;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x1673 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1674 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1674 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1674);
          reg = x1674;
        }
        if (x1452 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x1448, x1443, x95, x95, x95});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:0)
          auto x1675 = x1448 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1443);
            reg = x1443;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x1675, x1443, x95, x95, x95, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1676 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1676 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1677 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1677 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1678 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1678 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1679 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1679 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1675);
            reg = x1675;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1676);
            reg = x1676;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1677);
            reg = x1677;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1678);
            reg = x1678;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1679);
            reg = x1679;
          }
        }
        if (x1451 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:0))
      auto x1680 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1680 != Fp::invalid());
      if (x1680 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:0)
        auto x1681 = x1203 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:0)
        if (x1681 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:45");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:0)
        if (x1195 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:45");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x1682 = x1159 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x1683 = x1160 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x1684 = x1683 + x1682;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x1685 = x1684 + x1277;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x1686 = x1164 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x1687 = x1169 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x1688 = x1687 + x1686;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x1689 = x1688 + x1162;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x1690 = x1169 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1685);
          reg = x1685;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1689);
          reg = x1689;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1690);
          reg = x1690;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1690);
          reg = x1690;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x1691 = x1456 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1692 = Fp(x1691.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1692);
            reg = x1692;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1693 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1693 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1694 = x1691 - x1693;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1695 = x1694 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1696 = Fp(x1695.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1696);
            reg = x1696;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1697 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1697 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1698 = x1695 - x1697;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1699 = x1698 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x1700 = Fp(x1699.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1700);
            reg = x1700;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x1701 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1701 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1702 = x1699 - x1701;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x1703 = x1702 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x1704 = Fp(x1703.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1704);
            reg = x1704;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1705 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1705 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1706 = x1703 - x1705;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x1707 = x1706 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1707);
          reg = x1707;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1708 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1708 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1709 = x96 - x1708;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x1710 = x1708 * x1709;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1710);
          reg = x1710;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1711 = x93 - x1708;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1712 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1712 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x1713 = x1712 * x1711;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x1713 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x1714 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1714 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1714);
          reg = x1714;
        }
        if (x1452 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x1448, x1380, x1384, x1392, x1396});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:0)
          auto x1715 = x1448 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1380);
            reg = x1380;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1384);
            reg = x1384;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1396);
            reg = x1396;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x1715, x1380, x1384, x1392, x1396, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1716 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1716 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1717 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1717 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1718 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1718 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x1719 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1719 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1715);
            reg = x1715;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1716);
            reg = x1716;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1717);
            reg = x1717;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1718);
            reg = x1718;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1719);
            reg = x1719;
          }
        }
        if (x1451 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./zirgen/components/mux.h":49:0))
    auto x1720 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x1720 != Fp::invalid());
    if (x1720 != 0) {
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":112:0)
      auto x1721 = x959 * x75;
      {
        auto [x1722, x1723, x1724, x1725] = extern_ramRead(ctx, cycle, "", {x1721, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1722);
          reg = x1722;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1723);
          reg = x1723;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1724);
          reg = x1724;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1725);
          reg = x1725;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1726 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1726 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1727 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1727 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1728 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1728 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1729 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x1729 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1721);
        reg = x1721;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1726);
        reg = x1726;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1727);
        reg = x1727;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1728);
        reg = x1728;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1729);
        reg = x1729;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x1730 = Fp(x1729.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x1731 = x1730 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1731);
          reg = x1731;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x1732 = Fp(x1729.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x1733 = x1732 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1733);
          reg = x1733;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x1734 = Fp(x1729.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x1735 = x1734 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1735);
          reg = x1735;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x1736 = Fp(x1729.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x1737 = x1736 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1737);
          reg = x1737;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x1738 = Fp(x1729.asUInt32() & x71.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x1739 = x1738 * x54;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1739);
          reg = x1739;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:0)
        auto x1740 = Fp(x1729.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1740);
          reg = x1740;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x1741 = Fp(x1728.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x1742 = x1741 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1742);
          reg = x1742;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x1743 = Fp(x1728.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x1744 = x1743 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1744);
          reg = x1744;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x1745 = Fp(x1728.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x1746 = x1745 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1746);
          reg = x1746;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x1747 = Fp(x1728.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x1748 = x1747 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1748);
          reg = x1748;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:0)
        auto x1749 = Fp(x1728.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1749);
          reg = x1749;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x1750 = Fp(x1727.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x1751 = x1750 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1751);
          reg = x1751;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x1752 = Fp(x1727.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x1753 = x1752 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1753);
          reg = x1753;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x1754 = Fp(x1727.asUInt32() & x51.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x1755 = x1754 * x56;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1755);
          reg = x1755;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x1756 = Fp(x1727.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x1757 = x1756 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1757);
          reg = x1757;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:0)
        auto x1758 = Fp(x1727.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1758);
          reg = x1758;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x1759 = Fp(x1726.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x1760 = x1759 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1760);
          reg = x1760;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        auto x1761 = Fp(x1726.asUInt32() & x50.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1761);
          reg = x1761;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1762 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1762 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1763 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1763 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1764 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1764 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1765 = x1764 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1766 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1766 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1767 = x1766 * x69;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1768 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1768 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1769 = x1768 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1770 = x1769 + x1767;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1771 = x1770 + x1765;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x1772 = x1771 + x1763;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1773 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1773 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x1774 = x1773 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x1775 = x1774 + x1772;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x1776 = x1775 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x1777 = x1776 + x1762;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x1778 = x1729 - x1777;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      if (x1778 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1779 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1779 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1780 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1780 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1781 = x1780 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1782 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1782 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1783 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1783 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1784 = x1783 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1785 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1785 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1786 = x1785 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1787 = x1786 + x1784;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1788 = x1787 + x1782;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1789 = x1788 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1790 = x1789 + x1781;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1791 = x1790 + x1779;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x1792 = x1728 - x1791;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      if (x1792 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1793 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1793 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1794 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1794 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1795 = x1794 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1796 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1796 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1797 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1797 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x1798 = x1797 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x1799 = x1798 + x1796;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1800 = x1799 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1801 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1801 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1802 = x1801 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1803 = x1802 + x1800;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1804 = x1803 + x1795;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1805 = x1804 + x1793;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x1806 = x1727 - x1805;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      if (x1806 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x1807 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1807 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1808 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1808 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x1809 = x1808 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x1810 = x1809 + x1807;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x1811 = x1726 - x1810;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      if (x1811 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        auto x1812 = extern_getMinor(ctx, cycle, "", {x1726, x1727, x1728, x1729});
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1813 = (x1812 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1813);
            reg = x1813;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1814 = x1812 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1815 = (x1814 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1815);
            reg = x1815;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1816 = x1812 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1817 = (x1816 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1817);
            reg = x1817;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1818 = x1812 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1819 = (x1818 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1819);
            reg = x1819;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1820 = x1812 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1821 = (x1820 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1821);
            reg = x1821;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1822 = x1812 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1823 = (x1822 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1823);
            reg = x1823;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1824 = x1812 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1825 = (x1824 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1825);
            reg = x1825;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1826 = x1812 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x1827 = (x1826 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1827);
            reg = x1827;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1828 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1828 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1829 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1829 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1830 = x1829 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1831 = x1828 + x1830;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1832 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1832 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1833 = x1832 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1834 = x1831 + x1833;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1835 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1835 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1836 = x1835 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1837 = x1834 + x1836;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1838 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1838 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1839 = x1838 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1840 = x1837 + x1839;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1841 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1841 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1842 = x1841 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1843 = x1840 + x1842;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x1844 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1844 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1845 = x1844 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x1846 = x1843 + x1845;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x1847 = x1846 - x1812;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x1847 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:0))
        auto x1848 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1848 != Fp::invalid());
        if (x1848 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1849 = x1762 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1850 = x1849 + x1788;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1851 = x1763 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1852 = x1764 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1853 = x1852 + x1851;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1854 = x1853 + x1850;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1855 = x1768 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1856 = x1773 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1857 = x1856 + x1855;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1858 = x1857 + x1766;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x1859 = x1773 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1858);
            reg = x1858;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1859);
            reg = x1859;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1859);
            reg = x1859;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":43:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":44:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":45:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:0))
        auto x1860 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1860 != Fp::invalid());
        if (x1860 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1861 = x1762 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1862 = x1861 + x1788;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1863 = x1763 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1864 = x1764 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1865 = x1864 + x1863;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1866 = x1865 + x1862;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1867 = x1768 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1868 = x1773 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1869 = x1868 + x1867;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1870 = x1869 + x1766;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x1871 = x1773 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1870);
            reg = x1870;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1871);
            reg = x1871;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1871);
            reg = x1871;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":38:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":39:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":40:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:0))
        auto x1872 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1872 != Fp::invalid());
        if (x1872 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1873 = x1762 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1874 = x1873 + x1788;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1875 = x1763 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1876 = x1764 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1877 = x1876 + x1875;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1878 = x1877 + x1874;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1879 = x1768 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1880 = x1773 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1881 = x1880 + x1879;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1882 = x1881 + x1766;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x1883 = x1773 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1878);
            reg = x1878;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1882);
            reg = x1882;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1883);
            reg = x1883;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1883);
            reg = x1883;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":33:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":34:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":35:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:0))
        auto x1884 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1884 != Fp::invalid());
        if (x1884 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1885 = x1762 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1886 = x1885 + x1788;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1887 = x1763 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1888 = x1764 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1889 = x1888 + x1887;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1890 = x1889 + x1886;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1891 = x1768 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1892 = x1773 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1893 = x1892 + x1891;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1894 = x1893 + x1766;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x1895 = x1773 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1890);
            reg = x1890;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1894);
            reg = x1894;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1895);
            reg = x1895;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1895);
            reg = x1895;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:0))
        auto x1896 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1896 != Fp::invalid());
        if (x1896 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1897 = x1762 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x1898 = x1897 + x1788;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1899 = x1763 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1900 = x1764 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1901 = x1900 + x1899;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x1902 = x1901 + x1898;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1903 = x1768 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1904 = x1773 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1905 = x1904 + x1903;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x1906 = x1905 + x1766;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x1907 = x1773 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1902);
            reg = x1902;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1906);
            reg = x1906;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1907);
            reg = x1907;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1907);
            reg = x1907;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:0))
        auto x1908 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1908 != Fp::invalid());
        if (x1908 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1909 = x1793 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1910 = x1794 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1911 = x1763 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1912 = x1764 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1913 = x1912 + x1911;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1914 = x1913 + x1910;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1915 = x1914 + x1909;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1916 = x1768 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1917 = x1808 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1918 = x1773 * x43;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1919 = x1918 + x1917;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1920 = x1919 + x1916;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1921 = x1920 + x1766;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
          auto x1922 = x1773 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1915);
            reg = x1915;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1921);
            reg = x1921;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1922);
            reg = x1922;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1922);
            reg = x1922;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0))
        auto x1923 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1923 != Fp::invalid());
        if (x1923 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1924 = x1793 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1925 = x1794 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1926 = x1763 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1927 = x1764 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1928 = x1927 + x1926;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1929 = x1928 + x1925;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1930 = x1929 + x1924;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1931 = x1768 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1932 = x1808 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1933 = x1773 * x43;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1934 = x1933 + x1932;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1935 = x1934 + x1931;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1936 = x1935 + x1766;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
          auto x1937 = x1773 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1930);
            reg = x1930;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1936);
            reg = x1936;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1937);
            reg = x1937;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1937);
            reg = x1937;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0))
        auto x1938 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1938 != Fp::invalid());
        if (x1938 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1939 = x1793 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1940 = x1794 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1941 = x1763 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1942 = x1764 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1943 = x1942 + x1941;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1944 = x1943 + x1940;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x1945 = x1944 + x1939;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1946 = x1768 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1947 = x1808 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1948 = x1773 * x43;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1949 = x1948 + x1947;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1950 = x1949 + x1946;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x1951 = x1950 + x1766;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
          auto x1952 = x1773 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1945);
            reg = x1945;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1951);
            reg = x1951;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1952);
            reg = x1952;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1952);
            reg = x1952;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x1953 = x1779 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x1954 = x1780 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x1955 = x1954 + x1953;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x1956 = x1955 + x1801;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":134:0)
      auto x1957 = x1956 + x48;
      {
        auto [x1958, x1959, x1960, x1961] = extern_ramRead(ctx, cycle, "", {x1957, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1958);
          reg = x1958;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1959);
          reg = x1959;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1960);
          reg = x1960;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1961);
          reg = x1961;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1962 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1962 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1963 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1963 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1964 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1964 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1965 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x1965 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1957);
        reg = x1957;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1962);
        reg = x1962;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1963);
        reg = x1963;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1964);
        reg = x1964;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1965);
        reg = x1965;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x1966 = x1762 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x1967 = x1966 + x1788;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":135:0)
      auto x1968 = x1967 + x48;
      {
        auto [x1969, x1970, x1971, x1972] = extern_ramRead(ctx, cycle, "", {x1968, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1969);
          reg = x1969;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1970);
          reg = x1970;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1971);
          reg = x1971;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1972);
          reg = x1972;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1973 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x1973 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1974 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x1974 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1975 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x1975 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1976 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x1976 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1968);
        reg = x1968;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1973);
        reg = x1973;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1974);
        reg = x1974;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1975);
        reg = x1975;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1976);
        reg = x1976;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1977 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x1977 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":35:0)
      auto x1978 = x946 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":35:0)
      auto x1979 = x948 + x1978;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x1980 = x954 - x77;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1981 = x1977 * x1980;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1982 = x1977 * x952;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1983 = x1977 * x950;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1984 = x1977 * x1979;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":139:0)
      auto x1985 = x96 - x1977;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1986 = x1985 * x1962;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1987 = x1985 * x1963;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1988 = x1985 * x1964;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1989 = x1985 * x1965;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1990 = x1986 + x1981;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1991 = x1987 + x1982;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1992 = x1988 + x1983;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x1993 = x1989 + x1984;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1994 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1994 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1995 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1995 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1996 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1996 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1997 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1997 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x1998 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x1998 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x1999 = x1994 * x1995;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2000 = x1994 * x1996;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2001 = x1994 * x1997;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2002 = x1994 * x1998;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":141:0)
      auto x2003 = x96 - x1994;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2004 = x2003 * x1973;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2005 = x2003 * x1974;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2006 = x2003 * x1975;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2007 = x2003 * x1976;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2008 = x2004 + x1999;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2009 = x2005 + x2000;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2010 = x2006 + x2001;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2011 = x2007 + x2002;
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2012 = Fp(x1993.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2013 = x2012 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2013);
          reg = x2013;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2014 = Fp(x1993.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2015 = x2014 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2015);
          reg = x2015;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x2016 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x2016 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2017 = x2016 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2018 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2018 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2019 = x2018 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2020 = x2019 + x2017;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2021 = x1993 - x2020;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x2021 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2022 = Fp(x2011.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2023 = x2022 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2023);
          reg = x2023;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2024 = Fp(x2011.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2025 = x2024 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2025);
          reg = x2025;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x2026 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x2026 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2027 = x2026 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2028 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2028 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2029 = x2028 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2030 = x2029 + x2027;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2031 = x2011 - x2030;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x2031 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2008);
        reg = x2008;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2009);
        reg = x2009;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2010);
        reg = x2010;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2011);
        reg = x2011;
      }
      {
        // loc("zirgen/components/u32.cpp":119:0)
        auto x2032 = Fp(x1990.asUInt32() & x2008.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x2033 = Fp(x1991.asUInt32() & x2009.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x2034 = Fp(x1992.asUInt32() & x2010.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x2035 = Fp(x1993.asUInt32() & x2011.asUInt32());
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2032);
          reg = x2032;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2033);
          reg = x2033;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2034);
          reg = x2034;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2035);
          reg = x2035;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2036 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x2036 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2037 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2037 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2038 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x2038 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2039 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x2039 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2040 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2040 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2041 = x2040 * x2036;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2042 = x2040 * x2037;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2043 = x2040 * x2038;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2044 = x2040 * x2039;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2045 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2045 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2046 = x2045 * x2008;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2047 = x2045 * x2009;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2048 = x2045 * x2010;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2049 = x2045 * x2011;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2050 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2050 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2051 = x2050 * x1990;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2052 = x2050 * x1991;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2053 = x2050 * x1992;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2054 = x2050 * x1993;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2055 = x2051 + x91;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2056 = x2052 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2057 = x2053 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2058 = x2054 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2059 = x2055 + x2046;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2060 = x2056 + x2047;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2061 = x2057 + x2048;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2062 = x2058 + x2049;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2063 = x2059 + x2041;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2064 = x2060 + x2042;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2065 = x2061 + x2043;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2066 = x2062 + x2044;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x2067 = x2064 * x91;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x2068 = x2063 + x2067;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x2069 = Fp(x2068.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2069);
          reg = x2069;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x2070 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x2070 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2071 = x2068 - x2070;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2072 = x2071 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x2073 = Fp(x2072.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2073);
          reg = x2073;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x2074 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x2074 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2075 = x2072 - x2074;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2076 = x2075 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2076);
        reg = x2076;
      }
      // loc("zirgen/components/u32.cpp":154:0)
      auto x2077 = x2066 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2078 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2078 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:0)
      auto x2079 = x2078 + x2065;
      // loc("zirgen/components/u32.cpp":154:0)
      auto x2080 = x2079 + x2077;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x2081 = Fp(x2080.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2081);
          reg = x2081;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x2082 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x2082 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2083 = x2080 - x2082;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2084 = x2083 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x2085 = Fp(x2084.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2085);
          reg = x2085;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x2086 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x2086 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2087 = x2084 - x2086;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2088 = x2087 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2088);
        reg = x2088;
      }
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2089 = Fp(x2086.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2090 = x2089 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2090);
          reg = x2090;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2091 = Fp(x2086.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2092 = x2091 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2092);
          reg = x2092;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x2093 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x2093 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2094 = x2093 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2095 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x2095 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2096 = x2095 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2097 = x2096 + x2094;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2098 = x2086 - x2097;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x2098 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2099 = x96 - x2018;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2100 = x2099 * x2028;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2101 = x2100 * x2095;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2102 = x96 - x2095;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2103 = x96 - x2028;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2104 = x2018 * x2103;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2105 = x2104 * x2102;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2106 = x2105 + x2101;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2106);
        reg = x2106;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x2107 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x2107 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x2108 = x2107 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x2109 = x2108 * x2095;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x2110 = x2107 + x2095;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x2111 = x2110 - x2109;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2111);
        reg = x2111;
      }
      // loc("zirgen/components/u32.cpp":143:0)
      auto x2112 = x2074 * x91;
      // loc("zirgen/components/u32.cpp":143:0)
      auto x2113 = x2070 + x2112;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x2114 = (x2113 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2114);
          reg = x2114;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x2115 = inv(x2113);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2115);
          reg = x2115;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2116 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x2116 != Fp::invalid());
      if (x2116 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x2113 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x2117 = x96 - x2116;
      if (x2117 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2118 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x2118 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2119 = x2113 * x2118;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2120 = x2119 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x2120 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":144:0)
      auto x2121 = x2117 * x78;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x2122 = x2086 * x91;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x2123 = x2082 + x2122;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x2124 = x2123 + x2121;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x2125 = (x2124 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2125);
          reg = x2125;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x2126 = inv(x2124);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2126);
          reg = x2126;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2127 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x2127 != Fp::invalid());
      if (x2127 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x2124 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x2128 = x96 - x2127;
      if (x2128 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2129 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x2129 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2130 = x2124 * x2129;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2131 = x2130 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x2131 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2132 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2132 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":97:0)
      auto x2133 = x96 - x2132;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2134 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x2134 != Fp::invalid());
      extern_log(ctx, cycle, "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", {x1995, x1996, x1997, x1998, x1956, x1962, x1963, x1964, x1965, x1967, x1973, x1974, x1975, x1976, x1990, x1991, x1992, x1993, x2008, x2009, x2010, x2011, x2070, x2074, x2082, x2086, x2127, x2134, x2133});
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x2135 = x1793 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x2136 = x1794 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x2137 = x2136 + x2135;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x2138 = x2137 + x1808;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x2139 = (x2138 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2139);
          reg = x2139;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x2140 = inv(x2138);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2140);
          reg = x2140;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2141 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x2141 != Fp::invalid());
      if (x2141 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x2138 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x2142 = x96 - x2141;
      if (x2142 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2143 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x2143 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2144 = x2138 * x2143;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2145 = x2144 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x2145 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":161:0)
      auto x2146 = x959 + x77;
      // loc("zirgen/components/u32.cpp":68:0)
      auto x2147 = x1997 * x78;
      // loc("zirgen/components/u32.cpp":68:0)
      auto x2148 = x1996 * x91;
      // loc("zirgen/components/u32.cpp":68:0)
      auto x2149 = x1995 + x2148;
      // loc("zirgen/components/u32.cpp":68:0)
      auto x2150 = x2149 + x2147;
      // loc("zirgen/components/u32.cpp":71:0)
      auto x2151 = x1998 * x46;
      // loc("zirgen/components/u32.cpp":71:0)
      auto x2152 = x2151 * x47;
      // loc("zirgen/components/u32.cpp":71:0)
      auto x2153 = x2150 + x2152;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":162:0)
      auto x2154 = x959 + x2153;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":169:0)
      auto x2155 = x2128 * x2146;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":169:0)
      auto x2156 = x2127 * x2154;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":169:0)
      auto x2157 = x2156 + x2155;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":170:0)
      auto x2158 = x2128 * x2154;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":170:0)
      auto x2159 = x2127 * x2146;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":170:0)
      auto x2160 = x2159 + x2158;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":171:0)
      auto x2161 = x96 - x2134;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":171:0)
      auto x2162 = x2161 * x2146;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":171:0)
      auto x2163 = x2134 * x2154;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":171:0)
      auto x2164 = x2163 + x2162;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:0))
      auto x2165 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2165 != Fp::invalid());
      if (x2165 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:0)
        auto x2166 = x1807 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:0)
        if (x2166 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:46");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:0)
        auto x2167 = x1799 - x77;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:0)
        if (x2167 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:46");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2168 = x1763 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2169 = x1764 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2170 = x2169 + x2168;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2171 = x2170 + x1967;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2172 = x1768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2173 = x1773 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2174 = x2173 + x2172;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2175 = x2174 + x1766;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x2176 = x1773 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2171);
          reg = x2171;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2175);
          reg = x2175;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2176);
          reg = x2176;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2176);
          reg = x2176;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":43:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":44:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":45:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2177 = x2146 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2178 = Fp(x2177.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2178);
            reg = x2178;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2179 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2179 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2180 = x2177 - x2179;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2181 = x2180 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2182 = Fp(x2181.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2182);
            reg = x2182;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2183 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2183 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2184 = x2181 - x2183;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2185 = x2184 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2186 = Fp(x2185.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2186);
            reg = x2186;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2187 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2187 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2188 = x2185 - x2187;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2189 = x2188 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2190 = Fp(x2189.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2190);
            reg = x2190;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2191 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2191 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2192 = x2189 - x2191;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2193 = x2192 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2193);
          reg = x2193;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2194 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2194 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2195 = x96 - x2194;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2196 = x2194 * x2195;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2196);
          reg = x2196;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2197 = x93 - x2194;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2198 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2198 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2199 = x2198 * x2197;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2199 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2200 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2200 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2200);
          reg = x2200;
        }
        if (x2142 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2138, x2070, x2074, x2082, x2086});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:0)
          auto x2201 = x2138 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2070);
            reg = x2070;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2074);
            reg = x2074;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2086);
            reg = x2086;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2201, x2070, x2074, x2082, x2086, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2202 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2202 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2203 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2203 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2204 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2204 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2205 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2205 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2201);
            reg = x2201;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2202);
            reg = x2202;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2203);
            reg = x2203;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2204);
            reg = x2204;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2205);
            reg = x2205;
          }
        }
        if (x2141 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:0))
      auto x2206 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2206 != Fp::invalid());
      if (x2206 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:0)
        auto x2207 = x1807 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:0)
        if (x2207 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:47");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:0)
        auto x2208 = x1799 - x71;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:0)
        if (x2208 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:47");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2209 = x1763 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2210 = x1764 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2211 = x2210 + x2209;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2212 = x2211 + x1967;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2213 = x1768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2214 = x1773 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2215 = x2214 + x2213;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2216 = x2215 + x1766;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x2217 = x1773 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2212);
          reg = x2212;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2216);
          reg = x2216;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2217);
          reg = x2217;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2217);
          reg = x2217;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":38:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":39:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":40:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2218 = x2146 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2219 = Fp(x2218.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2219);
            reg = x2219;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2220 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2220 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2221 = x2218 - x2220;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2222 = x2221 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2223 = Fp(x2222.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2223);
            reg = x2223;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2224 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2224 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2225 = x2222 - x2224;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2226 = x2225 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2227 = Fp(x2226.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2227);
            reg = x2227;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2228 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2228 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2229 = x2226 - x2228;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2230 = x2229 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2231 = Fp(x2230.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2231);
            reg = x2231;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2232 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2232 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2233 = x2230 - x2232;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2234 = x2233 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2234);
          reg = x2234;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2235 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2235 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2236 = x96 - x2235;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2237 = x2235 * x2236;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2237);
          reg = x2237;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2238 = x93 - x2235;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2239 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2239 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2240 = x2239 * x2238;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2240 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2241 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2241 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2241);
          reg = x2241;
        }
        if (x2142 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2138, x2070, x2074, x2082, x2086});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:0)
          auto x2242 = x2138 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2070);
            reg = x2070;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2074);
            reg = x2074;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2086);
            reg = x2086;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2242, x2070, x2074, x2082, x2086, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2243 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2243 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2244 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2244 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2245 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2245 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2246 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2246 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2242);
            reg = x2242;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2243);
            reg = x2243;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2244);
            reg = x2244;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2245);
            reg = x2245;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2246);
            reg = x2246;
          }
        }
        if (x2141 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:0))
      auto x2247 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2247 != Fp::invalid());
      if (x2247 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:0)
        auto x2248 = x1807 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:0)
        if (x2248 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:48");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:0)
        auto x2249 = x1799 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:0)
        if (x2249 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:48");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2250 = x1763 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2251 = x1764 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2252 = x2251 + x2250;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2253 = x2252 + x1967;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2254 = x1768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2255 = x1773 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2256 = x2255 + x2254;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2257 = x2256 + x1766;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x2258 = x1773 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2253);
          reg = x2253;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2257);
          reg = x2257;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2258);
          reg = x2258;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2258);
          reg = x2258;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":33:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":34:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":35:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2259 = x2146 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2260 = Fp(x2259.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2260);
            reg = x2260;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2261 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2261 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2262 = x2259 - x2261;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2263 = x2262 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2264 = Fp(x2263.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2264);
            reg = x2264;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2265 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2265 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2266 = x2263 - x2265;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2267 = x2266 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2268 = Fp(x2267.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2268);
            reg = x2268;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2269 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2269 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2270 = x2267 - x2269;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2271 = x2270 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2272 = Fp(x2271.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2272);
            reg = x2272;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2273 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2273 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2274 = x2271 - x2273;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2275 = x2274 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2275);
          reg = x2275;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2276 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2276 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2277 = x96 - x2276;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2278 = x2276 * x2277;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2278);
          reg = x2278;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2279 = x93 - x2276;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2280 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2280 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2281 = x2280 * x2279;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2281 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2282 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2282 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2282);
          reg = x2282;
        }
        if (x2142 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2138, x2070, x2074, x2082, x2086});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:0)
          auto x2283 = x2138 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2070);
            reg = x2070;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2074);
            reg = x2074;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2086);
            reg = x2086;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2283, x2070, x2074, x2082, x2086, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2284 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2284 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2285 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2285 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2286 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2286 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2287 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2287 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2283);
            reg = x2283;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2284);
            reg = x2284;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2285);
            reg = x2285;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2286);
            reg = x2286;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2287);
            reg = x2287;
          }
        }
        if (x2141 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:0))
      auto x2288 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2288 != Fp::invalid());
      if (x2288 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:0)
        auto x2289 = x1807 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:0)
        if (x2289 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:49");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:0)
        auto x2290 = x1799 - x93;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:0)
        if (x2290 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:49");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2291 = x1763 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2292 = x1764 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2293 = x2292 + x2291;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2294 = x2293 + x1967;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2295 = x1768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2296 = x1773 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2297 = x2296 + x2295;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2298 = x2297 + x1766;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x2299 = x1773 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2294);
          reg = x2294;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2298);
          reg = x2298;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2299);
          reg = x2299;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2299);
          reg = x2299;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2300 = x2146 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2301 = Fp(x2300.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2301);
            reg = x2301;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2302 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2302 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2303 = x2300 - x2302;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2304 = x2303 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2305 = Fp(x2304.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2305);
            reg = x2305;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2306 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2306 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2307 = x2304 - x2306;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2308 = x2307 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2309 = Fp(x2308.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2309);
            reg = x2309;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2310 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2310 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2311 = x2308 - x2310;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2312 = x2311 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2313 = Fp(x2312.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2313);
            reg = x2313;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2314 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2314 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2315 = x2312 - x2314;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2316 = x2315 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2316);
          reg = x2316;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2317 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2317 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2318 = x96 - x2317;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2319 = x2317 * x2318;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2319);
          reg = x2319;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2320 = x93 - x2317;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2321 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2321 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2322 = x2321 * x2320;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2322 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2323 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2323 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2323);
          reg = x2323;
        }
        if (x2142 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2138, x2134, x95, x95, x95});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:0)
          auto x2324 = x2138 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2134);
            reg = x2134;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2324, x2134, x95, x95, x95, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2325 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2325 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2326 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2326 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2327 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2327 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2328 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2328 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2324);
            reg = x2324;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2325);
            reg = x2325;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2326);
            reg = x2326;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2327);
            reg = x2327;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2328);
            reg = x2328;
          }
        }
        if (x2141 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:0))
      auto x2329 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2329 != Fp::invalid());
      if (x2329 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:0)
        auto x2330 = x1807 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:0)
        if (x2330 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:50");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:0)
        auto x2331 = x1799 - x76;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:0)
        if (x2331 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:50");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2332 = x1763 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2333 = x1764 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2334 = x2333 + x2332;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x2335 = x2334 + x1967;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2336 = x1768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2337 = x1773 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2338 = x2337 + x2336;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x2339 = x2338 + x1766;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x2340 = x1773 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2335);
          reg = x2335;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2339);
          reg = x2339;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2340);
          reg = x2340;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2340);
          reg = x2340;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2341 = x2146 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2342 = Fp(x2341.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2342);
            reg = x2342;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2343 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2343 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2344 = x2341 - x2343;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2345 = x2344 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2346 = Fp(x2345.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2346);
            reg = x2346;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2347 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2347 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2348 = x2345 - x2347;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2349 = x2348 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2350 = Fp(x2349.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2350);
            reg = x2350;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2351 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2351 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2352 = x2349 - x2351;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2353 = x2352 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2354 = Fp(x2353.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2354);
            reg = x2354;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2355 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2355 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2356 = x2353 - x2355;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2357 = x2356 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2357);
          reg = x2357;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2358 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2358 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2359 = x96 - x2358;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2360 = x2358 * x2359;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2360);
          reg = x2360;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2361 = x93 - x2358;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2362 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2362 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2363 = x2362 * x2361;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2363 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2364 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2364 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2364);
          reg = x2364;
        }
        if (x2142 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2138, x2133, x95, x95, x95});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:0)
          auto x2365 = x2138 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2133);
            reg = x2133;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2365, x2133, x95, x95, x95, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2366 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2366 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2367 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2367 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2368 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2368 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2369 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2369 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2365);
            reg = x2365;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2366);
            reg = x2366;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2367);
            reg = x2367;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2368);
            reg = x2368;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2369);
            reg = x2369;
          }
        }
        if (x2141 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:0))
      auto x2370 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2370 != Fp::invalid());
      if (x2370 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:0)
        auto x2371 = x1807 - x42;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:0)
        if (x2371 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:51");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:0)
        if (x1799 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:51");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2372 = x1763 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2373 = x1764 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2374 = x2373 + x2372;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2375 = x2374 + x2136;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2376 = x2375 + x2135;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2377 = x1768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2378 = x1808 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2379 = x1773 * x43;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2380 = x2379 + x2378;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2381 = x2380 + x2377;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2382 = x2381 + x1766;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
        auto x2383 = x1773 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2376);
          reg = x2376;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2382);
          reg = x2382;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2383);
          reg = x2383;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2383);
          reg = x2383;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2384 = x2157 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2385 = Fp(x2384.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2385);
            reg = x2385;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2386 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2386 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2387 = x2384 - x2386;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2388 = x2387 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2389 = Fp(x2388.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2389);
            reg = x2389;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2390 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2390 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2391 = x2388 - x2390;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2392 = x2391 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2393 = Fp(x2392.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2393);
            reg = x2393;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2394 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2394 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2395 = x2392 - x2394;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2396 = x2395 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2397 = Fp(x2396.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2397);
            reg = x2397;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2398 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2398 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2399 = x2396 - x2398;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2400 = x2399 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2400);
          reg = x2400;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2401 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2401 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2402 = x96 - x2401;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2403 = x2401 * x2402;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2403);
          reg = x2403;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2404 = x93 - x2401;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2405 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2405 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2406 = x2405 * x2404;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2406 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2407 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2407 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2407);
          reg = x2407;
        }
        if (x95 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2138, x2070, x2074, x2082, x2086});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:0)
          auto x2408 = x2138 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2070);
            reg = x2070;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2074);
            reg = x2074;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2086);
            reg = x2086;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2408, x2070, x2074, x2082, x2086, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2409 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2409 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2410 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2410 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2411 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2411 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2412 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2412 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2408);
            reg = x2408;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2409);
            reg = x2409;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2410);
            reg = x2410;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2411);
            reg = x2411;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2412);
            reg = x2412;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:0)
        auto x2413 = x2141 + x96;
        if (x2413 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0))
      auto x2414 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2414 != Fp::invalid());
      if (x2414 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0)
        auto x2415 = x1807 - x42;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0)
        if (x2415 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:52");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0)
        auto x2416 = x1799 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0)
        if (x2416 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:52");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2417 = x1763 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2418 = x1764 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2419 = x2418 + x2417;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2420 = x2419 + x2136;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2421 = x2420 + x2135;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2422 = x1768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2423 = x1808 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2424 = x1773 * x43;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2425 = x2424 + x2423;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2426 = x2425 + x2422;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2427 = x2426 + x1766;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
        auto x2428 = x1773 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2421);
          reg = x2421;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2427);
          reg = x2427;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2428);
          reg = x2428;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2428);
          reg = x2428;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2429 = x2160 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2430 = Fp(x2429.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2430);
            reg = x2430;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2431 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2431 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2432 = x2429 - x2431;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2433 = x2432 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2434 = Fp(x2433.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2434);
            reg = x2434;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2435 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2435 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2436 = x2433 - x2435;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2437 = x2436 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2438 = Fp(x2437.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2438);
            reg = x2438;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2439 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2439 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2440 = x2437 - x2439;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2441 = x2440 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2442 = Fp(x2441.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2442);
            reg = x2442;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2443 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2443 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2444 = x2441 - x2443;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2445 = x2444 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2445);
          reg = x2445;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2446 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2446 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2447 = x96 - x2446;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2448 = x2446 * x2447;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2448);
          reg = x2448;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2449 = x93 - x2446;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2450 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2450 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2451 = x2450 * x2449;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2451 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2452 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2452 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2452);
          reg = x2452;
        }
        if (x95 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2138, x2070, x2074, x2082, x2086});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0)
          auto x2453 = x2138 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2070);
            reg = x2070;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2074);
            reg = x2074;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2086);
            reg = x2086;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2453, x2070, x2074, x2082, x2086, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2454 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2454 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2455 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2455 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2456 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2456 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2457 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2457 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2454);
            reg = x2454;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2455);
            reg = x2455;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2456);
            reg = x2456;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2457);
            reg = x2457;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:0)
        auto x2458 = x2141 + x96;
        if (x2458 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0))
      auto x2459 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x2459 != Fp::invalid());
      if (x2459 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0)
        auto x2460 = x1807 - x42;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0)
        if (x2460 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:53");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0)
        auto x2461 = x1799 - x77;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0)
        if (x2461 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:53");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2462 = x1763 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2463 = x1764 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2464 = x2463 + x2462;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2465 = x2464 + x2136;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2466 = x2465 + x2135;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2467 = x1768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2468 = x1808 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2469 = x1773 * x43;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2470 = x2469 + x2468;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2471 = x2470 + x2467;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2472 = x2471 + x1766;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
        auto x2473 = x1773 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2466);
          reg = x2466;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2472);
          reg = x2472;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2473);
          reg = x2473;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2473);
          reg = x2473;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2474 = x2164 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2475 = Fp(x2474.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2475);
            reg = x2475;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2476 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2476 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2477 = x2474 - x2476;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2478 = x2477 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2479 = Fp(x2478.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2479);
            reg = x2479;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2480 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2480 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2481 = x2478 - x2480;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2482 = x2481 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2483 = Fp(x2482.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2483);
            reg = x2483;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2484 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2484 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2485 = x2482 - x2484;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2486 = x2485 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2487 = Fp(x2486.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2487);
            reg = x2487;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2488 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2488 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2489 = x2486 - x2488;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2490 = x2489 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2490);
          reg = x2490;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2491 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2491 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2492 = x96 - x2491;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2493 = x2491 * x2492;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2493);
          reg = x2493;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2494 = x93 - x2491;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2495 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2495 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2496 = x2495 * x2494;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2496 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2497 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2497 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2497);
          reg = x2497;
        }
        if (x95 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2138, x2070, x2074, x2082, x2086});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0)
          auto x2498 = x2138 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2070);
            reg = x2070;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2074);
            reg = x2074;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2086);
            reg = x2086;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2498, x2070, x2074, x2082, x2086, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2499 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2499 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2500 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2500 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2501 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2501 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2502 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2502 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2498);
            reg = x2498;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2499);
            reg = x2499;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2500);
            reg = x2500;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2501);
            reg = x2501;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2502);
            reg = x2502;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:0)
        auto x2503 = x2141 + x96;
        if (x2503 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./zirgen/components/mux.h":49:0))
    auto x2504 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x2504 != Fp::invalid());
    if (x2504 != 0) {
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":112:0)
      auto x2505 = x959 * x75;
      {
        auto [x2506, x2507, x2508, x2509] = extern_ramRead(ctx, cycle, "", {x2505, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2506);
          reg = x2506;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2507);
          reg = x2507;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2508);
          reg = x2508;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2509);
          reg = x2509;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2510 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2510 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2511 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2511 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2512 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2512 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2513 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x2513 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2505);
        reg = x2505;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2510);
        reg = x2510;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2511);
        reg = x2511;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2512);
        reg = x2512;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2513);
        reg = x2513;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x2514 = Fp(x2513.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x2515 = x2514 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2515);
          reg = x2515;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x2516 = Fp(x2513.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x2517 = x2516 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2517);
          reg = x2517;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x2518 = Fp(x2513.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x2519 = x2518 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2519);
          reg = x2519;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x2520 = Fp(x2513.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x2521 = x2520 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2521);
          reg = x2521;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x2522 = Fp(x2513.asUInt32() & x71.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x2523 = x2522 * x54;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2523);
          reg = x2523;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:0)
        auto x2524 = Fp(x2513.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2524);
          reg = x2524;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x2525 = Fp(x2512.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x2526 = x2525 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2526);
          reg = x2526;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x2527 = Fp(x2512.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x2528 = x2527 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2528);
          reg = x2528;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x2529 = Fp(x2512.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x2530 = x2529 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2530);
          reg = x2530;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x2531 = Fp(x2512.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x2532 = x2531 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2532);
          reg = x2532;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:0)
        auto x2533 = Fp(x2512.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2533);
          reg = x2533;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x2534 = Fp(x2511.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x2535 = x2534 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2535);
          reg = x2535;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x2536 = Fp(x2511.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x2537 = x2536 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2537);
          reg = x2537;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x2538 = Fp(x2511.asUInt32() & x51.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x2539 = x2538 * x56;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2539);
          reg = x2539;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x2540 = Fp(x2511.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x2541 = x2540 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2541);
          reg = x2541;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:0)
        auto x2542 = Fp(x2511.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2542);
          reg = x2542;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x2543 = Fp(x2510.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x2544 = x2543 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2544);
          reg = x2544;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        auto x2545 = Fp(x2510.asUInt32() & x50.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2545);
          reg = x2545;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2546 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2546 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2547 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x2547 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2548 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2548 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x2549 = x2548 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2550 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2550 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x2551 = x2550 * x69;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2552 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x2552 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x2553 = x2552 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x2554 = x2553 + x2551;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x2555 = x2554 + x2549;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x2556 = x2555 + x2547;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2557 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2557 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x2558 = x2557 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x2559 = x2558 + x2556;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x2560 = x2559 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x2561 = x2560 + x2546;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x2562 = x2513 - x2561;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      if (x2562 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2563 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2563 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2564 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2564 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2565 = x2564 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2566 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2566 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2567 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x2567 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2568 = x2567 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2569 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2569 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2570 = x2569 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2571 = x2570 + x2568;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2572 = x2571 + x2566;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2573 = x2572 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2574 = x2573 + x2565;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2575 = x2574 + x2563;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x2576 = x2512 - x2575;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      if (x2576 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2577 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2577 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2578 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2578 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x2579 = x2578 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2580 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2580 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2581 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2581 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x2582 = x2581 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x2583 = x2582 + x2580;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x2584 = x2583 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2585 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2585 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x2586 = x2585 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x2587 = x2586 + x2584;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x2588 = x2587 + x2579;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x2589 = x2588 + x2577;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x2590 = x2511 - x2589;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      if (x2590 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x2591 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2591 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2592 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2592 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x2593 = x2592 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x2594 = x2593 + x2591;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x2595 = x2510 - x2594;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      if (x2595 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        auto x2596 = extern_getMinor(ctx, cycle, "", {x2510, x2511, x2512, x2513});
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2597 = (x2596 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2597);
            reg = x2597;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2598 = x2596 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2599 = (x2598 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2599);
            reg = x2599;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2600 = x2596 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2601 = (x2600 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2601);
            reg = x2601;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2602 = x2596 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2603 = (x2602 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2603);
            reg = x2603;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2604 = x2596 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2605 = (x2604 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2605);
            reg = x2605;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2606 = x2596 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2607 = (x2606 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2607);
            reg = x2607;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2608 = x2596 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2609 = (x2608 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2609);
            reg = x2609;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2610 = x2596 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x2611 = (x2610 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2611);
            reg = x2611;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2612 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x2612 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2613 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x2613 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2614 = x2613 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2615 = x2612 + x2614;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2616 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x2616 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2617 = x2616 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2618 = x2615 + x2617;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2619 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x2619 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2620 = x2619 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2621 = x2618 + x2620;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2622 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x2622 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2623 = x2622 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2624 = x2621 + x2623;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2625 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2625 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2626 = x2625 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2627 = x2624 + x2626;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2628 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2628 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2629 = x2628 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x2630 = x2627 + x2629;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x2631 = x2630 - x2596;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x2631 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0))
        auto x2632 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x2632 != Fp::invalid());
        if (x2632 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2633 = x2577 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2634 = x2578 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2635 = x2547 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2636 = x2548 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2637 = x2636 + x2635;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2638 = x2637 + x2634;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2639 = x2638 + x2633;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2640 = x2552 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2641 = x2592 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2642 = x2557 * x43;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2643 = x2642 + x2641;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2644 = x2643 + x2640;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2645 = x2644 + x2550;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
          auto x2646 = x2557 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2639);
            reg = x2639;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2645);
            reg = x2645;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2646);
            reg = x2646;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2646);
            reg = x2646;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0))
        auto x2647 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x2647 != Fp::invalid());
        if (x2647 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2648 = x2577 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2649 = x2578 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2650 = x2547 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2651 = x2548 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2652 = x2651 + x2650;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2653 = x2652 + x2649;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2654 = x2653 + x2648;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2655 = x2552 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2656 = x2592 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2657 = x2557 * x43;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2658 = x2657 + x2656;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2659 = x2658 + x2655;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2660 = x2659 + x2550;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
          auto x2661 = x2557 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2654);
            reg = x2654;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2660);
            reg = x2660;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2661);
            reg = x2661;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2661);
            reg = x2661;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0))
        auto x2662 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x2662 != Fp::invalid());
        if (x2662 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2663 = x2577 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2664 = x2578 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2665 = x2547 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2666 = x2548 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2667 = x2666 + x2665;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2668 = x2667 + x2664;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
          auto x2669 = x2668 + x2663;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2670 = x2552 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2671 = x2592 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2672 = x2557 * x43;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2673 = x2672 + x2671;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2674 = x2673 + x2670;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
          auto x2675 = x2674 + x2550;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
          auto x2676 = x2557 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2669);
            reg = x2669;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2675);
            reg = x2675;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2676);
            reg = x2676;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2676);
            reg = x2676;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x89);
            reg = x89;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:0))
        auto x2677 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x2677 != Fp::invalid());
        if (x2677 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x2678 = x2546 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x2679 = x2678 + x2572;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
          auto x2680 = x2547 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
          auto x2681 = x2548 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
          auto x2682 = x2681 + x2680;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
          auto x2683 = x2682 + x2679;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
          auto x2684 = x2683 - x2566;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
          auto x2685 = x2552 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
          auto x2686 = x2566 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
          auto x2687 = x2587 + x2686;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
          auto x2688 = x2687 + x2685;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
          auto x2689 = x2688 + x2550;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:0)
          auto x2690 = x2557 * x43;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:0)
          auto x2691 = x2690 + x2565;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:0)
          auto x2692 = x2691 + x2563;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":109:0)
          auto x2693 = x2557 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2684);
            reg = x2684;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2689);
            reg = x2689;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2692);
            reg = x2692;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2693);
            reg = x2693;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:0))
        auto x2694 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x2694 != Fp::invalid());
        if (x2694 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x2695 = x2546 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x2696 = x2695 + x2572;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x2697 = x2547 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x2698 = x2548 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x2699 = x2698 + x2697;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x2700 = x2699 + x2696;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x2701 = x2552 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x2702 = x2557 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x2703 = x2702 + x2701;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x2704 = x2703 + x2550;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x2705 = x2557 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2700);
            reg = x2700;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2704);
            reg = x2704;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2705);
            reg = x2705;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2705);
            reg = x2705;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:0))
        auto x2706 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x2706 != Fp::invalid());
        if (x2706 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2587);
            reg = x2587;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2575);
            reg = x2575;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2561);
            reg = x2561;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":48:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":49:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":50:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:0))
        auto x2707 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2707 != Fp::invalid());
        if (x2707 != 0) {
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2587);
            reg = x2587;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2575);
            reg = x2575;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2561);
            reg = x2561;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x2708 = x2563 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x2709 = x2564 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x2710 = x2709 + x2708;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x2711 = x2710 + x2585;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":134:0)
      auto x2712 = x2711 + x48;
      {
        auto [x2713, x2714, x2715, x2716] = extern_ramRead(ctx, cycle, "", {x2712, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2713);
          reg = x2713;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2714);
          reg = x2714;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2715);
          reg = x2715;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2716);
          reg = x2716;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2717 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2717 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2718 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2718 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2719 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2719 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2720 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x2720 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2712);
        reg = x2712;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2717);
        reg = x2717;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2718);
        reg = x2718;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2719);
        reg = x2719;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2720);
        reg = x2720;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x2721 = x2546 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x2722 = x2721 + x2572;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":135:0)
      auto x2723 = x2722 + x48;
      {
        auto [x2724, x2725, x2726, x2727] = extern_ramRead(ctx, cycle, "", {x2723, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2724);
          reg = x2724;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2725);
          reg = x2725;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2726);
          reg = x2726;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2727);
          reg = x2727;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2728 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x2728 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2729 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x2729 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2730 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x2730 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2731 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x2731 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2723);
        reg = x2723;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2728);
        reg = x2728;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2729);
        reg = x2729;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2730);
        reg = x2730;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2731);
        reg = x2731;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2732 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x2732 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":35:0)
      auto x2733 = x946 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":35:0)
      auto x2734 = x948 + x2733;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x2735 = x954 - x77;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2736 = x2732 * x2735;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2737 = x2732 * x952;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2738 = x2732 * x950;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2739 = x2732 * x2734;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":139:0)
      auto x2740 = x96 - x2732;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2741 = x2740 * x2717;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2742 = x2740 * x2718;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2743 = x2740 * x2719;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2744 = x2740 * x2720;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2745 = x2741 + x2736;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2746 = x2742 + x2737;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2747 = x2743 + x2738;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2748 = x2744 + x2739;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2749 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x2749 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2750 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2750 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2751 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2751 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2752 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x2752 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2753 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x2753 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2754 = x2749 * x2750;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2755 = x2749 * x2751;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2756 = x2749 * x2752;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2757 = x2749 * x2753;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":141:0)
      auto x2758 = x96 - x2749;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2759 = x2758 * x2728;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2760 = x2758 * x2729;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2761 = x2758 * x2730;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2762 = x2758 * x2731;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2763 = x2759 + x2754;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2764 = x2760 + x2755;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2765 = x2761 + x2756;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2766 = x2762 + x2757;
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2767 = Fp(x2748.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2768 = x2767 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2768);
          reg = x2768;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2769 = Fp(x2748.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2770 = x2769 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2770);
          reg = x2770;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x2771 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x2771 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2772 = x2771 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2773 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2773 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2774 = x2773 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2775 = x2774 + x2772;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2776 = x2748 - x2775;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x2776 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2777 = Fp(x2766.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2778 = x2777 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2778);
          reg = x2778;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2779 = Fp(x2766.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2780 = x2779 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2780);
          reg = x2780;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x2781 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x2781 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2782 = x2781 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2783 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2783 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2784 = x2783 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2785 = x2784 + x2782;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2786 = x2766 - x2785;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x2786 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2763);
        reg = x2763;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2764);
        reg = x2764;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2765);
        reg = x2765;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2766);
        reg = x2766;
      }
      {
        // loc("zirgen/components/u32.cpp":119:0)
        auto x2787 = Fp(x2745.asUInt32() & x2763.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x2788 = Fp(x2746.asUInt32() & x2764.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x2789 = Fp(x2747.asUInt32() & x2765.asUInt32());
        // loc("zirgen/components/u32.cpp":119:0)
        auto x2790 = Fp(x2748.asUInt32() & x2766.asUInt32());
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2787);
          reg = x2787;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2788);
          reg = x2788;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2789);
          reg = x2789;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2790);
          reg = x2790;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2791 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x2791 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2792 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2792 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2793 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x2793 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2794 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x2794 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2795 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2795 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2796 = x2795 * x2791;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2797 = x2795 * x2792;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2798 = x2795 * x2793;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2799 = x2795 * x2794;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2800 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2800 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2801 = x2800 * x2763;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2802 = x2800 * x2764;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2803 = x2800 * x2765;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2804 = x2800 * x2766;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2805 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2805 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2806 = x2805 * x2745;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2807 = x2805 * x2746;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2808 = x2805 * x2747;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x2809 = x2805 * x2748;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2810 = x2806 + x91;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2811 = x2807 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2812 = x2808 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2813 = x2809 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2814 = x2810 + x2801;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2815 = x2811 + x2802;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2816 = x2812 + x2803;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2817 = x2813 + x2804;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2818 = x2814 + x2796;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2819 = x2815 + x2797;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2820 = x2816 + x2798;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x2821 = x2817 + x2799;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x2822 = x2819 * x91;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x2823 = x2818 + x2822;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x2824 = Fp(x2823.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2824);
          reg = x2824;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x2825 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x2825 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2826 = x2823 - x2825;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2827 = x2826 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x2828 = Fp(x2827.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2828);
          reg = x2828;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x2829 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x2829 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2830 = x2827 - x2829;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2831 = x2830 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2831);
        reg = x2831;
      }
      // loc("zirgen/components/u32.cpp":154:0)
      auto x2832 = x2821 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2833 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2833 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:0)
      auto x2834 = x2833 + x2820;
      // loc("zirgen/components/u32.cpp":154:0)
      auto x2835 = x2834 + x2832;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x2836 = Fp(x2835.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2836);
          reg = x2836;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x2837 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x2837 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2838 = x2835 - x2837;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2839 = x2838 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x2840 = Fp(x2839.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2840);
          reg = x2840;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x2841 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x2841 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2842 = x2839 - x2841;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x2843 = x2842 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2843);
        reg = x2843;
      }
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2844 = Fp(x2841.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x2845 = x2844 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2845);
          reg = x2845;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2846 = Fp(x2841.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x2847 = x2846 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x2848 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x2848 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2849 = x2848 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2850 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x2850 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2851 = x2850 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2852 = x2851 + x2849;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x2853 = x2841 - x2852;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x2853 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2854 = x96 - x2773;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2855 = x2854 * x2783;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2856 = x2855 * x2850;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2857 = x96 - x2850;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2858 = x96 - x2783;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2859 = x2773 * x2858;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2860 = x2859 * x2857;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      auto x2861 = x2860 + x2856;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:0)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2861);
        reg = x2861;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x2862 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x2862 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x2863 = x2862 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x2864 = x2863 * x2850;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x2865 = x2862 + x2850;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      auto x2866 = x2865 - x2864;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:0)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2866);
        reg = x2866;
      }
      // loc("zirgen/components/u32.cpp":143:0)
      auto x2867 = x2829 * x91;
      // loc("zirgen/components/u32.cpp":143:0)
      auto x2868 = x2825 + x2867;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x2869 = (x2868 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2869);
          reg = x2869;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x2870 = inv(x2868);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2870);
          reg = x2870;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2871 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x2871 != Fp::invalid());
      if (x2871 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x2868 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x2872 = x96 - x2871;
      if (x2872 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2873 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x2873 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2874 = x2868 * x2873;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2875 = x2874 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x2875 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":144:0)
      auto x2876 = x2872 * x78;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x2877 = x2841 * x91;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x2878 = x2837 + x2877;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x2879 = x2878 + x2876;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x2880 = (x2879 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2880);
          reg = x2880;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x2881 = inv(x2879);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2881);
          reg = x2881;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2882 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x2882 != Fp::invalid());
      if (x2882 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x2879 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x2883 = x96 - x2882;
      if (x2883 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2884 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x2884 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2885 = x2879 * x2884;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2886 = x2885 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x2886 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2887 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2887 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":97:0)
      auto x2888 = x96 - x2887;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2889 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x2889 != Fp::invalid());
      extern_log(ctx, cycle, "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", {x2750, x2751, x2752, x2753, x2711, x2717, x2718, x2719, x2720, x2722, x2728, x2729, x2730, x2731, x2745, x2746, x2747, x2748, x2763, x2764, x2765, x2766, x2825, x2829, x2837, x2841, x2882, x2889, x2888});
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x2890 = x2577 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x2891 = x2578 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x2892 = x2891 + x2890;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x2893 = x2892 + x2592;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x2894 = (x2893 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2894);
          reg = x2894;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x2895 = inv(x2893);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2895);
          reg = x2895;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x2896 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x2896 != Fp::invalid());
      if (x2896 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x2893 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x2897 = x96 - x2896;
      if (x2897 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2898 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x2898 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2899 = x2893 * x2898;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x2900 = x2899 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x2900 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":161:0)
      auto x2901 = x959 + x77;
      // loc("zirgen/components/u32.cpp":68:0)
      auto x2902 = x2752 * x78;
      // loc("zirgen/components/u32.cpp":68:0)
      auto x2903 = x2751 * x91;
      // loc("zirgen/components/u32.cpp":68:0)
      auto x2904 = x2750 + x2903;
      // loc("zirgen/components/u32.cpp":68:0)
      auto x2905 = x2904 + x2902;
      // loc("zirgen/components/u32.cpp":71:0)
      auto x2906 = x2753 * x46;
      // loc("zirgen/components/u32.cpp":71:0)
      auto x2907 = x2906 * x47;
      // loc("zirgen/components/u32.cpp":71:0)
      auto x2908 = x2905 + x2907;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":162:0)
      auto x2909 = x959 + x2908;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":168:0)
      auto x2910 = x2841 * x79;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":167:0)
      auto x2911 = x2837 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":167:0)
      auto x2912 = x2868 + x2911;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":168:0)
      auto x2913 = x2912 + x2910;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":172:0)
      auto x2914 = x96 - x2889;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":172:0)
      auto x2915 = x2914 * x2909;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":172:0)
      auto x2916 = x2889 * x2901;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":172:0)
      auto x2917 = x2916 + x2915;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":173:0)
      auto x2918 = x96 - x2888;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":173:0)
      auto x2919 = x2918 * x2901;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":173:0)
      auto x2920 = x2888 * x2909;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":173:0)
      auto x2921 = x2920 + x2919;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":174:0)
      auto x2922 = x2918 * x2909;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":174:0)
      auto x2923 = x2888 * x2901;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":174:0)
      auto x2924 = x2923 + x2922;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0))
      auto x2925 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2925 != Fp::invalid());
      if (x2925 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0)
        auto x2926 = x2591 - x42;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0)
        if (x2926 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:54");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0)
        auto x2927 = x2583 - x72;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0)
        if (x2927 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:54");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2928 = x2547 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2929 = x2548 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2930 = x2929 + x2928;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2931 = x2930 + x2891;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2932 = x2931 + x2890;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2933 = x2552 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2934 = x2592 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2935 = x2557 * x43;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2936 = x2935 + x2934;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2937 = x2936 + x2933;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2938 = x2937 + x2550;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
        auto x2939 = x2557 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2932);
          reg = x2932;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2938);
          reg = x2938;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2939);
          reg = x2939;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2939);
          reg = x2939;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2940 = x2917 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2941 = Fp(x2940.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2941);
            reg = x2941;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2942 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2942 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2943 = x2940 - x2942;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2944 = x2943 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2945 = Fp(x2944.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2945);
            reg = x2945;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2946 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2946 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2947 = x2944 - x2946;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2948 = x2947 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2949 = Fp(x2948.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2949);
            reg = x2949;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2950 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2950 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2951 = x2948 - x2950;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2952 = x2951 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2953 = Fp(x2952.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2953);
            reg = x2953;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2954 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2954 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2955 = x2952 - x2954;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x2956 = x2955 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2956);
          reg = x2956;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2957 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2957 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2958 = x96 - x2957;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x2959 = x2957 * x2958;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2959);
          reg = x2959;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2960 = x93 - x2957;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x2961 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2961 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x2962 = x2961 * x2960;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x2962 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2963 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2963 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2963);
          reg = x2963;
        }
        if (x95 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2893, x2825, x2829, x2837, x2841});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0)
          auto x2964 = x2893 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2825);
            reg = x2825;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2829);
            reg = x2829;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2841);
            reg = x2841;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x2964, x2825, x2829, x2837, x2841, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2965 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2965 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2966 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2966 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2967 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2967 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x2968 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2968 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2964);
            reg = x2964;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2965);
            reg = x2965;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2966);
            reg = x2966;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2967);
            reg = x2967;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2968);
            reg = x2968;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:0)
        auto x2969 = x2896 + x96;
        if (x2969 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0))
      auto x2970 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2970 != Fp::invalid());
      if (x2970 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0)
        auto x2971 = x2591 - x42;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0)
        if (x2971 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:55");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0)
        auto x2972 = x2583 - x71;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0)
        if (x2972 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:55");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2973 = x2547 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2974 = x2548 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2975 = x2974 + x2973;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2976 = x2975 + x2891;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x2977 = x2976 + x2890;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2978 = x2552 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2979 = x2592 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2980 = x2557 * x43;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2981 = x2980 + x2979;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2982 = x2981 + x2978;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x2983 = x2982 + x2550;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
        auto x2984 = x2557 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2977);
          reg = x2977;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2983);
          reg = x2983;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2984);
          reg = x2984;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2984);
          reg = x2984;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x2985 = x2921 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2986 = Fp(x2985.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2986);
            reg = x2986;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2987 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2987 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2988 = x2985 - x2987;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2989 = x2988 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2990 = Fp(x2989.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2990);
            reg = x2990;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2991 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2991 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2992 = x2989 - x2991;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2993 = x2992 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x2994 = Fp(x2993.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2994);
            reg = x2994;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x2995 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2995 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2996 = x2993 - x2995;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x2997 = x2996 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x2998 = Fp(x2997.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2998);
            reg = x2998;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x2999 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2999 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3000 = x2997 - x2999;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3001 = x3000 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3001);
          reg = x3001;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3002 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3002 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3003 = x96 - x3002;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3004 = x3002 * x3003;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3004);
          reg = x3004;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3005 = x93 - x3002;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3006 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3006 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3007 = x3006 * x3005;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x3007 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3008 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3008 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3008);
          reg = x3008;
        }
        if (x95 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2893, x2825, x2829, x2837, x2841});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0)
          auto x3009 = x2893 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2825);
            reg = x2825;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2829);
            reg = x2829;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2841);
            reg = x2841;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3009, x2825, x2829, x2837, x2841, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3010 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3010 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3011 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3011 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3012 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3012 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3013 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3013 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3009);
            reg = x3009;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3010);
            reg = x3010;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3011);
            reg = x3011;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3012);
            reg = x3012;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3013);
            reg = x3013;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:0)
        auto x3014 = x2896 + x96;
        if (x3014 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0))
      auto x3015 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3015 != Fp::invalid());
      if (x3015 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0)
        auto x3016 = x2591 - x42;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0)
        if (x3016 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:56");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0)
        auto x3017 = x2583 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0)
        if (x3017 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:56");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x3018 = x2547 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x3019 = x2548 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x3020 = x3019 + x3018;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x3021 = x3020 + x2891;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:0)
        auto x3022 = x3021 + x2890;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x3023 = x2552 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x3024 = x2592 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x3025 = x2557 * x43;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x3026 = x3025 + x3024;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x3027 = x3026 + x3023;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:0)
        auto x3028 = x3027 + x2550;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:0)
        auto x3029 = x2557 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3022);
          reg = x3022;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3028);
          reg = x3028;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3029);
          reg = x3029;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3029);
          reg = x3029;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x3030 = x2924 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3031 = Fp(x3030.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3031);
            reg = x3031;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3032 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x3032 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3033 = x3030 - x3032;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3034 = x3033 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3035 = Fp(x3034.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3035);
            reg = x3035;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3036 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x3036 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3037 = x3034 - x3036;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3038 = x3037 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3039 = Fp(x3038.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3039);
            reg = x3039;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3040 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x3040 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3041 = x3038 - x3040;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3042 = x3041 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x3043 = Fp(x3042.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3043);
            reg = x3043;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3044 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x3044 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3045 = x3042 - x3044;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3046 = x3045 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3046);
          reg = x3046;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3047 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3047 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3048 = x96 - x3047;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3049 = x3047 * x3048;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3049);
          reg = x3049;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3050 = x93 - x3047;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3051 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3051 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3052 = x3051 * x3050;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x3052 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3053 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3053 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3053);
          reg = x3053;
        }
        if (x95 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2893, x2825, x2829, x2837, x2841});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0)
          auto x3054 = x2893 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2825);
            reg = x2825;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2829);
            reg = x2829;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2841);
            reg = x2841;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3054, x2825, x2829, x2837, x2841, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3055 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3055 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3056 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3056 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3057 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3057 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3058 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3058 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3054);
            reg = x3054;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3055);
            reg = x3055;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3056);
            reg = x3056;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3057);
            reg = x3057;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3058);
            reg = x3058;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:0)
        auto x3059 = x2896 + x96;
        if (x3059 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:0))
      auto x3060 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3060 != Fp::invalid());
      if (x3060 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:0)
        auto x3061 = x2591 - x41;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:0)
        if (x3061 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:57");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
        auto x3062 = x2547 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
        auto x3063 = x2548 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
        auto x3064 = x3063 + x3062;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
        auto x3065 = x3064 + x2722;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:0)
        auto x3066 = x3065 - x2566;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
        auto x3067 = x2552 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
        auto x3068 = x2566 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
        auto x3069 = x2587 + x3068;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
        auto x3070 = x3069 + x3067;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:0)
        auto x3071 = x3070 + x2550;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:0)
        auto x3072 = x2557 * x43;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:0)
        auto x3073 = x3072 + x2565;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:0)
        auto x3074 = x3073 + x2563;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":109:0)
        auto x3075 = x2557 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3066);
          reg = x3066;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3071);
          reg = x3071;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3074);
          reg = x3074;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3075);
          reg = x3075;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x3076 = x2909 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3077 = Fp(x3076.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3077);
            reg = x3077;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3078 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x3078 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3079 = x3076 - x3078;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3080 = x3079 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3081 = Fp(x3080.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3081);
            reg = x3081;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3082 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x3082 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3083 = x3080 - x3082;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3084 = x3083 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3085 = Fp(x3084.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3085);
            reg = x3085;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3086 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x3086 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3087 = x3084 - x3086;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3088 = x3087 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x3089 = Fp(x3088.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3089);
            reg = x3089;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3090 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x3090 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3091 = x3088 - x3090;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3092 = x3091 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3092);
          reg = x3092;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3093 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3093 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3094 = x96 - x3093;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3095 = x3093 * x3094;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3095);
          reg = x3095;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3096 = x93 - x3093;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3097 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3097 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3098 = x3097 * x3096;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x3098 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3099 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3099 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3099);
          reg = x3099;
        }
        if (x2897 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2893, x954, x952, x950, x2734});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:0)
          auto x3100 = x2893 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x954);
            reg = x954;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x952);
            reg = x952;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x950);
            reg = x950;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2734);
            reg = x2734;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3100, x954, x952, x950, x2734, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3101 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3101 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3102 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3102 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3103 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3103 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3104 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3104 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3100);
            reg = x3100;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3101);
            reg = x3101;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3102);
            reg = x3102;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3103);
            reg = x3103;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3104);
            reg = x3104;
          }
        }
        if (x2896 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:0))
      auto x3105 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3105 != Fp::invalid());
      if (x3105 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:0)
        auto x3106 = x2591 - x40;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:0)
        if (x3106 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:58");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:0)
        if (x2583 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:58");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3107 = x2547 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3108 = x2548 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3109 = x3108 + x3107;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3110 = x3109 + x2722;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3111 = x2552 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3112 = x2557 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3113 = x3112 + x3111;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3114 = x3113 + x2550;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x3115 = x2557 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3110);
          reg = x3110;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3114);
          reg = x3114;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3115);
          reg = x3115;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3115);
          reg = x3115;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x3116 = x2913 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3117 = Fp(x3116.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3117);
            reg = x3117;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3118 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x3118 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3119 = x3116 - x3118;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3120 = x3119 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3121 = Fp(x3120.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3121);
            reg = x3121;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3122 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x3122 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3123 = x3120 - x3122;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3124 = x3123 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3125 = Fp(x3124.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3125);
            reg = x3125;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3126 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x3126 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3127 = x3124 - x3126;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3128 = x3127 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x3129 = Fp(x3128.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3129);
            reg = x3129;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3130 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x3130 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3131 = x3128 - x3130;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3132 = x3131 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3132);
          reg = x3132;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3133 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3133 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3134 = x96 - x3133;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3135 = x3133 * x3134;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3135);
          reg = x3135;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3136 = x93 - x3133;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3137 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3137 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3138 = x3137 * x3136;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x3138 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3139 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3139 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3139);
          reg = x3139;
        }
        if (x2897 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2893, x954, x952, x950, x2734});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:0)
          auto x3140 = x2893 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x954);
            reg = x954;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x952);
            reg = x952;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x950);
            reg = x950;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2734);
            reg = x2734;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3140, x954, x952, x950, x2734, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3141 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3141 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3142 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3142 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3143 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3143 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3144 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3144 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3140);
            reg = x3140;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3141);
            reg = x3141;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3142);
            reg = x3142;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3143);
            reg = x3143;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3144);
            reg = x3144;
          }
        }
        if (x2896 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:0))
      auto x3145 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3145 != Fp::invalid());
      if (x3145 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:0)
        auto x3146 = x2591 - x39;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:0)
        if (x3146 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:59");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2587);
          reg = x2587;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2575);
          reg = x2575;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2561);
          reg = x2561;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":48:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":49:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":50:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x3147 = x2901 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3148 = Fp(x3147.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3148);
            reg = x3148;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3149 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x3149 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3150 = x3147 - x3149;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3151 = x3150 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3152 = Fp(x3151.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3152);
            reg = x3152;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3153 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x3153 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3154 = x3151 - x3153;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3155 = x3154 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3156 = Fp(x3155.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3156);
            reg = x3156;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3157 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x3157 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3158 = x3155 - x3157;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3159 = x3158 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x3160 = Fp(x3159.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3160);
            reg = x3160;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3161 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x3161 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3162 = x3159 - x3161;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3163 = x3162 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3163);
          reg = x3163;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3164 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3164 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3165 = x96 - x3164;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3166 = x3164 * x3165;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3166);
          reg = x3166;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3167 = x93 - x3164;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3168 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3168 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3169 = x3168 * x3167;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x3169 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3170 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3170 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3170);
          reg = x3170;
        }
        if (x2897 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2893, x2825, x2829, x2837, x2841});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:0)
          auto x3171 = x2893 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2825);
            reg = x2825;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2829);
            reg = x2829;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2841);
            reg = x2841;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3171, x2825, x2829, x2837, x2841, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3172 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3172 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3173 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3173 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3174 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3174 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3175 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3175 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3171);
            reg = x3171;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3172);
            reg = x3172;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3173);
            reg = x3173;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3174);
            reg = x3174;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3175);
            reg = x3175;
          }
        }
        if (x2896 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:0))
      auto x3176 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3176 != Fp::invalid());
      if (x3176 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:0)
        auto x3177 = x2591 - x38;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:0)
        if (x3177 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:60");
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2587);
          reg = x2587;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2575);
          reg = x2575;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2561);
          reg = x2561;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x3178 = x2901 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3179 = Fp(x3178.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3179);
            reg = x3179;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3180 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x3180 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3181 = x3178 - x3180;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3182 = x3181 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3183 = Fp(x3182.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3183);
            reg = x3183;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3184 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x3184 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3185 = x3182 - x3184;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3186 = x3185 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3187 = Fp(x3186.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3187);
            reg = x3187;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x3188 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x3188 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3189 = x3186 - x3188;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x3190 = x3189 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x3191 = Fp(x3190.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3191);
            reg = x3191;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3192 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x3192 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3193 = x3190 - x3192;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x3194 = x3193 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3194);
          reg = x3194;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3195 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3195 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3196 = x96 - x3195;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x3197 = x3195 * x3196;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3197);
          reg = x3197;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3198 = x93 - x3195;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3199 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3199 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x3200 = x3199 * x3198;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x3200 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3201 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3201 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3201);
          reg = x3201;
        }
        if (x2897 != 0) {
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", {x2893, x2825, x2829, x2837, x2841});
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:0)
          auto x3202 = x2893 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2825);
            reg = x2825;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2829);
            reg = x2829;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2841);
            reg = x2841;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3202, x2825, x2829, x2837, x2841, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3203 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3203 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3204 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3204 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3205 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3205 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3206 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3206 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3202);
            reg = x3202;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3203);
            reg = x3203;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3204);
            reg = x3204;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3205);
            reg = x3205;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3206);
            reg = x3206;
          }
        }
        if (x2896 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./zirgen/components/mux.h":49:0))
    auto x3207 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x3207 != Fp::invalid());
    if (x3207 != 0) {
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":20:0)
      auto x3208 = x959 * x75;
      {
        auto [x3209, x3210, x3211, x3212] = extern_ramRead(ctx, cycle, "", {x3208, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3209);
          reg = x3209;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3210);
          reg = x3210;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3211);
          reg = x3211;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3212);
          reg = x3212;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3213 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3213 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3214 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3214 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3215 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3215 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3216 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3216 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3208);
        reg = x3208;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3213);
        reg = x3213;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3214);
        reg = x3214;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3215);
        reg = x3215;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3216);
        reg = x3216;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x3217 = Fp(x3216.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x3218 = x3217 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3218);
          reg = x3218;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x3219 = Fp(x3216.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x3220 = x3219 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3220);
          reg = x3220;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x3221 = Fp(x3216.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x3222 = x3221 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3222);
          reg = x3222;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x3223 = Fp(x3216.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x3224 = x3223 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3224);
          reg = x3224;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x3225 = Fp(x3216.asUInt32() & x71.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x3226 = x3225 * x54;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3226);
          reg = x3226;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:0)
        auto x3227 = Fp(x3216.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3227);
          reg = x3227;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x3228 = Fp(x3215.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x3229 = x3228 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3229);
          reg = x3229;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x3230 = Fp(x3215.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x3231 = x3230 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3231);
          reg = x3231;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x3232 = Fp(x3215.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x3233 = x3232 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3233);
          reg = x3233;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x3234 = Fp(x3215.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x3235 = x3234 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3235);
          reg = x3235;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:0)
        auto x3236 = Fp(x3215.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3236);
          reg = x3236;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x3237 = Fp(x3214.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x3238 = x3237 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3238);
          reg = x3238;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x3239 = Fp(x3214.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x3240 = x3239 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3240);
          reg = x3240;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x3241 = Fp(x3214.asUInt32() & x51.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x3242 = x3241 * x56;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3242);
          reg = x3242;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x3243 = Fp(x3214.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x3244 = x3243 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3244);
          reg = x3244;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:0)
        auto x3245 = Fp(x3214.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3245);
          reg = x3245;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x3246 = Fp(x3213.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x3247 = x3246 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3247);
          reg = x3247;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        auto x3248 = Fp(x3213.asUInt32() & x50.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3248);
          reg = x3248;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3249 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3249 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3250 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3250 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3251 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3251 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x3252 = x3251 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3253 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3253 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x3254 = x3253 * x69;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3255 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3255 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x3256 = x3255 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x3257 = x3256 + x3254;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x3258 = x3257 + x3252;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x3259 = x3258 + x3250;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3260 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3260 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x3261 = x3260 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x3262 = x3261 + x3259;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x3263 = x3262 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x3264 = x3263 + x3249;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x3265 = x3216 - x3264;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      if (x3265 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3266 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3266 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3267 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3267 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3268 = x3267 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3269 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3269 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3270 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3270 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3271 = x3270 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3272 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3272 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3273 = x3272 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3274 = x3273 + x3271;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3275 = x3274 + x3269;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3276 = x3275 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3277 = x3276 + x3268;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3278 = x3277 + x3266;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x3279 = x3215 - x3278;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      if (x3279 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3280 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3280 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3281 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3281 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x3282 = x3281 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3283 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3283 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3284 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3284 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x3285 = x3284 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x3286 = x3285 + x3283;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x3287 = x3286 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3288 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3288 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x3289 = x3288 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x3290 = x3289 + x3287;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x3291 = x3290 + x3282;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x3292 = x3291 + x3280;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x3293 = x3214 - x3292;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      if (x3293 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x3294 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3294 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3295 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3295 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x3296 = x3295 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x3297 = x3296 + x3294;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x3298 = x3213 - x3297;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      if (x3298 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        auto x3299 = extern_getMinor(ctx, cycle, "", {x3213, x3214, x3215, x3216});
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3300 = (x3299 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3300);
            reg = x3300;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3301 = x3299 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3302 = (x3301 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3302);
            reg = x3302;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3303 = x3299 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3304 = (x3303 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3304);
            reg = x3304;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3305 = x3299 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3306 = (x3305 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3306);
            reg = x3306;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3307 = x3299 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3308 = (x3307 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3308);
            reg = x3308;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3309 = x3299 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3310 = (x3309 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3310);
            reg = x3310;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3311 = x3299 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3312 = (x3311 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3312);
            reg = x3312;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3313 = x3299 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3314 = (x3313 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3314);
            reg = x3314;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3315 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3315 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3316 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3316 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3317 = x3316 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3318 = x3315 + x3317;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3319 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3319 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3320 = x3319 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3321 = x3318 + x3320;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3322 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3322 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3323 = x3322 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3324 = x3321 + x3323;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3325 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3325 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3326 = x3325 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3327 = x3324 + x3326;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3328 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3328 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3329 = x3328 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3330 = x3327 + x3329;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3331 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3331 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3332 = x3331 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3333 = x3330 + x3332;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x3334 = x3333 - x3299;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x3334 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0))
        auto x3335 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3335 != Fp::invalid());
        if (x3335 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3336 = x3249 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3337 = x3336 + x3275;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3338 = x3250 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3339 = x3251 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3340 = x3339 + x3338;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3341 = x3340 + x3337;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3342 = x3255 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3343 = x3260 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3344 = x3343 + x3342;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3345 = x3344 + x3253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x3346 = x3260 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3341);
            reg = x3341;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3345);
            reg = x3345;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3346);
            reg = x3346;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3346);
            reg = x3346;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0))
        auto x3347 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3347 != Fp::invalid());
        if (x3347 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3348 = x3249 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3349 = x3348 + x3275;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3350 = x3250 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3351 = x3251 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3352 = x3351 + x3350;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3353 = x3352 + x3349;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3354 = x3255 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3355 = x3260 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3356 = x3355 + x3354;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3357 = x3356 + x3253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x3358 = x3260 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3353);
            reg = x3353;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3357);
            reg = x3357;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3358);
            reg = x3358;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3358);
            reg = x3358;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0))
        auto x3359 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3359 != Fp::invalid());
        if (x3359 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3360 = x3249 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3361 = x3360 + x3275;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3362 = x3250 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3363 = x3251 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3364 = x3363 + x3362;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3365 = x3364 + x3361;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3366 = x3255 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3367 = x3260 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3368 = x3367 + x3366;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3369 = x3368 + x3253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x3370 = x3260 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3365);
            reg = x3365;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3369);
            reg = x3369;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3370);
            reg = x3370;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3370);
            reg = x3370;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0))
        auto x3371 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3371 != Fp::invalid());
        if (x3371 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3372 = x3249 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3373 = x3372 + x3275;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3374 = x3250 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3375 = x3251 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3376 = x3375 + x3374;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3377 = x3376 + x3373;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3378 = x3255 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3379 = x3260 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3380 = x3379 + x3378;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3381 = x3380 + x3253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x3382 = x3260 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3377);
            reg = x3377;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3381);
            reg = x3381;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3382);
            reg = x3382;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3382);
            reg = x3382;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0))
        auto x3383 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3383 != Fp::invalid());
        if (x3383 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3384 = x3249 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
          auto x3385 = x3384 + x3275;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3386 = x3250 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3387 = x3251 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3388 = x3387 + x3386;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
          auto x3389 = x3388 + x3385;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3390 = x3255 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3391 = x3260 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3392 = x3391 + x3390;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
          auto x3393 = x3392 + x3253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
          auto x3394 = x3260 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3389);
            reg = x3389;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3393);
            reg = x3393;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3394);
            reg = x3394;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3394);
            reg = x3394;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0))
        auto x3395 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3395 != Fp::invalid());
        if (x3395 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3396 = x3280 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3397 = x3281 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3398 = x3397 + x3396;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3399 = x3398 + x3295;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3400 = x3250 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3401 = x3251 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3402 = x3401 + x3400;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3403 = x3402 + x3399;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3404 = x3255 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3405 = x3260 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3406 = x3405 + x3404;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3407 = x3406 + x3253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:0)
          auto x3408 = x3260 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3403);
            reg = x3403;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3407);
            reg = x3407;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3408);
            reg = x3408;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3408);
            reg = x3408;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0))
        auto x3409 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3409 != Fp::invalid());
        if (x3409 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3410 = x3280 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3411 = x3281 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3412 = x3411 + x3410;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3413 = x3412 + x3295;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3414 = x3250 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3415 = x3251 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3416 = x3415 + x3414;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3417 = x3416 + x3413;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3418 = x3255 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3419 = x3260 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3420 = x3419 + x3418;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3421 = x3420 + x3253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:0)
          auto x3422 = x3260 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3417);
            reg = x3417;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3421);
            reg = x3421;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3422);
            reg = x3422;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3422);
            reg = x3422;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0))
        auto x3423 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3423 != Fp::invalid());
        if (x3423 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3424 = x3280 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3425 = x3281 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3426 = x3425 + x3424;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
          auto x3427 = x3426 + x3295;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3428 = x3250 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3429 = x3251 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3430 = x3429 + x3428;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
          auto x3431 = x3430 + x3427;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3432 = x3255 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3433 = x3260 * x49;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3434 = x3433 + x3432;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
          auto x3435 = x3434 + x3253;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:0)
          auto x3436 = x3260 * x92;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3431);
            reg = x3431;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3435);
            reg = x3435;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3436);
            reg = x3436;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3436);
            reg = x3436;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x3437 = x3266 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x3438 = x3267 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x3439 = x3438 + x3437;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x3440 = x3439 + x3288;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":38:0)
      auto x3441 = x3440 + x48;
      {
        auto [x3442, x3443, x3444, x3445] = extern_ramRead(ctx, cycle, "", {x3441, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3442);
          reg = x3442;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3443);
          reg = x3443;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3444);
          reg = x3444;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3445);
          reg = x3445;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3446 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3446 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3447 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3447 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3448 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3448 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3449 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x3449 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3441);
        reg = x3441;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3446);
        reg = x3446;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3447);
        reg = x3447;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3448);
        reg = x3448;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3449);
        reg = x3449;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x3450 = x3249 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x3451 = x3450 + x3275;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":39:0)
      auto x3452 = x3451 + x48;
      {
        auto [x3453, x3454, x3455, x3456] = extern_ramRead(ctx, cycle, "", {x3452, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3453);
          reg = x3453;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3454);
          reg = x3454;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3455);
          reg = x3455;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3456);
          reg = x3456;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3457 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3457 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3458 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3458 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3459 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3459 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3460 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x3460 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3452);
        reg = x3452;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3457);
        reg = x3457;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3458);
        reg = x3458;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3459);
        reg = x3459;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3460);
        reg = x3460;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3461 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3461 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3462 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3462 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3463 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3463 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3464 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3464 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x3465 = x3280 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x3466 = x3281 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x3467 = x3466 + x3465;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x3468 = x3467 + x3295;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x3469 = (x3468 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3469);
          reg = x3469;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x3470 = inv(x3468);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3470);
          reg = x3470;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3471 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x3471 != Fp::invalid());
      if (x3471 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x3468 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x3472 = x96 - x3471;
      if (x3472 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3473 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3473 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x3474 = x3468 * x3473;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x3475 = x3474 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x3475 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":47:0)
        auto x3476 = x3446 + x3461;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":48:0)
        auto x3477 = Fp(x3476.asUInt32() & x76.asUInt32());
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3478 = (x3477 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3478);
            reg = x3478;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3479 = x3477 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3480 = (x3479 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3480);
            reg = x3480;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3481 = x3477 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3482 = (x3481 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3482);
            reg = x3482;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3483 = x3477 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x3484 = (x3483 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3484);
            reg = x3484;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3485 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x3485 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3486 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x3486 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3487 = x3486 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3488 = x3485 + x3487;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x3489 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x3489 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3490 = x3489 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x3491 = x3488 + x3490;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x3492 = x3491 - x3477;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x3492 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":49:0)
        auto x3493 = Fp(x3476.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":49:0)
        auto x3494 = x3493 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3495 = Fp(x3494.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3495);
            reg = x3495;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3496 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x3496 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":50:0)
        auto x3497 = x3496 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":50:0)
        auto x3498 = x3476 - x3491;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":50:0)
        auto x3499 = x3498 - x3497;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3499);
          reg = x3499;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":52:0)
        auto x3500 = x3499 * x75;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3500);
          reg = x3500;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":53:0)
        auto x3501 = x3447 + x3462;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":53:0)
        auto x3502 = x3501 + x3496;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":54:0)
        auto x3503 = Fp(x3502.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3503);
          reg = x3503;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":55:0)
        auto x3504 = Fp(x3502.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":55:0)
        auto x3505 = x3504 * x90;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3505);
          reg = x3505;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3506 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x3506 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":56:0)
        auto x3507 = x3448 + x3463;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":56:0)
        auto x3508 = x3507 + x3506;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":57:0)
        auto x3509 = Fp(x3508.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3509);
          reg = x3509;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":58:0)
        auto x3510 = Fp(x3508.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":58:0)
        auto x3511 = x3510 * x90;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3511);
          reg = x3511;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3512 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x3512 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":59:0)
        auto x3513 = x3449 + x3464;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":59:0)
        auto x3514 = x3513 + x3512;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":60:0)
        auto x3515 = Fp(x3514.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3515);
          reg = x3515;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":61:0)
        auto x3516 = Fp(x3514.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":61:0)
        auto x3517 = x3516 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3517);
          reg = x3517;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":62:0)
        auto x3518 = Fp(x3514.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":62:0)
        auto x3519 = x3518 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x3520 = Fp(x3519.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3520);
            reg = x3520;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x3521 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3521 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":65:0)
      auto x3522 = x3521 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x3523 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x3523 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":65:0)
      auto x3524 = x3523 - x3522;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":65:0)
      if (x3524 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:65");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x3525 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x3525 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x3526 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x3526 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x3527 = x3526 * x93;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x3528 = x3525 + x3527;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x3529 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x3529 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x3530 = x3529 * x76;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x3531 = x3528 + x3530;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x3532 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x3532 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":67:0)
      auto x3533 = x3532 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":67:0)
      auto x3534 = x3533 + x3523;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":67:0)
      auto x3535 = x3534 + x3531;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":67:0)
      auto x3536 = x3446 + x3461;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":67:0)
      auto x3537 = x3536 - x3535;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":67:0)
      if (x3537 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:67");
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x3538 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x3538 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x3539 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x3539 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:0)
      auto x3540 = x3539 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:0)
      auto x3541 = x3540 + x3538;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:0)
      auto x3542 = x3447 + x3462;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:0)
      auto x3543 = x3542 + x3532;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:0)
      auto x3544 = x3543 - x3541;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:0)
      if (x3544 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:69");
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x3545 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x3545 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x3546 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x3546 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:0)
      auto x3547 = x3546 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:0)
      auto x3548 = x3547 + x3545;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:0)
      auto x3549 = x3448 + x3463;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:0)
      auto x3550 = x3549 + x3539;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:0)
      auto x3551 = x3550 - x3548;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:0)
      if (x3551 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:71");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3552 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3552 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3553 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3553 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:0)
      auto x3554 = x3553 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x3555 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x3555 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:0)
      auto x3556 = x3555 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:0)
      auto x3557 = x3556 + x3554;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:0)
      auto x3558 = x3557 + x3552;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:0)
      auto x3559 = x3449 + x3464;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:0)
      auto x3560 = x3559 + x3546;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:0)
      auto x3561 = x3560 - x3558;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:0)
      if (x3561 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:73");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":76:0)
      auto x3562 = x93 - x3553;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":76:0)
      auto x3563 = x96 - x3553;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":76:0)
      auto x3564 = x3553 * x3563;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":76:0)
      auto x3565 = x3564 * x3562;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":76:0)
      if (x3565 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:76");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":80:0)
      auto x3566 = x3538 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":79:0)
      auto x3567 = x3545 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":79:0)
      auto x3568 = x3552 * x36;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":79:0)
      auto x3569 = x3553 * x79;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":79:0)
      auto x3570 = x3569 + x3568;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":79:0)
      auto x3571 = x3570 + x3567;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":80:0)
      auto x3572 = x3571 + x3566;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":80:0)
      auto x3573 = x3572 + x3521;
      {
        auto [x3574, x3575, x3576, x3577] = extern_ramRead(ctx, cycle, "", {x3573, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3574);
          reg = x3574;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3575);
          reg = x3575;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3576);
          reg = x3576;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3577);
          reg = x3577;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3578 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x3578 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3579 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x3579 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3580 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x3580 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3581 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x3581 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3573);
        reg = x3573;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3578);
        reg = x3578;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3579);
        reg = x3579;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3580);
        reg = x3580;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3581);
        reg = x3581;
      }
      extern_log(ctx, cycle, "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, Addr = %10x, lowBits = %u, loaded = %w", {x3461, x3462, x3463, x3464, x3440, x3446, x3447, x3448, x3449, x3451, x3457, x3458, x3459, x3460, x3573, x3531, x3578, x3579, x3580, x3581});
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":92:0)
      auto x3582 = x959 + x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x3583 = x3582 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x3584 = Fp(x3583.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3584);
          reg = x3584;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x3585 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x3585 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x3586 = x3583 - x3585;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x3587 = x3586 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x3588 = Fp(x3587.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3588);
          reg = x3588;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x3589 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x3589 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x3590 = x3587 - x3589;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x3591 = x3590 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x3592 = Fp(x3591.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3592);
          reg = x3592;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x3593 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x3593 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x3594 = x3591 - x3593;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x3595 = x3594 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x3596 = Fp(x3595.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3596);
          reg = x3596;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3597 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x3597 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x3598 = x3595 - x3597;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x3599 = x3598 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3599);
        reg = x3599;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3600 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x3600 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x3601 = x96 - x3600;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x3602 = x3600 * x3601;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3602);
        reg = x3602;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x3603 = x93 - x3600;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x3604 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x3604 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x3605 = x3604 * x3603;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x3605 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":93:0)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x62);
        reg = x62;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0))
      auto x3606 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3606 != Fp::invalid());
      if (x3606 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0))
          auto x3607 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3607 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          auto x3608 = x3607 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          if (x3608 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0))
          auto x3609 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3609 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          auto x3610 = x3609 + x3526;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          auto x3611 = x3610 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          if (x3611 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0))
        auto x3612 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3612 != Fp::invalid());
        if (x3612 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3613 = Fp(x3578.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3613);
              reg = x3613;
            }
          }
        }
        if (x3525 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3614 = Fp(x3579.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3614);
              reg = x3614;
            }
          }
        }
        if (x3526 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3615 = Fp(x3580.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3615);
              reg = x3615;
            }
          }
        }
        if (x3529 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3616 = Fp(x3581.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3616);
              reg = x3616;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
          auto x3617 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3617 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          auto x3618 = Fp(x3617.asUInt32() & x61.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          auto x3619 = x3618 * x60;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3619);
            reg = x3619;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          auto x3620 = Fp(x3617.asUInt32() & x50.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          auto x3621 = x3620 * x93;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3621);
            reg = x3621;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3622 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3622 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3623 = x96 - x3622;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3624 = x3622 * x3623;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        if (x3624 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3625 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3625 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3626 = x3625 * x54;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3627 = x3622 * x61;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3628 = x3627 + x3626;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3629 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3629 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3630 = x3629 - x3628;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        if (x3630 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3631 = x3622 * x92;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3632 = x3612 * x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3633 = x3525 * x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3634 = x3632 + x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3635 = x3526 * x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3636 = x3634 + x3635;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3637 = x3529 * x3581;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3638 = x3636 + x3637;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3638);
          reg = x3638;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3631);
          reg = x3631;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3631);
          reg = x3631;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3631);
          reg = x3631;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3639 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3639 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3640 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3640 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3641 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3641 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3642 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3642 != Fp::invalid());
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", {x3631, x3639, x3640, x3641, x3642});
        if (x3472 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
          auto x3643 = x3468 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3639);
            reg = x3639;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3640);
            reg = x3640;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3641);
            reg = x3641;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3642);
            reg = x3642;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3643, x3639, x3640, x3641, x3642, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3644 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3644 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3645 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3645 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3646 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3646 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3647 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3647 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3643);
            reg = x3643;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3644);
            reg = x3644;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3645);
            reg = x3645;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3646);
            reg = x3646;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3647);
            reg = x3647;
          }
        }
        if (x3471 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        auto x3648 = x3294 - x76;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        if (x3648 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:0)
        if (x3286 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3649 = x3250 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3650 = x3251 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3651 = x3650 + x3649;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3652 = x3651 + x3451;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3653 = x3255 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3654 = x3260 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3655 = x3654 + x3653;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3656 = x3655 + x3253;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x3657 = x3260 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3652);
          reg = x3652;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3656);
          reg = x3656;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3657);
          reg = x3657;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3657);
          reg = x3657;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0))
      auto x3658 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3658 != Fp::invalid());
      if (x3658 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0))
          auto x3659 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3659 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          auto x3660 = x3659 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          if (x3660 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        }
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0))
          auto x3661 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3661 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          auto x3662 = x3661 + x3526;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          auto x3663 = x3662 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          if (x3663 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0))
        auto x3664 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3664 != Fp::invalid());
        if (x3664 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3665 = Fp(x3579.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3665);
              reg = x3665;
            }
          }
        }
        if (x3526 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3666 = Fp(x3581.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3666);
              reg = x3666;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
          auto x3667 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3667 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          auto x3668 = Fp(x3667.asUInt32() & x61.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          auto x3669 = x3668 * x60;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3669);
            reg = x3669;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          auto x3670 = Fp(x3667.asUInt32() & x50.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          auto x3671 = x3670 * x93;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3671);
            reg = x3671;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3672 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3672 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3673 = x96 - x3672;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3674 = x3672 * x3673;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        if (x3674 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3675 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3675 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3676 = x3675 * x54;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3677 = x3672 * x61;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3678 = x3677 + x3676;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3679 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3679 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3680 = x3679 - x3678;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        if (x3680 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3681 = x3672 * x92;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3682 = x3664 * x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3683 = x3526 * x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3684 = x3682 + x3683;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3685 = x3664 * x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3686 = x3526 * x3581;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3687 = x3685 + x3686;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3684);
          reg = x3684;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3687);
          reg = x3687;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3681);
          reg = x3681;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3681);
          reg = x3681;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3688 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3688 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3689 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3689 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3690 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3690 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3691 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3691 != Fp::invalid());
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", {x3681, x3688, x3689, x3690, x3691});
        if (x3472 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
          auto x3692 = x3468 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3688);
            reg = x3688;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3689);
            reg = x3689;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3690);
            reg = x3690;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3691);
            reg = x3691;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3692, x3688, x3689, x3690, x3691, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3693 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3693 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3694 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3694 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3695 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3695 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3696 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3696 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3692);
            reg = x3692;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3693);
            reg = x3693;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3694);
            reg = x3694;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3695);
            reg = x3695;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3696);
            reg = x3696;
          }
        }
        if (x3471 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3697 = x3294 - x76;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        if (x3697 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        auto x3698 = x3286 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:0)
        if (x3698 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3699 = x3250 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3700 = x3251 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3701 = x3700 + x3699;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3702 = x3701 + x3451;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3703 = x3255 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3704 = x3260 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3705 = x3704 + x3703;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3706 = x3705 + x3253;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x3707 = x3260 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3702);
          reg = x3702;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3706);
          reg = x3706;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3707);
          reg = x3707;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3707);
          reg = x3707;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0))
      auto x3708 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3708 != Fp::invalid());
      if (x3708 != 0) {
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0))
          auto x3709 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3709 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          auto x3710 = x3709 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          if (x3710 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0))
          auto x3711 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3711 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          auto x3712 = x3711 + x3526;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          auto x3713 = x3712 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          if (x3713 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0))
        auto x3714 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3714 != Fp::invalid());
        if (x3714 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3715 = Fp(x3581.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3715);
              reg = x3715;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
          auto x3716 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3716 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          auto x3717 = Fp(x3716.asUInt32() & x61.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          auto x3718 = x3717 * x60;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3718);
            reg = x3718;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          auto x3719 = Fp(x3716.asUInt32() & x50.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          auto x3720 = x3719 * x93;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3720);
            reg = x3720;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3721 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3721 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3722 = x96 - x3721;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3723 = x3721 * x3722;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        if (x3723 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3724 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3724 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3725 = x3724 * x54;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3726 = x3721 * x61;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3727 = x3726 + x3725;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3728 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3728 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3729 = x3728 - x3727;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        if (x3729 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3730 = x3714 * x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3731 = x3714 * x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3732 = x3714 * x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3733 = x3714 * x3581;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3730);
          reg = x3730;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3731);
          reg = x3731;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3732);
          reg = x3732;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3733);
          reg = x3733;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3734 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3734 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3735 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3735 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3736 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3736 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3737 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3737 != Fp::invalid());
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", {x95, x3734, x3735, x3736, x3737});
        if (x3472 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
          auto x3738 = x3468 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3734);
            reg = x3734;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3735);
            reg = x3735;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3736);
            reg = x3736;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3737);
            reg = x3737;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3738, x3734, x3735, x3736, x3737, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3739 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3739 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3740 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3740 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3741 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3741 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3742 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3742 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3738);
            reg = x3738;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3739);
            reg = x3739;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3740);
            reg = x3740;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3741);
            reg = x3741;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3742);
            reg = x3742;
          }
        }
        if (x3471 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3743 = x3294 - x76;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        if (x3743 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        auto x3744 = x3286 - x93;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:0)
        if (x3744 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3745 = x3250 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3746 = x3251 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3747 = x3746 + x3745;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3748 = x3747 + x3451;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3749 = x3255 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3750 = x3260 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3751 = x3750 + x3749;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3752 = x3751 + x3253;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x3753 = x3260 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3748);
          reg = x3748;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3752);
          reg = x3752;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3753);
          reg = x3753;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3753);
          reg = x3753;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0))
      auto x3754 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3754 != Fp::invalid());
      if (x3754 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0))
          auto x3755 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3755 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          auto x3756 = x3755 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          if (x3756 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0))
          auto x3757 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3757 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          auto x3758 = x3757 + x3526;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          auto x3759 = x3758 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          if (x3759 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0))
        auto x3760 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3760 != Fp::invalid());
        if (x3760 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3761 = Fp(x3578.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3761);
              reg = x3761;
            }
          }
        }
        if (x3525 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3762 = Fp(x3579.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3762);
              reg = x3762;
            }
          }
        }
        if (x3526 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3763 = Fp(x3580.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3763);
              reg = x3763;
            }
          }
        }
        if (x3529 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3764 = Fp(x3581.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3764);
              reg = x3764;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
          auto x3765 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3765 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          auto x3766 = Fp(x3765.asUInt32() & x61.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          auto x3767 = x3766 * x60;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3767);
            reg = x3767;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          auto x3768 = Fp(x3765.asUInt32() & x50.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          auto x3769 = x3768 * x93;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3769);
            reg = x3769;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3770 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3770 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3771 = x96 - x3770;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3772 = x3770 * x3771;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        if (x3772 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3773 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3773 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3774 = x3773 * x54;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3775 = x3770 * x61;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3776 = x3775 + x3774;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3777 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3777 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3778 = x3777 - x3776;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        if (x3778 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3779 = x3760 * x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3780 = x3525 * x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3781 = x3779 + x3780;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3782 = x3526 * x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3783 = x3781 + x3782;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3784 = x3529 * x3581;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3785 = x3783 + x3784;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3785);
          reg = x3785;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3786 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3786 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3787 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3787 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3788 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3788 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3789 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3789 != Fp::invalid());
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", {x95, x3786, x3787, x3788, x3789});
        if (x3472 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
          auto x3790 = x3468 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3786);
            reg = x3786;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3787);
            reg = x3787;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3788);
            reg = x3788;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3789);
            reg = x3789;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3790, x3786, x3787, x3788, x3789, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3791 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3791 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3792 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3792 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3793 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3793 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3794 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3794 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3790);
            reg = x3790;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3791);
            reg = x3791;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3792);
            reg = x3792;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3793);
            reg = x3793;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3794);
            reg = x3794;
          }
        }
        if (x3471 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3795 = x3294 - x76;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        if (x3795 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        auto x3796 = x3286 - x77;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:0)
        if (x3796 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3797 = x3250 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3798 = x3251 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3799 = x3798 + x3797;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3800 = x3799 + x3451;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3801 = x3255 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3802 = x3260 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3803 = x3802 + x3801;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3804 = x3803 + x3253;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x3805 = x3260 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3800);
          reg = x3800;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3804);
          reg = x3804;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3805);
          reg = x3805;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3805);
          reg = x3805;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0))
      auto x3806 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x3806 != Fp::invalid());
      if (x3806 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0))
          auto x3807 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3807 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          auto x3808 = x3807 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          if (x3808 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        }
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0))
          auto x3809 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3809 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          auto x3810 = x3809 + x3526;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          auto x3811 = x3810 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          if (x3811 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0))
        auto x3812 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3812 != Fp::invalid());
        if (x3812 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3813 = Fp(x3579.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3813);
              reg = x3813;
            }
          }
        }
        if (x3526 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            auto x3814 = Fp(x3581.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3814);
              reg = x3814;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
          auto x3815 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3815 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          auto x3816 = Fp(x3815.asUInt32() & x61.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          auto x3817 = x3816 * x60;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3817);
            reg = x3817;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          auto x3818 = Fp(x3815.asUInt32() & x50.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          auto x3819 = x3818 * x93;
          // loc("zirgen/components/bytes.cpp":101:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3819);
            reg = x3819;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3820 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3820 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3821 = x96 - x3820;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3822 = x3820 * x3821;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        if (x3822 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3823 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3823 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3824 = x3823 * x54;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3825 = x3820 * x61;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3826 = x3825 + x3824;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x3827 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3827 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3828 = x3827 - x3826;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        if (x3828 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3829 = x3812 * x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3830 = x3526 * x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3831 = x3829 + x3830;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3832 = x3812 * x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3833 = x3526 * x3581;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3834 = x3832 + x3833;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3831);
          reg = x3831;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3834);
          reg = x3834;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3835 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3835 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3836 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3836 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3837 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3837 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3838 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3838 != Fp::invalid());
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", {x95, x3835, x3836, x3837, x3838});
        if (x3472 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
          auto x3839 = x3468 + x48;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3835);
            reg = x3835;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3836);
            reg = x3836;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3837);
            reg = x3837;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3838);
            reg = x3838;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x3839, x3835, x3836, x3837, x3838, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3840 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3840 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3841 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3841 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3842 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3842 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x3843 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3843 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3839);
            reg = x3839;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3840);
            reg = x3840;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3841);
            reg = x3841;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3842);
            reg = x3842;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3843);
            reg = x3843;
          }
        }
        if (x3471 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3844 = x3294 - x76;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        if (x3844 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        auto x3845 = x3286 - x72;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:0)
        if (x3845 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3846 = x3250 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3847 = x3251 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3848 = x3847 + x3846;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
        auto x3849 = x3848 + x3451;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3850 = x3255 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3851 = x3260 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3852 = x3851 + x3850;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:0)
        auto x3853 = x3852 + x3253;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:0)
        auto x3854 = x3260 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3849);
          reg = x3849;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3853);
          reg = x3853;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3854);
          reg = x3854;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3854);
          reg = x3854;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0))
      auto x3855 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x3855 != Fp::invalid());
      if (x3855 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0))
          auto x3856 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3856 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
          auto x3857 = x3856 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
          if (x3857 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:81");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0))
          auto x3858 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3858 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
          auto x3859 = x3858 + x3526;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
          auto x3860 = x3859 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
          if (x3860 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:81");
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0))
        auto x3861 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3861 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3862 = x96 - x3861;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3863 = x3862 * x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3864 = x3861 * x3457;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3865 = x3864 + x3863;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3866 = x96 - x3525;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3867 = x3866 * x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3868 = x3525 * x3457;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3869 = x3868 + x3867;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3870 = x96 - x3526;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3871 = x3870 * x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3872 = x3526 * x3457;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3873 = x3872 + x3871;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3874 = x96 - x3529;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3875 = x3874 * x3581;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3876 = x3529 * x3457;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3877 = x3876 + x3875;
        extern_log(ctx, cycle, "  writeVal = %w", {x3865, x3869, x3873, x3877});
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3865);
          reg = x3865;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3869);
          reg = x3869;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3873);
          reg = x3873;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3877);
          reg = x3877;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x3573, x3865, x3869, x3873, x3877, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3878 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3878 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3879 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3879 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3880 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3880 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3881 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3881 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3573);
          reg = x3573;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3878);
          reg = x3878;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3879);
          reg = x3879;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3880);
          reg = x3880;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3881);
          reg = x3881;
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        auto x3882 = x3294 - x35;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        if (x3882 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:81");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:0)
        if (x3286 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:81");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3883 = x3250 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3884 = x3251 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3885 = x3884 + x3883;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3886 = x3885 + x3468;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3887 = x3255 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3888 = x3260 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3889 = x3888 + x3887;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3890 = x3889 + x3253;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:0)
        auto x3891 = x3260 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3886);
          reg = x3886;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3890);
          reg = x3890;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3891);
          reg = x3891;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3891);
          reg = x3891;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0))
      auto x3892 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x3892 != Fp::invalid());
      if (x3892 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0))
          auto x3893 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3893 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
          auto x3894 = x3893 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
          if (x3894 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:82");
        }
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0))
          auto x3895 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3895 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
          auto x3896 = x3895 + x3526;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
          auto x3897 = x3896 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
          if (x3897 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:82");
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0))
        auto x3898 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3898 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3899 = x96 - x3898;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3900 = x3899 * x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3901 = x3898 * x3457;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3902 = x3901 + x3900;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3903 = x96 - x3526;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3904 = x3903 * x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3905 = x3526 * x3457;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3906 = x3905 + x3904;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3907 = x3899 * x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3908 = x3898 * x3458;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3909 = x3908 + x3907;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3910 = x3903 * x3581;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3911 = x3526 * x3458;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3912 = x3911 + x3910;
        extern_log(ctx, cycle, "  writeVal = %w", {x3902, x3909, x3906, x3912});
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3902);
          reg = x3902;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3909);
          reg = x3909;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3906);
          reg = x3906;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3912);
          reg = x3912;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x3573, x3902, x3909, x3906, x3912, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3913 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3913 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3914 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3914 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3915 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3915 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3916 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3916 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3573);
          reg = x3573;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3913);
          reg = x3913;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3914);
          reg = x3914;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3915);
          reg = x3915;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3916);
          reg = x3916;
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3917 = x3294 - x35;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        if (x3917 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:82");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        auto x3918 = x3286 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:0)
        if (x3918 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:82");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3919 = x3250 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3920 = x3251 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3921 = x3920 + x3919;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3922 = x3921 + x3468;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3923 = x3255 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3924 = x3260 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3925 = x3924 + x3923;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3926 = x3925 + x3253;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:0)
        auto x3927 = x3260 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3922);
          reg = x3922;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3926);
          reg = x3926;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3927);
          reg = x3927;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3927);
          reg = x3927;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0))
      auto x3928 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x3928 != Fp::invalid());
      if (x3928 != 0) {
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0))
          auto x3929 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3929 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
          auto x3930 = x3929 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
          if (x3930 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:83");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0))
          auto x3931 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3931 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
          auto x3932 = x3931 + x3526;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
          auto x3933 = x3932 - x96;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
          if (x3933 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:83");
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0))
        auto x3934 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3934 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3935 = x96 - x3934;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3936 = x3935 * x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3937 = x3934 * x3457;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3938 = x3937 + x3936;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3939 = x3935 * x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3940 = x3934 * x3458;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3941 = x3940 + x3939;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3942 = x3935 * x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3943 = x3934 * x3459;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3944 = x3943 + x3942;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3945 = x3935 * x3581;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3946 = x3934 * x3460;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3947 = x3946 + x3945;
        extern_log(ctx, cycle, "  writeVal = %w", {x3938, x3941, x3944, x3947});
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3938);
          reg = x3938;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3941);
          reg = x3941;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3944);
          reg = x3944;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3947);
          reg = x3947;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x3573, x3938, x3941, x3944, x3947, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3948 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3948 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3949 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3949 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3950 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3950 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x3951 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3951 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3573);
          reg = x3573;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3948);
          reg = x3948;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3949);
          reg = x3949;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3950);
          reg = x3950;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3951);
          reg = x3951;
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3952 = x3294 - x35;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        if (x3952 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:83");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        auto x3953 = x3286 - x93;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:0)
        if (x3953 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:83");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3954 = x3250 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3955 = x3251 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3956 = x3955 + x3954;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:0)
        auto x3957 = x3956 + x3468;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3958 = x3255 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3959 = x3260 * x49;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3960 = x3959 + x3958;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:0)
        auto x3961 = x3960 + x3253;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:0)
        auto x3962 = x3260 * x92;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3957);
          reg = x3957;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3961);
          reg = x3961;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3962);
          reg = x3962;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3962);
          reg = x3962;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./zirgen/components/mux.h":49:0))
    auto x3963 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x3963 != Fp::invalid());
    if (x3963 != 0) {
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":20:0)
      auto x3964 = x959 * x75;
      {
        auto [x3965, x3966, x3967, x3968] = extern_ramRead(ctx, cycle, "", {x3964, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3965);
          reg = x3965;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3966);
          reg = x3966;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3967);
          reg = x3967;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3968);
          reg = x3968;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3969 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3969 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3970 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3970 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3971 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3971 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x3972 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3972 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3964);
        reg = x3964;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3969);
        reg = x3969;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3970);
        reg = x3970;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3971);
        reg = x3971;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3972);
        reg = x3972;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x3973 = Fp(x3972.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x3974 = x3973 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3974);
          reg = x3974;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x3975 = Fp(x3972.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x3976 = x3975 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3976);
          reg = x3976;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x3977 = Fp(x3972.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x3978 = x3977 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3978);
          reg = x3978;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x3979 = Fp(x3972.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x3980 = x3979 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3980);
          reg = x3980;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x3981 = Fp(x3972.asUInt32() & x71.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x3982 = x3981 * x54;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3982);
          reg = x3982;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:0)
        auto x3983 = Fp(x3972.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3983);
          reg = x3983;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x3984 = Fp(x3971.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x3985 = x3984 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3985);
          reg = x3985;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x3986 = Fp(x3971.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x3987 = x3986 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3987);
          reg = x3987;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x3988 = Fp(x3971.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x3989 = x3988 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3989);
          reg = x3989;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x3990 = Fp(x3971.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x3991 = x3990 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3991);
          reg = x3991;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:0)
        auto x3992 = Fp(x3971.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3992);
          reg = x3992;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x3993 = Fp(x3970.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x3994 = x3993 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3994);
          reg = x3994;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x3995 = Fp(x3970.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x3996 = x3995 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3996);
          reg = x3996;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x3997 = Fp(x3970.asUInt32() & x51.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x3998 = x3997 * x56;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3998);
          reg = x3998;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x3999 = Fp(x3970.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x4000 = x3999 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4000);
          reg = x4000;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:0)
        auto x4001 = Fp(x3970.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4001);
          reg = x4001;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x4002 = Fp(x3969.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x4003 = x4002 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4003);
          reg = x4003;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        auto x4004 = Fp(x3969.asUInt32() & x50.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4004);
          reg = x4004;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4005 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4005 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4006 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x4006 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4007 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4007 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4008 = x4007 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4009 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4009 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4010 = x4009 * x69;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4011 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4011 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4012 = x4011 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4013 = x4012 + x4010;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4014 = x4013 + x4008;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4015 = x4014 + x4006;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4016 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4016 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x4017 = x4016 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x4018 = x4017 + x4015;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x4019 = x4018 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x4020 = x4019 + x4005;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x4021 = x3972 - x4020;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      if (x4021 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4022 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4022 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4023 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4023 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4024 = x4023 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4025 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4025 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4026 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x4026 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4027 = x4026 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4028 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4028 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4029 = x4028 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4030 = x4029 + x4027;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4031 = x4030 + x4025;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4032 = x4031 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4033 = x4032 + x4024;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4034 = x4033 + x4022;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4035 = x3971 - x4034;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      if (x4035 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4036 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4036 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4037 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4037 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4038 = x4037 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4039 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4039 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4040 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4040 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x4041 = x4040 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x4042 = x4041 + x4039;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4043 = x4042 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4044 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4044 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4045 = x4044 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4046 = x4045 + x4043;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4047 = x4046 + x4038;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4048 = x4047 + x4036;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4049 = x3970 - x4048;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      if (x4049 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x4050 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4050 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4051 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4051 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x4052 = x4051 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x4053 = x4052 + x4050;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x4054 = x3969 - x4053;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      if (x4054 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        auto x4055 = extern_getMinor(ctx, cycle, "", {x3969, x3970, x3971, x3972});
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4056 = (x4055 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4056);
            reg = x4056;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4057 = x4055 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4058 = (x4057 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4058);
            reg = x4058;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4059 = x4055 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4060 = (x4059 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4060);
            reg = x4060;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4061 = x4055 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4062 = (x4061 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4062);
            reg = x4062;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4063 = x4055 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4064 = (x4063 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4064);
            reg = x4064;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4065 = x4055 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4066 = (x4065 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4066);
            reg = x4066;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4067 = x4055 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4068 = (x4067 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4068);
            reg = x4068;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4069 = x4055 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4070 = (x4069 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4070);
            reg = x4070;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4071 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4071 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4072 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4072 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4073 = x4072 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4074 = x4071 + x4073;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4075 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4075 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4076 = x4075 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4077 = x4074 + x4076;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4078 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x4078 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4079 = x4078 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4080 = x4077 + x4079;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4081 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x4081 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4082 = x4081 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4083 = x4080 + x4082;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4084 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x4084 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4085 = x4084 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4086 = x4083 + x4085;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4087 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x4087 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4088 = x4087 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4089 = x4086 + x4088;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x4090 = x4089 - x4055;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x4090 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      extern_log(ctx, cycle, "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", {x95, x95, x95, x95, x95});
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:0))
      auto x4091 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4091 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:0))
      auto x4092 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4092 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:0)
      auto x4093 = x4091 + x4092;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:0))
      auto x4094 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4094 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:0)
      auto x4095 = x4093 + x4094;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:0))
      auto x4096 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4096 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:0))
      auto x4097 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4097 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:0)
      auto x4098 = x4096 + x4097;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x4099 = x4022 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x4100 = x4023 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x4101 = x4100 + x4099;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x4102 = x4101 + x4044;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":54:0)
      auto x4103 = x4102 + x48;
      {
        auto [x4104, x4105, x4106, x4107] = extern_ramRead(ctx, cycle, "", {x4103, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4104);
          reg = x4104;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4105);
          reg = x4105;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4106);
          reg = x4106;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4107);
          reg = x4107;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4108 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4108 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4109 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4109 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4110 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4110 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4111 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4111 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4103);
        reg = x4103;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4108);
        reg = x4108;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4109);
        reg = x4109;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4110);
        reg = x4110;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4111);
        reg = x4111;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x4112 = x4005 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x4113 = x4112 + x4031;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":55:0)
      auto x4114 = x4113 + x48;
      {
        auto [x4115, x4116, x4117, x4118] = extern_ramRead(ctx, cycle, "", {x4114, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4115);
          reg = x4115;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4116);
          reg = x4116;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4117);
          reg = x4117;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4118);
          reg = x4118;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4119 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4119 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4120 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4120 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4121 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4121 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4122 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4122 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4114);
        reg = x4114;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4119);
        reg = x4119;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4120);
        reg = x4120;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4121);
        reg = x4121;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4122);
        reg = x4122;
      }
      extern_log(ctx, cycle, "  rs1=x%u -> %w, rs2=x%u -> %w", {x4102, x4108, x4109, x4110, x4111, x4113, x4119, x4120, x4121, x4122});
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
      auto x4123 = x4006 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
      auto x4124 = x4007 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
      auto x4125 = x4124 + x4123;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
      auto x4126 = x4125 + x4113;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":61:0)
      auto x4127 = x96 - x4097;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4128 = x4127 * x4119;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4129 = x4097 * x4126;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4130 = x4129 + x4128;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":63:0)
        auto x4131 = Fp(x4130.asUInt32() & x34.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":63:0)
        auto x4132 = x4131 * x52;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4132);
          reg = x4132;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":64:0)
        auto x4133 = Fp(x4130.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":64:0)
        auto x4134 = x4133 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4134);
          reg = x4134;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":65:0)
        auto x4135 = Fp(x4130.asUInt32() & x33.asUInt32());
        {
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4136 = Fp(x4135.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4136);
            reg = x4136;
          }
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4137 = Fp(x4135.asUInt32() & x93.asUInt32());
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4138 = x4137 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4138);
            reg = x4138;
          }
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4139 = Fp(x4135.asUInt32() & x77.asUInt32());
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4140 = x4139 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4140);
            reg = x4140;
          }
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4141 = Fp(x4135.asUInt32() & x69.asUInt32());
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4142 = x4141 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4142);
            reg = x4142;
          }
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4143 = Fp(x4135.asUInt32() & x62.asUInt32());
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4144 = x4143 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4144);
            reg = x4144;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4145 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x4145 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4146 = x4145 + x96;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4147 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x4147 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4148 = x4147 * x76;
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4149 = x4148 + x96;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4150 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x4150 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4151 = x4150 * x73;
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4152 = x4151 + x96;
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4153 = x4152 * x4149;
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4154 = x4153 * x4146;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4155 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x4155 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4156 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x4156 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":196:0)
          auto x4157 = x4156 * x93;
          // loc("zirgen/components/u32.cpp":196:0)
          auto x4158 = x4157 + x4155;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4159 = (x4158 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4160 = x4159 * x4154;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4161 = x4158 - x96;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4162 = (x4161 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4163 = x4162 * x4154;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4164 = x4158 - x93;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4165 = (x4164 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4166 = x4165 * x4154;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4167 = x4158 - x76;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4168 = (x4167 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4169 = x4168 * x4154;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4160);
            reg = x4160;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4163);
            reg = x4163;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4166);
            reg = x4166;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4169);
            reg = x4169;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4170 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x4170 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4171 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x4171 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4172 = x4171 * x93;
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4173 = x4170 + x4172;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4174 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4174 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4175 = x4174 * x77;
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4176 = x4173 + x4175;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4177 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x4177 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4178 = x4177 * x69;
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4179 = x4176 + x4178;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4180 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x4180 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4181 = x4180 * x62;
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4182 = x4179 + x4181;
        // loc("zirgen/components/u32.cpp":201:0)
        auto x4183 = x4182 - x4135;
        // loc("zirgen/components/u32.cpp":201:0)
        if (x4183 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:201");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4184 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4184 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4185 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4185 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4186 = x4185 * x93;
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4187 = x4184 + x4186;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4188 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x4188 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4189 = x4188 * x77;
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4190 = x4187 + x4189;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4191 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x4191 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4192 = x4191 * x69;
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4193 = x4190 + x4192;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4194 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x4194 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4195 = x4194 * x62;
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4196 = x4193 + x4195;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4197 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4197 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":67:0)
      auto x4198 = x4197 * x59;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4199 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4199 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":67:0)
      auto x4200 = x4199 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":67:0)
      auto x4201 = x4200 + x4198;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":67:0)
      auto x4202 = x4201 + x4196;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":67:0)
      auto x4203 = x4130 - x4202;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":67:0)
      if (x4203 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/multiply.cpp:67");
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":70:0)
      auto x4204 = x96 - x4098;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4205 = x4204 * x4119;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4206 = x4204 * x4120;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4207 = x4204 * x4121;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4208 = x4204 * x4122;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4209 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x4209 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4210 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x4210 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4211 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x4211 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4212 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x4212 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4213 = x4098 * x4209;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4214 = x4098 * x4210;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4215 = x4098 * x4211;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4216 = x4098 * x4212;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4217 = x4213 + x4205;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4218 = x4214 + x4206;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4219 = x4215 + x4207;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4220 = x4216 + x4208;
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x4221 = Fp(x4111.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x4222 = x4221 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4222);
          reg = x4222;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x4223 = Fp(x4111.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x4224 = x4223 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4224);
          reg = x4224;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4225 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4225 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x4226 = x4225 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4227 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x4227 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x4228 = x4227 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x4229 = x4228 + x4226;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x4230 = x4111 - x4229;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x4230 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x4231 = Fp(x4220.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x4232 = x4231 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4232);
          reg = x4232;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x4233 = Fp(x4220.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x4234 = x4233 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4234);
          reg = x4234;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4235 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4235 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x4236 = x4235 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4237 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x4237 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x4238 = x4237 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x4239 = x4238 + x4236;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x4240 = x4220 - x4239;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x4240 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/components/u32.cpp":219:0)
      auto x4241 = x4091 * x4237;
      // loc("zirgen/components/u32.cpp":219:0)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4241);
        reg = x4241;
      }
      // loc("zirgen/components/u32.cpp":220:0)
      auto x4242 = x4093 * x4227;
      // loc("zirgen/components/u32.cpp":220:0)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4242);
        reg = x4242;
      }
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4243 = x4108 * x4217;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4244 = x4109 * x4217;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4245 = x4108 * x4218;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4246 = x4244 + x4245;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4247 = x4246 * x91;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4248 = x4243 + x4247;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4249 = Fp(x4248.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4249);
          reg = x4249;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4250 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4250 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4251 = x4248 - x4250;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4252 = x4251 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4253 = Fp(x4252.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4253);
          reg = x4253;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4254 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4254 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4255 = x4252 - x4254;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4256 = x4255 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4257 = Fp(x4256.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4257);
          reg = x4257;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4258 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4258 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4259 = x4256 - x4258;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4260 = x4259 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4260);
        reg = x4260;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4261 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4261 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":225:0)
      auto x4262 = x4261 * x91;
      // loc("zirgen/components/u32.cpp":225:0)
      auto x4263 = x4258 + x4262;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4264 = x4110 * x4217;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4265 = x4109 * x4218;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4266 = x4264 + x4265;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4267 = x4108 * x4219;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4268 = x4266 + x4267;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4269 = x4263 + x4268;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4270 = x4111 * x4217;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4271 = x4110 * x4218;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4272 = x4270 + x4271;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4273 = x4109 * x4219;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4274 = x4272 + x4273;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4275 = x4108 * x4220;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4276 = x4274 + x4275;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4277 = x4276 * x91;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4278 = x4269 + x4277;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4279 = Fp(x4278.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4279);
          reg = x4279;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4280 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x4280 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4281 = x4278 - x4280;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4282 = x4281 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4283 = Fp(x4282.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4283);
          reg = x4283;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4284 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x4284 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4285 = x4282 - x4284;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4286 = x4285 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4287 = Fp(x4286.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4287);
          reg = x4287;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4288 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4288 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4289 = x4286 - x4288;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4290 = x4289 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4290);
        reg = x4290;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4291 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4291 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":225:0)
      auto x4292 = x4291 * x91;
      // loc("zirgen/components/u32.cpp":225:0)
      auto x4293 = x4288 + x4292;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4294 = x4111 * x4218;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4295 = x4110 * x4219;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4296 = x4294 + x4295;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4297 = x4109 * x4220;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4298 = x4296 + x4297;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4299 = x4293 + x4298;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4300 = x4111 * x4219;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4301 = x4110 * x4220;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4302 = x4300 + x4301;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4303 = x4302 * x91;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4304 = x4299 + x4303;
      // loc("zirgen/components/u32.cpp":241:0)
      auto x4305 = x4218 * x91;
      // loc("zirgen/components/u32.cpp":241:0)
      auto x4306 = x4217 + x4305;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x4307 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x4307 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":241:0)
      auto x4308 = x4307 * x4306;
      // loc("zirgen/components/u32.cpp":240:0)
      auto x4309 = x4109 * x91;
      // loc("zirgen/components/u32.cpp":240:0)
      auto x4310 = x4108 + x4309;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x4311 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x4311 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":240:0)
      auto x4312 = x4311 * x4310;
      // loc("zirgen/components/u32.cpp":240:0)
      auto x4313 = x4304 + x32;
      // loc("zirgen/components/u32.cpp":240:0)
      auto x4314 = x4313 - x4312;
      // loc("zirgen/components/u32.cpp":241:0)
      auto x4315 = x4314 - x4308;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4316 = Fp(x4315.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4316);
          reg = x4316;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4317 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4317 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4318 = x4315 - x4317;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4319 = x4318 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4320 = Fp(x4319.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4320);
          reg = x4320;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4321 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4321 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4322 = x4319 - x4321;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4323 = x4322 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4324 = Fp(x4323.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4324);
          reg = x4324;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4325 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4325 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4326 = x4323 - x4325;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4327 = x4326 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4327);
        reg = x4327;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4328 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4328 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":225:0)
      auto x4329 = x4328 * x91;
      // loc("zirgen/components/u32.cpp":225:0)
      auto x4330 = x4325 + x4329;
      // loc("zirgen/components/u32.cpp":235:0)
      auto x4331 = x4111 * x4220;
      // loc("zirgen/components/u32.cpp":237:0)
      auto x4332 = x4330 + x4331;
      // loc("zirgen/components/u32.cpp":245:0)
      auto x4333 = x4220 * x91;
      // loc("zirgen/components/u32.cpp":245:0)
      auto x4334 = x4219 + x4333;
      // loc("zirgen/components/u32.cpp":245:0)
      auto x4335 = x4307 * x4334;
      // loc("zirgen/components/u32.cpp":244:0)
      auto x4336 = x4111 * x91;
      // loc("zirgen/components/u32.cpp":244:0)
      auto x4337 = x4110 + x4336;
      // loc("zirgen/components/u32.cpp":244:0)
      auto x4338 = x4311 * x4337;
      // loc("zirgen/components/u32.cpp":244:0)
      auto x4339 = x4332 + x31;
      // loc("zirgen/components/u32.cpp":244:0)
      auto x4340 = x4339 - x4338;
      // loc("zirgen/components/u32.cpp":245:0)
      auto x4341 = x4340 - x4335;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4342 = Fp(x4341.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4342);
          reg = x4342;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4343 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4343 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4344 = x4341 - x4343;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4345 = x4344 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4346 = Fp(x4345.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4346);
          reg = x4346;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4347 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4347 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4348 = x4345 - x4347;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4349 = x4348 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4349);
        reg = x4349;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x4350 = x4036 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x4351 = x4037 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x4352 = x4351 + x4350;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x4353 = x4352 + x4051;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x4354 = (x4353 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4354);
          reg = x4354;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x4355 = inv(x4353);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4355);
          reg = x4355;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4356 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x4356 != Fp::invalid());
      if (x4356 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x4353 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x4357 = x96 - x4356;
      if (x4357 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4358 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x4358 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x4359 = x4353 * x4358;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x4360 = x4359 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x4360 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":78:0)
      auto x4361 = x959 + x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x4362 = x4361 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4363 = Fp(x4362.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4363);
          reg = x4363;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4364 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4364 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4365 = x4362 - x4364;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4366 = x4365 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4367 = Fp(x4366.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4367);
          reg = x4367;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4368 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4368 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4369 = x4366 - x4368;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4370 = x4369 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4371 = Fp(x4370.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4371);
          reg = x4371;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4372 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4372 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4373 = x4370 - x4372;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4374 = x4373 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x4375 = Fp(x4374.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4375);
          reg = x4375;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4376 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4376 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x4377 = x4374 - x4376;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x4378 = x4377 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4378);
        reg = x4378;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4379 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4379 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x4380 = x96 - x4379;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x4381 = x4379 * x4380;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4381);
        reg = x4381;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x4382 = x93 - x4379;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x4383 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4383 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x4384 = x4383 * x4382;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x4384 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":79:0)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x62);
        reg = x62;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":80:0)
      auto x4385 = x4095 * x4357;
      if (x4385 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":81:0)
        auto x4386 = x4353 + x48;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4317);
          reg = x4317;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4321);
          reg = x4321;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4343);
          reg = x4343;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4347);
          reg = x4347;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x4386, x4317, x4321, x4343, x4347, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4387 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4387 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4388 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4388 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4389 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4389 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4390 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4390 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4386);
          reg = x4386;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4387);
          reg = x4387;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4388);
          reg = x4388;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4389);
          reg = x4389;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4390);
          reg = x4390;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":83:0)
      auto x4391 = x96 - x4095;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":83:0)
      auto x4392 = x4391 * x4357;
      if (x4392 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":84:0)
        auto x4393 = x4353 + x48;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4250);
          reg = x4250;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4254);
          reg = x4254;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4280);
          reg = x4280;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4284);
          reg = x4284;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x4393, x4250, x4254, x4280, x4284, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4394 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4394 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4395 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4395 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4396 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4396 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4397 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4397 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4393);
          reg = x4393;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4394);
          reg = x4394;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4395);
          reg = x4395;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4396);
          reg = x4396;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4397);
          reg = x4397;
        }
      }
      if (x4356 != 0) {
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:0))
      auto x4398 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4398 != Fp::invalid());
      if (x4398 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:0)
        auto x4399 = x4050 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:0)
        if (x4399 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:101");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:0)
        if (x4042 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:101");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:0)
        auto x4400 = x4018 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:0)
        if (x4400 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:101");
      }
      if (x4091 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:0)
        auto x4401 = x4050 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:0)
        if (x4401 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:102");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:0)
        auto x4402 = x4042 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:0)
        if (x4402 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:102");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:0)
        auto x4403 = x4018 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:0)
        if (x4403 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:102");
      }
      if (x4092 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:0)
        auto x4404 = x4050 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:0)
        if (x4404 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:103");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:0)
        auto x4405 = x4042 - x93;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:0)
        if (x4405 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:103");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:0)
        auto x4406 = x4018 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:0)
        if (x4406 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:103");
      }
      if (x4094 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:0)
        auto x4407 = x4050 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:0)
        if (x4407 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:104");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:0)
        auto x4408 = x4042 - x76;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:0)
        if (x4408 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:104");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:0)
        auto x4409 = x4018 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:0)
        if (x4409 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:104");
      }
      if (x4096 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:0)
        auto x4410 = x4050 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:0)
        if (x4410 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:105");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:0)
        auto x4411 = x4042 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:0)
        if (x4411 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:105");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:0)
        if (x4018 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:105");
      }
      if (x4097 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:0)
        auto x4412 = x4050 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:0)
        if (x4412 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:106");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:0)
        auto x4413 = x4042 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:0)
        if (x4413 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:106");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:0)
        if (x4018 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:106");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./zirgen/components/mux.h":49:0))
    auto x4414 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x4414 != Fp::invalid());
    if (x4414 != 0) {
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":20:0)
      auto x4415 = x959 * x75;
      {
        auto [x4416, x4417, x4418, x4419] = extern_ramRead(ctx, cycle, "", {x4415, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4416);
          reg = x4416;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4417);
          reg = x4417;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4418);
          reg = x4418;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4419);
          reg = x4419;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4420 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4420 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4421 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4421 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4422 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4422 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4423 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4423 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4415);
        reg = x4415;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4420);
        reg = x4420;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4421);
        reg = x4421;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4422);
        reg = x4422;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4423);
        reg = x4423;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x4424 = Fp(x4423.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:0)
        auto x4425 = x4424 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4425);
          reg = x4425;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x4426 = Fp(x4423.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:0)
        auto x4427 = x4426 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4427);
          reg = x4427;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x4428 = Fp(x4423.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:0)
        auto x4429 = x4428 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4429);
          reg = x4429;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x4430 = Fp(x4423.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:0)
        auto x4431 = x4430 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4431);
          reg = x4431;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x4432 = Fp(x4423.asUInt32() & x71.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:0)
        auto x4433 = x4432 * x54;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4433);
          reg = x4433;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:0)
        auto x4434 = Fp(x4423.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4434);
          reg = x4434;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x4435 = Fp(x4422.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:0)
        auto x4436 = x4435 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4436);
          reg = x4436;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x4437 = Fp(x4422.asUInt32() & x58.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:0)
        auto x4438 = x4437 * x57;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4438);
          reg = x4438;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x4439 = Fp(x4422.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:0)
        auto x4440 = x4439 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4440);
          reg = x4440;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x4441 = Fp(x4422.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:0)
        auto x4442 = x4441 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4442);
          reg = x4442;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:0)
        auto x4443 = Fp(x4422.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4443);
          reg = x4443;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x4444 = Fp(x4421.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:0)
        auto x4445 = x4444 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4445);
          reg = x4445;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x4446 = Fp(x4421.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:0)
        auto x4447 = x4446 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4447);
          reg = x4447;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x4448 = Fp(x4421.asUInt32() & x51.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:0)
        auto x4449 = x4448 * x56;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4449);
          reg = x4449;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x4450 = Fp(x4421.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:0)
        auto x4451 = x4450 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4451);
          reg = x4451;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:0)
        auto x4452 = Fp(x4421.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4452);
          reg = x4452;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x4453 = Fp(x4420.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:0)
        auto x4454 = x4453 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4454);
          reg = x4454;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        auto x4455 = Fp(x4420.asUInt32() & x50.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4455);
          reg = x4455;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4456 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4456 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4457 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x4457 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4458 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4458 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4459 = x4458 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4460 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4460 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4461 = x4460 * x69;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4462 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4462 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4463 = x4462 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4464 = x4463 + x4461;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4465 = x4464 + x4459;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:0)
      auto x4466 = x4465 + x4457;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4467 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4467 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x4468 = x4467 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:0)
      auto x4469 = x4468 + x4466;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x4470 = x4469 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x4471 = x4470 + x4456;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      auto x4472 = x4423 - x4471;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:0)
      if (x4472 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4473 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4473 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4474 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4474 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4475 = x4474 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4476 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4476 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4477 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x4477 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4478 = x4477 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4479 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4479 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4480 = x4479 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4481 = x4480 + x4478;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4482 = x4481 + x4476;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4483 = x4482 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4484 = x4483 + x4475;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4485 = x4484 + x4473;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      auto x4486 = x4422 - x4485;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:0)
      if (x4486 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4487 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4487 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4488 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4488 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4489 = x4488 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4490 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4490 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4491 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4491 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x4492 = x4491 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:0)
      auto x4493 = x4492 + x4490;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4494 = x4493 * x62;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4495 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4495 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4496 = x4495 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4497 = x4496 + x4494;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4498 = x4497 + x4489;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4499 = x4498 + x4487;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      auto x4500 = x4421 - x4499;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:0)
      if (x4500 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x4501 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4501 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4502 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4502 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x4503 = x4502 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x4504 = x4503 + x4501;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      auto x4505 = x4420 - x4504;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:0)
      if (x4505 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        auto x4506 = extern_getMinor(ctx, cycle, "", {x4420, x4421, x4422, x4423});
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4507 = (x4506 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4507);
            reg = x4507;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4508 = x4506 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4509 = (x4508 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4509);
            reg = x4509;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4510 = x4506 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4511 = (x4510 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4511);
            reg = x4511;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4512 = x4506 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4513 = (x4512 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4513);
            reg = x4513;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4514 = x4506 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4515 = (x4514 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4515);
            reg = x4515;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4516 = x4506 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4517 = (x4516 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4517);
            reg = x4517;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4518 = x4506 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4519 = (x4518 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4519);
            reg = x4519;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4520 = x4506 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x4521 = (x4520 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4521);
            reg = x4521;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4522 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4522 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4523 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4523 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4524 = x4523 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4525 = x4522 + x4524;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4526 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4526 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4527 = x4526 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4528 = x4525 + x4527;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4529 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x4529 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4530 = x4529 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4531 = x4528 + x4530;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4532 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x4532 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4533 = x4532 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4534 = x4531 + x4533;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4535 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x4535 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4536 = x4535 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4537 = x4534 + x4536;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4538 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x4538 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4539 = x4538 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x4540 = x4537 + x4539;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x4541 = x4540 - x4506;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x4541 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:0))
      auto x4542 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4542 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:0))
      auto x4543 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4543 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:0)
      auto x4544 = x4542 + x4543;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:0))
      auto x4545 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4545 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:0)
      auto x4546 = x4543 + x4545;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:0))
      auto x4547 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4547 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0))
      auto x4548 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4548 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0)
      auto x4549 = x4547 + x4548;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0)
      auto x4550 = x4544 + x4548;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:0))
      auto x4551 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4551 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:0)
      auto x4552 = x4549 + x4551;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0))
      auto x4553 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4553 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
      auto x4554 = x4551 + x4553;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
      auto x4555 = x4552 + x4553;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
      auto x4556 = x4550 + x4553;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
      auto x4557 = x4548 + x4553;
      // loc("./zirgen/components/bits.h":27:0)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4556);
        reg = x4556;
      }
      // loc("./zirgen/components/bits.h":27:0)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4557);
        reg = x4557;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4558 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x4558 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4559 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x4559 != Fp::invalid());
      extern_log(ctx, cycle, "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", {x4554, x4555, x4559, x4558, x4546});
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x4560 = x4473 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x4561 = x4474 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x4562 = x4561 + x4560;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:0)
      auto x4563 = x4562 + x4495;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":56:0)
      auto x4564 = x4563 + x48;
      {
        auto [x4565, x4566, x4567, x4568] = extern_ramRead(ctx, cycle, "", {x4564, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4565);
          reg = x4565;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4566);
          reg = x4566;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4567);
          reg = x4567;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4568);
          reg = x4568;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4569 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4569 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4570 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4570 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4571 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4571 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4572 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4572 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4564);
        reg = x4564;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4569);
        reg = x4569;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4570);
        reg = x4570;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4571);
        reg = x4571;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4572);
        reg = x4572;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x4573 = x4456 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:0)
      auto x4574 = x4573 + x4482;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":57:0)
      auto x4575 = x4574 + x48;
      {
        auto [x4576, x4577, x4578, x4579] = extern_ramRead(ctx, cycle, "", {x4575, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4576);
          reg = x4576;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4577);
          reg = x4577;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4578);
          reg = x4578;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4579);
          reg = x4579;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4580 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4580 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4581 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4581 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4582 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4582 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4583 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4583 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4575);
        reg = x4575;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4580);
        reg = x4580;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4581);
        reg = x4581;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4582);
        reg = x4582;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4583);
        reg = x4583;
      }
      extern_log(ctx, cycle, "  rs1=x%u -> %w, rs2=x%u -> %w", {x4563, x4569, x4570, x4571, x4572, x4574, x4580, x4581, x4582, x4583});
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
      auto x4584 = x4457 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
      auto x4585 = x4458 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
      auto x4586 = x4585 + x4584;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:0)
      auto x4587 = x4586 + x4574;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":63:0)
      auto x4588 = x96 - x4554;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4589 = x4588 * x4580;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4590 = x4554 * x4587;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4591 = x4590 + x4589;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":65:0)
        auto x4592 = Fp(x4591.asUInt32() & x34.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":65:0)
        auto x4593 = x4592 * x52;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4593);
          reg = x4593;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":66:0)
        auto x4594 = Fp(x4591.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":66:0)
        auto x4595 = x4594 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4595);
          reg = x4595;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":67:0)
        auto x4596 = Fp(x4591.asUInt32() & x33.asUInt32());
        {
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4597 = Fp(x4596.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4597);
            reg = x4597;
          }
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4598 = Fp(x4596.asUInt32() & x93.asUInt32());
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4599 = x4598 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4599);
            reg = x4599;
          }
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4600 = Fp(x4596.asUInt32() & x77.asUInt32());
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4601 = x4600 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4601);
            reg = x4601;
          }
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4602 = Fp(x4596.asUInt32() & x69.asUInt32());
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4603 = x4602 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4603);
            reg = x4603;
          }
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4604 = Fp(x4596.asUInt32() & x62.asUInt32());
          // loc("zirgen/components/u32.cpp":193:0)
          auto x4605 = x4604 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4605);
            reg = x4605;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4606 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x4606 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4607 = x4606 + x96;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4608 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x4608 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4609 = x4608 * x76;
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4610 = x4609 + x96;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4611 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x4611 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4612 = x4611 * x73;
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4613 = x4612 + x96;
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4614 = x4613 * x4610;
          // loc("zirgen/components/u32.cpp":195:0)
          auto x4615 = x4614 * x4607;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4616 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x4616 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x4617 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x4617 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":196:0)
          auto x4618 = x4617 * x93;
          // loc("zirgen/components/u32.cpp":196:0)
          auto x4619 = x4618 + x4616;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4620 = (x4619 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4621 = x4620 * x4615;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4622 = x4619 - x96;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4623 = (x4622 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4624 = x4623 * x4615;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4625 = x4619 - x93;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4626 = (x4625 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4627 = x4626 * x4615;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4628 = x4619 - x76;
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4629 = (x4628 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:0)
          auto x4630 = x4629 * x4615;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4621);
            reg = x4621;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4624);
            reg = x4624;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4627);
            reg = x4627;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4630);
            reg = x4630;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4631 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x4631 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4632 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x4632 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4633 = x4632 * x93;
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4634 = x4631 + x4633;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4635 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4635 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4636 = x4635 * x77;
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4637 = x4634 + x4636;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4638 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x4638 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4639 = x4638 * x69;
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4640 = x4637 + x4639;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4641 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x4641 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4642 = x4641 * x62;
        // loc("zirgen/components/u32.cpp":207:0)
        auto x4643 = x4640 + x4642;
        // loc("zirgen/components/u32.cpp":201:0)
        auto x4644 = x4643 - x4596;
        // loc("zirgen/components/u32.cpp":201:0)
        if (x4644 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:201");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4645 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4645 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4646 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4646 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4647 = x4646 * x93;
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4648 = x4645 + x4647;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4649 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x4649 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4650 = x4649 * x77;
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4651 = x4648 + x4650;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4652 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x4652 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4653 = x4652 * x69;
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4654 = x4651 + x4653;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4655 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x4655 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4656 = x4655 * x62;
      // loc("zirgen/components/u32.cpp":207:0)
      auto x4657 = x4654 + x4656;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4658 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4658 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":69:0)
      auto x4659 = x4658 * x59;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4660 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4660 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":69:0)
      auto x4661 = x4660 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":69:0)
      auto x4662 = x4661 + x4659;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":69:0)
      auto x4663 = x4662 + x4657;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":69:0)
      auto x4664 = x4591 - x4663;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":69:0)
      if (x4664 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:69");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":72:0)
      auto x4665 = x96 - x4555;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4666 = x4665 * x4580;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4667 = x4665 * x4581;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4668 = x4665 * x4582;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4669 = x4665 * x4583;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4670 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x4670 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4671 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x4671 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4672 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x4672 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4673 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x4673 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4674 = x4555 * x4670;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4675 = x4555 * x4671;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4676 = x4555 * x4672;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x4677 = x4555 * x4673;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4678 = x4674 + x4666;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4679 = x4675 + x4667;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4680 = x4676 + x4668;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x4681 = x4677 + x4669;
      // loc("zirgen/components/bytes.cpp":101:0)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4678);
        reg = x4678;
      }
      // loc("zirgen/components/bytes.cpp":101:0)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4679);
        reg = x4679;
      }
      // loc("zirgen/components/bytes.cpp":101:0)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4680);
        reg = x4680;
      }
      // loc("zirgen/components/bytes.cpp":101:0)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4681);
        reg = x4681;
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x4682 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x4682 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x4683 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x4683 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x4684 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x4684 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x4685 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x4685 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":83:0)
        auto x4686 = x4559 + x4558;
        auto [x4687, x4688, x4689, x4690, x4691, x4692, x4693, x4694] = extern_divide(ctx, cycle, "", {x4569, x4570, x4571, x4572, x4682, x4683, x4684, x4685, x4686});
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4687);
          reg = x4687;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4691);
          reg = x4691;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4688);
          reg = x4688;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4692);
          reg = x4692;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4689);
          reg = x4689;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4693);
          reg = x4693;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4690);
          reg = x4690;
        }
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4694);
          reg = x4694;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4695 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4695 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4696 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4696 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4697 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4697 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4698 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4698 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4699 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4699 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4700 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x4700 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4701 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x4701 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4702 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4702 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4703 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4703 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4704 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4704 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4705 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4705 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x4706 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4706 != Fp::invalid());
      extern_log(ctx, cycle, "  numer=%w, denom=%w, quot=%w, rem=%w", {x4569, x4570, x4571, x4572, x4695, x4696, x4697, x4698, x4699, x4700, x4701, x4702, x4703, x4704, x4705, x4706});
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x4707 = x4487 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x4708 = x4488 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x4709 = x4708 + x4707;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:0)
      auto x4710 = x4709 + x4502;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x4711 = (x4710 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4711);
          reg = x4711;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x4712 = inv(x4710);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4712);
          reg = x4712;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4713 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x4713 != Fp::invalid());
      if (x4713 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x4710 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x4714 = x96 - x4713;
      if (x4714 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x4715 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x4715 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x4716 = x4710 * x4715;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x4717 = x4716 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x4717 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":94:0)
      auto x4718 = x4546 * x4714;
      if (x4718 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":96:0)
        auto x4719 = x4710 + x48;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4703);
          reg = x4703;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4704);
          reg = x4704;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4705);
          reg = x4705;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4706);
          reg = x4706;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x4719, x4703, x4704, x4705, x4706, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4720 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4720 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4721 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4721 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4722 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4722 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4723 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4723 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4719);
          reg = x4719;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4720);
          reg = x4720;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4721);
          reg = x4721;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4722);
          reg = x4722;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4723);
          reg = x4723;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":98:0)
      auto x4724 = x96 - x4546;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":98:0)
      auto x4725 = x4724 * x4714;
      if (x4725 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":100:0)
        auto x4726 = x4710 + x48;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4699);
          reg = x4699;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4700);
          reg = x4700;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4701);
          reg = x4701;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4702);
          reg = x4702;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x4726, x4699, x4700, x4701, x4702, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4727 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4727 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4728 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4728 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4729 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4729 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x4730 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4730 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4726);
          reg = x4726;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4727);
          reg = x4727;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4728);
          reg = x4728;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4729);
          reg = x4729;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4730);
          reg = x4730;
        }
      }
      if (x4713 != 0) {
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":105:0)
      auto x4731 = x959 + x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x4732 = x4731 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4733 = Fp(x4732.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4733);
          reg = x4733;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4734 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4734 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4735 = x4732 - x4734;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4736 = x4735 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4737 = Fp(x4736.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4737);
          reg = x4737;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4738 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4738 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4739 = x4736 - x4738;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4740 = x4739 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x4741 = Fp(x4740.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4741);
          reg = x4741;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x4742 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4742 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4743 = x4740 - x4742;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x4744 = x4743 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x4745 = Fp(x4744.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4745);
          reg = x4745;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4746 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4746 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x4747 = x4744 - x4746;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x4748 = x4747 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4748);
        reg = x4748;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4749 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4749 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x4750 = x96 - x4749;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x4751 = x4749 * x4750;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4751);
        reg = x4751;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x4752 = x93 - x4749;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x4753 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4753 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x4754 = x4753 * x4752;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x4754 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":106:0)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x70);
        reg = x70;
      }
      if (x4542 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:0)
        auto x4755 = x4501 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:0)
        if (x4755 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:124");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:0)
        auto x4756 = x4493 - x77;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:0)
        if (x4756 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:124");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:0)
        auto x4757 = x4469 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:0)
        if (x4757 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:124");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:0))
      auto x4758 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4758 != Fp::invalid());
      if (x4758 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:0)
        auto x4759 = x4501 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:0)
        if (x4759 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:125");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:0)
        auto x4760 = x4493 - x72;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:0)
        if (x4760 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:125");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:0)
        auto x4761 = x4469 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:0)
        if (x4761 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:125");
      }
      if (x4543 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:0)
        auto x4762 = x4501 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:0)
        if (x4762 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:126");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:0)
        auto x4763 = x4493 - x71;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:0)
        if (x4763 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:126");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:0)
        auto x4764 = x4469 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:0)
        if (x4764 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:126");
      }
      if (x4545 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:0)
        auto x4765 = x4501 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:0)
        if (x4765 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:127");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:0)
        auto x4766 = x4493 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:0)
        if (x4766 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:127");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:0)
        auto x4767 = x4469 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:0)
        if (x4767 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:127");
      }
      if (x4547 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:0)
        auto x4768 = x4501 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:0)
        if (x4768 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:128");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:0)
        auto x4769 = x4493 - x72;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:0)
        if (x4769 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:128");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:0)
        if (x4469 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:128");
      }
      if (x4548 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0)
        auto x4770 = x4501 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0)
        if (x4770 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:129");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0)
        auto x4771 = x4493 - x72;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0)
        if (x4771 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:129");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0)
        auto x4772 = x4469 - x59;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:0)
        if (x4772 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:129");
      }
      if (x4551 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:0)
        auto x4773 = x4501 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:0)
        if (x4773 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:130");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:0)
        auto x4774 = x4493 - x72;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:0)
        if (x4774 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:130");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:0)
        if (x4469 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:130");
      }
      if (x4553 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
        auto x4775 = x4501 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
        if (x4775 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:131");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
        auto x4776 = x4493 - x72;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
        if (x4776 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:131");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
        auto x4777 = x4469 - x59;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:0)
        if (x4777 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:131");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./zirgen/components/mux.h":49:0))
    auto x4778 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x4778 != Fp::invalid());
    if (x4778 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4779 = args[2][126 * steps + ((cycle - 1) & mask)];
      assert(x4779 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4780 = args[2][127 * steps + ((cycle - 1) & mask)];
      assert(x4780 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4781 = args[2][128 * steps + ((cycle - 1) & mask)];
      assert(x4781 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4782 = args[2][129 * steps + ((cycle - 1) & mask)];
      assert(x4782 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4783 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x4783 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4784 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x4784 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4785 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x4785 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4786 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x4786 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4787 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x4787 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4788 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x4788 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4789 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x4789 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4790 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x4790 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4791 = Fp(x4779.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4791);
          reg = x4791;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4792 = Fp(x4783.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4792);
          reg = x4792;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4793 = Fp(x4779.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4794 = x4793 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4794);
          reg = x4794;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4795 = Fp(x4783.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4796 = x4795 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4796);
          reg = x4796;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4797 = Fp(x4779.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4798 = x4797 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4798);
          reg = x4798;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4799 = Fp(x4783.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4800 = x4799 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4800);
          reg = x4800;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4801 = Fp(x4779.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4802 = x4801 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4802);
          reg = x4802;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4803 = Fp(x4783.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4804 = x4803 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4804);
          reg = x4804;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4805 = Fp(x4779.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4806 = x4805 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4806);
          reg = x4806;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4807 = Fp(x4783.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4808 = x4807 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4808);
          reg = x4808;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4809 = Fp(x4779.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4810 = x4809 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4810);
          reg = x4810;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4811 = Fp(x4783.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4812 = x4811 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4812);
          reg = x4812;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4813 = Fp(x4779.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4814 = x4813 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4814);
          reg = x4814;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4815 = Fp(x4783.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4816 = x4815 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4816);
          reg = x4816;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4817 = Fp(x4779.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4818 = x4817 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4818);
          reg = x4818;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4819 = Fp(x4783.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4820 = x4819 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4820);
          reg = x4820;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4821 = Fp(x4780.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4821);
          reg = x4821;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4822 = Fp(x4784.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4822);
          reg = x4822;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4823 = Fp(x4780.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4824 = x4823 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4824);
          reg = x4824;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4825 = Fp(x4784.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4826 = x4825 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4826);
          reg = x4826;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4827 = Fp(x4780.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4828 = x4827 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4828);
          reg = x4828;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4829 = Fp(x4784.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4830 = x4829 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4830);
          reg = x4830;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4831 = Fp(x4780.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4832 = x4831 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4832);
          reg = x4832;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4833 = Fp(x4784.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4834 = x4833 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4834);
          reg = x4834;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4835 = Fp(x4780.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4836 = x4835 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4836);
          reg = x4836;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4837 = Fp(x4784.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4838 = x4837 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4838);
          reg = x4838;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4839 = Fp(x4780.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4840 = x4839 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4840);
          reg = x4840;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4841 = Fp(x4784.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4842 = x4841 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4842);
          reg = x4842;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4843 = Fp(x4780.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4844 = x4843 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4844);
          reg = x4844;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4845 = Fp(x4784.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4846 = x4845 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4846);
          reg = x4846;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4847 = Fp(x4780.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4848 = x4847 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4848);
          reg = x4848;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4849 = Fp(x4784.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4850 = x4849 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4850);
          reg = x4850;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4851 = Fp(x4781.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4851);
          reg = x4851;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4852 = Fp(x4785.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4852);
          reg = x4852;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4853 = Fp(x4781.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4854 = x4853 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4854);
          reg = x4854;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4855 = Fp(x4785.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4856 = x4855 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4856);
          reg = x4856;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4857 = Fp(x4781.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4858 = x4857 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4858);
          reg = x4858;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4859 = Fp(x4785.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4860 = x4859 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4860);
          reg = x4860;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4861 = Fp(x4781.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4862 = x4861 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4862);
          reg = x4862;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4863 = Fp(x4785.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4864 = x4863 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4864);
          reg = x4864;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4865 = Fp(x4781.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4866 = x4865 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4866);
          reg = x4866;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4867 = Fp(x4785.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4868 = x4867 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4868);
          reg = x4868;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4869 = Fp(x4781.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4870 = x4869 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4870);
          reg = x4870;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4871 = Fp(x4785.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4872 = x4871 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4872);
          reg = x4872;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4873 = Fp(x4781.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4874 = x4873 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4874);
          reg = x4874;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4875 = Fp(x4785.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4876 = x4875 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4876);
          reg = x4876;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4877 = Fp(x4781.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4878 = x4877 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4878);
          reg = x4878;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4879 = Fp(x4785.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4880 = x4879 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4880);
          reg = x4880;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4881 = Fp(x4782.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4881);
          reg = x4881;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4882 = Fp(x4786.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4882);
          reg = x4882;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4883 = Fp(x4782.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4884 = x4883 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4884);
          reg = x4884;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4885 = Fp(x4786.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4886 = x4885 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4886);
          reg = x4886;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4887 = Fp(x4782.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4888 = x4887 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4888);
          reg = x4888;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4889 = Fp(x4786.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4890 = x4889 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4890);
          reg = x4890;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4891 = Fp(x4782.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4892 = x4891 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4892);
          reg = x4892;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4893 = Fp(x4786.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4894 = x4893 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4894);
          reg = x4894;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4895 = Fp(x4782.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4896 = x4895 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4896);
          reg = x4896;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4897 = Fp(x4786.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4898 = x4897 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4898);
          reg = x4898;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4899 = Fp(x4782.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4900 = x4899 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4900);
          reg = x4900;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4901 = Fp(x4786.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4902 = x4901 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4902);
          reg = x4902;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4903 = Fp(x4782.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4904 = x4903 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4904);
          reg = x4904;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4905 = Fp(x4786.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4906 = x4905 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4906);
          reg = x4906;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4907 = Fp(x4782.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":211:0)
        auto x4908 = x4907 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4908);
          reg = x4908;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4909 = Fp(x4786.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":212:0)
        auto x4910 = x4909 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4910);
          reg = x4910;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4911 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4911 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4912 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4912 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4913 = x4911 * x4912;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4914 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4914 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4915 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4915 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4916 = x4914 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4917 = x4911 + x4916;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4918 = x4915 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4919 = x4912 + x4918;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4920 = x4914 * x4915;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4921 = x4920 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4922 = x4913 + x4921;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4923 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4923 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4924 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4924 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4925 = x4923 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4926 = x4917 + x4925;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4927 = x4924 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4928 = x4919 + x4927;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4929 = x4923 * x4924;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4930 = x4929 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4931 = x4922 + x4930;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4932 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4932 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4933 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4933 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4934 = x4932 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4935 = x4926 + x4934;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4936 = x4933 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4937 = x4928 + x4936;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4938 = x4932 * x4933;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4939 = x4938 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4940 = x4931 + x4939;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4941 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4941 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4942 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4942 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4943 = x4941 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4944 = x4935 + x4943;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4945 = x4942 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4946 = x4937 + x4945;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4947 = x4941 * x4942;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4948 = x4947 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4949 = x4940 + x4948;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4950 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4950 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4951 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4951 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4952 = x4950 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4953 = x4944 + x4952;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4954 = x4951 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4955 = x4946 + x4954;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4956 = x4950 * x4951;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4957 = x4956 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4958 = x4949 + x4957;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4959 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4959 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4960 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4960 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4961 = x4959 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4962 = x4953 + x4961;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4963 = x4960 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4964 = x4955 + x4963;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4965 = x4959 * x4960;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4966 = x4965 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4967 = x4958 + x4966;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4968 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4968 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4969 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4969 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4970 = x4968 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4971 = x4962 + x4970;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4972 = x4969 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4973 = x4964 + x4972;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4974 = x4968 * x4969;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4975 = x4974 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4976 = x4967 + x4975;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4977 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4977 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4978 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4978 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4979 = x4977 * x4978;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4980 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4980 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4981 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4981 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4982 = x4980 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4983 = x4977 + x4982;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4984 = x4981 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4985 = x4978 + x4984;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4986 = x4980 * x4981;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4987 = x4986 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4988 = x4979 + x4987;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4989 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4989 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4990 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4990 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4991 = x4989 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x4992 = x4983 + x4991;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4993 = x4990 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x4994 = x4985 + x4993;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4995 = x4989 * x4990;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4996 = x4995 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x4997 = x4988 + x4996;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4998 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4998 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x4999 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4999 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5000 = x4998 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5001 = x4992 + x5000;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5002 = x4999 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5003 = x4994 + x5002;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5004 = x4998 * x4999;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5005 = x5004 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5006 = x4997 + x5005;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5007 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x5007 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5008 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5008 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5009 = x5007 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5010 = x5001 + x5009;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5011 = x5008 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5012 = x5003 + x5011;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5013 = x5007 * x5008;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5014 = x5013 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5015 = x5006 + x5014;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5016 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x5016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5017 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5017 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5018 = x5016 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5019 = x5010 + x5018;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5020 = x5017 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5021 = x5012 + x5020;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5022 = x5016 * x5017;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5023 = x5022 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5024 = x5015 + x5023;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5025 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x5025 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5026 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5026 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5027 = x5025 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5028 = x5019 + x5027;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5029 = x5026 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5030 = x5021 + x5029;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5031 = x5025 * x5026;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5032 = x5031 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5033 = x5024 + x5032;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5034 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x5034 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5035 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5035 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5036 = x5034 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5037 = x5028 + x5036;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5038 = x5035 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5039 = x5030 + x5038;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5040 = x5034 * x5035;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5041 = x5040 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5042 = x5033 + x5041;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5043 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x5043 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5044 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5044 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5045 = x5043 * x5044;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5046 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x5046 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5047 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x5047 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5048 = x5046 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5049 = x5043 + x5048;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5050 = x5047 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5051 = x5044 + x5050;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5052 = x5046 * x5047;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5053 = x5052 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5054 = x5045 + x5053;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5055 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x5055 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5056 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x5056 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5057 = x5055 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5058 = x5049 + x5057;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5059 = x5056 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5060 = x5051 + x5059;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5061 = x5055 * x5056;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5062 = x5061 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5063 = x5054 + x5062;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5064 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x5064 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5065 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x5065 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5066 = x5064 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5067 = x5058 + x5066;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5068 = x5065 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5069 = x5060 + x5068;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5070 = x5064 * x5065;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5071 = x5070 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5072 = x5063 + x5071;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5073 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x5073 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5074 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x5074 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5075 = x5073 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5076 = x5067 + x5075;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5077 = x5074 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5078 = x5069 + x5077;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5079 = x5073 * x5074;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5080 = x5079 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5081 = x5072 + x5080;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5082 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x5082 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5083 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x5083 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5084 = x5082 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5085 = x5076 + x5084;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5086 = x5083 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5087 = x5078 + x5086;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5088 = x5082 * x5083;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5089 = x5088 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5090 = x5081 + x5089;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5091 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x5091 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5092 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x5092 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5093 = x5091 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5094 = x5085 + x5093;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5095 = x5092 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5096 = x5087 + x5095;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5097 = x5091 * x5092;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5098 = x5097 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5099 = x5090 + x5098;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5100 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x5100 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5101 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x5101 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5102 = x5100 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5103 = x5094 + x5102;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5104 = x5101 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5105 = x5096 + x5104;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5106 = x5100 * x5101;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5107 = x5106 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5108 = x5099 + x5107;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5109 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x5109 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5110 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x5110 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5111 = x5109 * x5110;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5112 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x5112 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5113 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x5113 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5114 = x5112 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5115 = x5109 + x5114;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5116 = x5113 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5117 = x5110 + x5116;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5118 = x5112 * x5113;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5119 = x5118 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5120 = x5111 + x5119;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5121 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x5121 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5122 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x5122 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5123 = x5121 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5124 = x5115 + x5123;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5125 = x5122 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5126 = x5117 + x5125;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5127 = x5121 * x5122;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5128 = x5127 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5129 = x5120 + x5128;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5130 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x5130 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5131 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x5131 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5132 = x5130 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5133 = x5124 + x5132;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5134 = x5131 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5135 = x5126 + x5134;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5136 = x5130 * x5131;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5137 = x5136 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5138 = x5129 + x5137;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5139 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x5139 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5140 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5140 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5141 = x5139 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5142 = x5133 + x5141;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5143 = x5140 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5144 = x5135 + x5143;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5145 = x5139 * x5140;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5146 = x5145 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5147 = x5138 + x5146;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5148 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x5148 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5149 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5149 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5150 = x5148 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5151 = x5142 + x5150;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5152 = x5149 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5153 = x5144 + x5152;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5154 = x5148 * x5149;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5155 = x5154 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5156 = x5147 + x5155;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5157 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x5157 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5158 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5158 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5159 = x5157 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5160 = x5151 + x5159;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5161 = x5158 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5162 = x5153 + x5161;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5163 = x5157 * x5158;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5164 = x5163 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5165 = x5156 + x5164;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5166 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x5166 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5167 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5167 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5168 = x5166 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":223:0)
      auto x5169 = x5160 + x5168;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5170 = x5167 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":224:0)
      auto x5171 = x5162 + x5170;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5172 = x5166 * x5167;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5173 = x5172 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":225:0)
      auto x5174 = x5165 + x5173;
      extern_log(ctx, cycle, "  a = %w, ax = %w", {x4779, x4780, x4781, x4782, x4971, x5037, x5103, x5169});
      extern_log(ctx, cycle, "  b = %w, bx = %w", {x4783, x4784, x4785, x4786, x4973, x5039, x5105, x5171});
      extern_log(ctx, cycle, "  c = %w, cx = %w", {x4787, x4788, x4789, x4790, x4976, x5042, x5108, x5174});
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":231:0)
      auto x5175 = x4779 - x4971;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":231:0)
      if (x5175 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:231");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":231:0)
      auto x5176 = x4780 - x5037;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":231:0)
      if (x5176 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:231");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":231:0)
      auto x5177 = x4781 - x5103;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":231:0)
      if (x5177 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:231");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":231:0)
      auto x5178 = x4782 - x5169;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":231:0)
      if (x5178 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:231");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":232:0)
      auto x5179 = x4783 - x4973;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":232:0)
      if (x5179 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:232");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":232:0)
      auto x5180 = x4784 - x5039;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":232:0)
      if (x5180 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:232");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":232:0)
      auto x5181 = x4785 - x5105;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":232:0)
      if (x5181 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:232");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":232:0)
      auto x5182 = x4786 - x5171;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":232:0)
      if (x5182 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:232");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":233:0)
      auto x5183 = x4787 - x4976;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":233:0)
      if (x5183 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:233");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":233:0)
      auto x5184 = x4788 - x5042;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":233:0)
      if (x5184 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:233");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":233:0)
      auto x5185 = x4789 - x5108;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":233:0)
      if (x5185 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:233");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":233:0)
      auto x5186 = x4790 - x5174;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":233:0)
      if (x5186 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:233");
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x5187 = x959 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5188 = Fp(x5187.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5188);
          reg = x5188;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5189 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5189 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5190 = x5187 - x5189;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5191 = x5190 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5192 = Fp(x5191.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5192);
          reg = x5192;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5193 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5193 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5194 = x5191 - x5193;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5195 = x5194 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5196 = Fp(x5195.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5196);
          reg = x5196;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5197 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5197 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5198 = x5195 - x5197;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5199 = x5198 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x5200 = Fp(x5199.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5201 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5201 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x5202 = x5199 - x5201;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x5203 = x5202 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5203);
        reg = x5203;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5204 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5204 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x5205 = x96 - x5204;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x5206 = x5204 * x5205;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5206);
        reg = x5206;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x5207 = x93 - x5204;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5208 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5208 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x5209 = x5208 * x5207;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x5209 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:0)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x62);
        reg = x62;
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./zirgen/components/mux.h":49:0))
    auto x5210 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x5210 != Fp::invalid());
    if (x5210 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5211 = args[2][126 * steps + ((cycle - 1) & mask)];
      assert(x5211 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5212 = args[2][127 * steps + ((cycle - 1) & mask)];
      assert(x5212 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5213 = args[2][128 * steps + ((cycle - 1) & mask)];
      assert(x5213 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5214 = args[2][129 * steps + ((cycle - 1) & mask)];
      assert(x5214 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5215 = args[2][18 * steps + ((cycle - 1) & mask)];
      assert(x5215 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5216 = args[2][19 * steps + ((cycle - 1) & mask)];
      assert(x5216 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5217 = args[2][20 * steps + ((cycle - 1) & mask)];
      assert(x5217 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5218 = args[2][21 * steps + ((cycle - 1) & mask)];
      assert(x5218 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5219 = args[2][22 * steps + ((cycle - 1) & mask)];
      assert(x5219 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5220 = args[2][23 * steps + ((cycle - 1) & mask)];
      assert(x5220 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5221 = args[2][24 * steps + ((cycle - 1) & mask)];
      assert(x5221 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5222 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x5222 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5223 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x5223 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5224 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x5224 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5225 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x5225 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5226 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x5226 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5227 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x5227 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5228 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x5228 != Fp::invalid());
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x5229 = Fp(x5214.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x5230 = x5229 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5230);
          reg = x5230;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x5231 = Fp(x5214.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x5232 = x5231 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5232);
          reg = x5232;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5233 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x5233 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x5234 = x5233 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5235 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x5235 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x5236 = x5235 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x5237 = x5236 + x5234;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x5238 = x5214 - x5237;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x5238 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:0)
        auto x5239 = Fp(x5218.asUInt32() & x61.asUInt32());
        // loc("zirgen/components/u32.cpp":126:0)
        auto x5240 = x5239 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5240);
          reg = x5240;
        }
        // loc("zirgen/components/u32.cpp":127:0)
        auto x5241 = Fp(x5218.asUInt32() & x50.asUInt32());
        // loc("zirgen/components/u32.cpp":127:0)
        auto x5242 = x5241 * x93;
        // loc("zirgen/components/bytes.cpp":101:0)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5242);
          reg = x5242;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5243 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5243 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x5244 = x5243 * x54;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5245 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x5245 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:0)
      auto x5246 = x5245 * x61;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x5247 = x5246 + x5244;
      // loc("zirgen/components/u32.cpp":129:0)
      auto x5248 = x5218 - x5247;
      // loc("zirgen/components/u32.cpp":129:0)
      if (x5248 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":139:0)
      auto x5249 = x5227 * x5235;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":139:0)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5249);
        reg = x5249;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":140:0)
      auto x5250 = x96 - x5228;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":140:0)
      auto x5251 = x5227 * x5250;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":140:0)
      auto x5252 = x5251 * x5245;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":140:0)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5252);
        reg = x5252;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5253 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5253 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":143:0)
      auto x5254 = x5253 * x5228;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5255 = x5253 * x5211;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5256 = x5253 * x5212;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5257 = x5253 * x5213;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5258 = x5253 * x5214;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":142:0)
      auto x5259 = x96 - x5253;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5260 = x5259 * x5211;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5261 = x5259 * x5212;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5262 = x5259 * x5213;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5263 = x5259 * x5214;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5264 = x5260 + x91;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5265 = x5261 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5266 = x5262 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5267 = x5263 + x92;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5268 = x5264 - x5255;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5269 = x5265 - x5256;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5270 = x5266 - x5257;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5271 = x5267 - x5258;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5272 = x5268 - x5254;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5273 = x5269 * x91;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5274 = x5272 + x5273;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5275 = Fp(x5274.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5275);
          reg = x5275;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5276 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5276 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5277 = x5274 - x5276;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5278 = x5277 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5279 = Fp(x5278.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5279);
          reg = x5279;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5280 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5280 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5281 = x5278 - x5280;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5282 = x5281 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5282);
        reg = x5282;
      }
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5283 = x5271 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5284 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5284 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5285 = x5284 + x5270;
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5286 = x5285 + x5283;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5287 = Fp(x5286.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5287);
          reg = x5287;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5288 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x5288 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5289 = x5286 - x5288;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5290 = x5289 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5291 = Fp(x5290.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5291);
          reg = x5291;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5292 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x5292 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5293 = x5290 - x5292;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5294 = x5293 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5294);
        reg = x5294;
      }
      extern_log(ctx, cycle, "  numer = %w, numerAbs = %w", {x5211, x5212, x5213, x5214, x5276, x5280, x5288, x5292});
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5295 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5295 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":146:0)
      auto x5296 = x5295 * x5228;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5297 = x5295 * x5215;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5298 = x5295 * x5216;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5299 = x5295 * x5217;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5300 = x5295 * x5218;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":145:0)
      auto x5301 = x96 - x5295;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5302 = x5301 * x5215;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5303 = x5301 * x5216;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5304 = x5301 * x5217;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5305 = x5301 * x5218;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5306 = x5302 + x91;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5307 = x5303 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5308 = x5304 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5309 = x5305 + x92;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5310 = x5306 - x5297;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5311 = x5307 - x5298;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5312 = x5308 - x5299;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5313 = x5309 - x5300;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5314 = x5310 - x5296;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5315 = x5311 * x91;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5316 = x5314 + x5315;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5317 = Fp(x5316.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5317);
          reg = x5317;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5318 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x5318 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5319 = x5316 - x5318;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5320 = x5319 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5321 = Fp(x5320.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5321);
          reg = x5321;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5322 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x5322 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5323 = x5320 - x5322;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5324 = x5323 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5324);
        reg = x5324;
      }
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5325 = x5313 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5326 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x5326 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5327 = x5326 + x5312;
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5328 = x5327 + x5325;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5329 = Fp(x5328.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5329);
          reg = x5329;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5330 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x5330 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5331 = x5328 - x5330;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5332 = x5331 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5333 = Fp(x5332.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5333);
          reg = x5333;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5334 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x5334 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5335 = x5332 - x5334;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5336 = x5335 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5336);
        reg = x5336;
      }
      extern_log(ctx, cycle, "  demom = %w, denomAbs = %w", {x5215, x5216, x5217, x5218, x5318, x5322, x5330, x5334});
      // loc("zirgen/components/u32.cpp":143:0)
      auto x5337 = x5322 * x91;
      // loc("zirgen/components/u32.cpp":143:0)
      auto x5338 = x5318 + x5337;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x5339 = (x5338 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5339);
          reg = x5339;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x5340 = inv(x5338);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5340);
          reg = x5340;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5341 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5341 != Fp::invalid());
      if (x5341 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x5338 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x5342 = x96 - x5341;
      if (x5342 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5343 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5343 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x5344 = x5338 * x5343;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x5345 = x5344 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x5345 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":144:0)
      auto x5346 = x5342 * x78;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x5347 = x5334 * x91;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x5348 = x5330 + x5347;
      // loc("zirgen/components/u32.cpp":144:0)
      auto x5349 = x5348 + x5346;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x5350 = (x5349 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5350);
          reg = x5350;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x5351 = inv(x5349);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5351);
          reg = x5351;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5352 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x5352 != Fp::invalid());
      if (x5352 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x5349 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x5353 = x96 - x5352;
      if (x5353 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5354 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5354 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x5355 = x5349 * x5354;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x5356 = x5355 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x5356 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":149:0)
      auto x5357 = x5352 * x5253;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":149:0)
      auto x5358 = x5253 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":149:0)
      auto x5359 = x5358 * x5295;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":149:0)
      auto x5360 = x5253 + x5295;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":149:0)
      auto x5361 = x5360 - x5359;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":149:0)
      auto x5362 = x5361 - x5357;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":149:0)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5362);
        reg = x5362;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5363 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5363 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":152:0)
      auto x5364 = x5363 * x5228;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5365 = x5363 * x5219;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5366 = x5363 * x5220;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5367 = x5363 * x5221;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5368 = x5363 * x5222;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":151:0)
      auto x5369 = x96 - x5363;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5370 = x5369 * x5219;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5371 = x5369 * x5220;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5372 = x5369 * x5221;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5373 = x5369 * x5222;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5374 = x5370 + x91;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5375 = x5371 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5376 = x5372 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5377 = x5373 + x92;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5378 = x5374 - x5365;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5379 = x5375 - x5366;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5380 = x5376 - x5367;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5381 = x5377 - x5368;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5382 = x5378 - x5364;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5383 = x5379 * x91;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5384 = x5382 + x5383;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5385 = Fp(x5384.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5385);
          reg = x5385;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5386 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5386 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5387 = x5384 - x5386;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5388 = x5387 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5389 = Fp(x5388.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5389);
          reg = x5389;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5390 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5390 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5391 = x5388 - x5390;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5392 = x5391 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5392);
        reg = x5392;
      }
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5393 = x5381 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5394 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5394 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5395 = x5394 + x5380;
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5396 = x5395 + x5393;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5397 = Fp(x5396.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5397);
          reg = x5397;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5398 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5398 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5399 = x5396 - x5398;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5400 = x5399 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5401 = Fp(x5400.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5401);
          reg = x5401;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5402 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5402 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5403 = x5400 - x5402;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5404 = x5403 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5404);
        reg = x5404;
      }
      extern_log(ctx, cycle, "  quot = %w, quotAbs = %w", {x5219, x5220, x5221, x5222, x5386, x5390, x5398, x5402});
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5405 = x5253 * x5223;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5406 = x5253 * x5224;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5407 = x5253 * x5225;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5408 = x5253 * x5226;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5409 = x5259 * x5223;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5410 = x5259 * x5224;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5411 = x5259 * x5225;
      // loc("zirgen/components/u32.cpp":111:0)
      auto x5412 = x5259 * x5226;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5413 = x5409 + x91;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5414 = x5410 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5415 = x5411 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5416 = x5412 + x92;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5417 = x5413 - x5405;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5418 = x5414 - x5406;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5419 = x5415 - x5407;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5420 = x5416 - x5408;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5421 = x5417 - x5254;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5422 = x5418 * x91;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5423 = x5421 + x5422;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5424 = Fp(x5423.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5424);
          reg = x5424;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5425 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5425 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5426 = x5423 - x5425;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5427 = x5426 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5428 = Fp(x5427.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5428);
          reg = x5428;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5429 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5429 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5430 = x5427 - x5429;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5431 = x5430 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5431);
        reg = x5431;
      }
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5432 = x5420 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5433 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5433 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5434 = x5433 + x5419;
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5435 = x5434 + x5432;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5436 = Fp(x5435.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5436);
          reg = x5436;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5437 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5437 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5438 = x5435 - x5437;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5439 = x5438 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5440 = Fp(x5439.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5440);
          reg = x5440;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5441 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5441 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5442 = x5439 - x5441;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5443 = x5442 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5443);
        reg = x5443;
      }
      extern_log(ctx, cycle, "  rem = %w, remAbs = %w", {x5223, x5224, x5225, x5226, x5425, x5429, x5437, x5441});
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5444 = x5318 + x91;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5445 = x5322 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5446 = x5330 + x92;
      // loc("zirgen/components/u32.cpp":95:0)
      auto x5447 = x5334 + x92;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5448 = x5444 - x96;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5449 = x5448 - x5425;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5450 = x5445 - x5429;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5451 = x5446 - x5437;
      // loc("zirgen/components/u32.cpp":103:0)
      auto x5452 = x5447 - x5441;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5453 = x5450 * x91;
      // loc("zirgen/components/u32.cpp":152:0)
      auto x5454 = x5449 + x5453;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5455 = Fp(x5454.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5455);
          reg = x5455;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5456 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5456 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5457 = x5454 - x5456;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5458 = x5457 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5459 = Fp(x5458.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5459);
          reg = x5459;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5460 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5460 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5461 = x5458 - x5460;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5462 = x5461 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5462);
        reg = x5462;
      }
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5463 = x5452 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5464 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5464 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5465 = x5464 + x5451;
      // loc("zirgen/components/u32.cpp":154:0)
      auto x5466 = x5465 + x5463;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5467 = Fp(x5466.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5467);
          reg = x5467;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5468 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5468 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5469 = x5466 - x5468;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5470 = x5469 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5471 = Fp(x5470.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5471);
          reg = x5471;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5472 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5472 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5473 = x5470 - x5472;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5474 = x5473 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5474);
        reg = x5474;
      }
      // loc("zirgen/components/u32.cpp":267:0)
      auto x5475 = x5390 * x5318;
      // loc("zirgen/components/u32.cpp":267:0)
      auto x5476 = x5386 * x5322;
      // loc("zirgen/components/u32.cpp":267:0)
      auto x5477 = x5476 + x5475;
      // loc("zirgen/components/u32.cpp":267:0)
      auto x5478 = x5477 + x5429;
      // loc("zirgen/components/u32.cpp":267:0)
      auto x5479 = x5478 * x91;
      // loc("zirgen/components/u32.cpp":266:0)
      auto x5480 = x5386 * x5318;
      // loc("zirgen/components/u32.cpp":266:0)
      auto x5481 = x5480 + x5425;
      // loc("zirgen/components/u32.cpp":267:0)
      auto x5482 = x5481 + x5479;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5483 = Fp(x5482.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5483);
          reg = x5483;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5484 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5484 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5485 = x5482 - x5484;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5486 = x5485 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5487 = Fp(x5486.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5487);
          reg = x5487;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5488 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5488 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5489 = x5486 - x5488;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5490 = x5489 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5491 = Fp(x5490.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5491);
          reg = x5491;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5492 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5492 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5493 = x5490 - x5492;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5494 = x5493 * x90;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5494);
        reg = x5494;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32MulAcc/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5495 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5495 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":270:0)
      auto x5496 = x5495 * x91;
      // loc("zirgen/components/u32.cpp":270:0)
      auto x5497 = x5496 + x5492;
      // loc("zirgen/components/u32.cpp":272:0)
      auto x5498 = x5390 * x5334;
      // loc("zirgen/components/u32.cpp":272:0)
      if (x5498 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:272");
      // loc("zirgen/components/u32.cpp":273:0)
      auto x5499 = x5398 * x5330;
      // loc("zirgen/components/u32.cpp":273:0)
      if (x5499 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:273");
      // loc("zirgen/components/u32.cpp":274:0)
      auto x5500 = x5402 * x5322;
      // loc("zirgen/components/u32.cpp":274:0)
      if (x5500 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:274");
      // loc("zirgen/components/u32.cpp":275:0)
      auto x5501 = x5398 * x5334;
      // loc("zirgen/components/u32.cpp":275:0)
      if (x5501 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:275");
      // loc("zirgen/components/u32.cpp":276:0)
      auto x5502 = x5402 * x5330;
      // loc("zirgen/components/u32.cpp":276:0)
      if (x5502 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:276");
      // loc("zirgen/components/u32.cpp":277:0)
      auto x5503 = x5402 * x5334;
      // loc("zirgen/components/u32.cpp":277:0)
      if (x5503 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:277");
      // loc("zirgen/components/u32.cpp":282:0)
      auto x5504 = x5386 * x5334;
      // loc("zirgen/components/u32.cpp":282:0)
      auto x5505 = x5390 * x5330;
      // loc("zirgen/components/u32.cpp":281:0)
      auto x5506 = x5398 * x5322;
      // loc("zirgen/components/u32.cpp":281:0)
      auto x5507 = x5402 * x5318;
      // loc("zirgen/components/u32.cpp":281:0)
      auto x5508 = x5507 + x5506;
      // loc("zirgen/components/u32.cpp":282:0)
      auto x5509 = x5508 + x5505;
      // loc("zirgen/components/u32.cpp":282:0)
      auto x5510 = x5509 + x5504;
      // loc("zirgen/components/u32.cpp":282:0)
      auto x5511 = x5510 + x5441;
      // loc("zirgen/components/u32.cpp":282:0)
      auto x5512 = x5511 * x91;
      // loc("zirgen/components/u32.cpp":280:0)
      auto x5513 = x5386 * x5330;
      // loc("zirgen/components/u32.cpp":279:0)
      auto x5514 = x5390 * x5322;
      // loc("zirgen/components/u32.cpp":279:0)
      auto x5515 = x5398 * x5318;
      // loc("zirgen/components/u32.cpp":279:0)
      auto x5516 = x5515 + x5514;
      // loc("zirgen/components/u32.cpp":280:0)
      auto x5517 = x5516 + x5513;
      // loc("zirgen/components/u32.cpp":280:0)
      auto x5518 = x5517 + x5437;
      // loc("zirgen/components/u32.cpp":280:0)
      auto x5519 = x5518 + x5497;
      // loc("zirgen/components/u32.cpp":282:0)
      auto x5520 = x5519 + x5512;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5521 = Fp(x5520.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5521);
          reg = x5521;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5522 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5522 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5523 = x5520 - x5522;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5524 = x5523 * x90;
      // loc("zirgen/components/bytes.cpp":101:0)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5524);
        reg = x5524;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5525 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x5525 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
      auto x5526 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5526 != Fp::invalid());
      extern_log(ctx, cycle, "  mul->getOut() = %w, denomRemCheck->carry = %u", {x5484, x5488, x5522, x5526, x5525});
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":161:0)
      auto x5527 = x5484 - x5276;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":161:0)
      if (x5527 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:161");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":161:0)
      auto x5528 = x5488 - x5280;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":161:0)
      if (x5528 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:161");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":161:0)
      auto x5529 = x5522 - x5288;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":161:0)
      if (x5529 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:161");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":161:0)
      auto x5530 = x5526 - x5292;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":161:0)
      if (x5530 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:161");
      if (x5353 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":162:0)
        auto x5531 = x5525 - x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":162:0)
        if (x5531 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:162");
      }
      if (x5352 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":164:0)
        auto x5532 = x5223 - x5211;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":164:0)
        if (x5532 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:164");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":164:0)
        auto x5533 = x5224 - x5212;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":164:0)
        if (x5533 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:164");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":164:0)
        auto x5534 = x5225 - x5213;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":164:0)
        if (x5534 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:164");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":164:0)
        auto x5535 = x5226 - x5214;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":164:0)
        if (x5535 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:164");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":165:0)
        auto x5536 = x5219 - x92;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":165:0)
        if (x5536 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:165");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":165:0)
        auto x5537 = x5220 - x92;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":165:0)
        if (x5537 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:165");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":165:0)
        auto x5538 = x5221 - x92;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":165:0)
        if (x5538 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:165");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":165:0)
        auto x5539 = x5222 - x92;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":165:0)
        if (x5539 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:165");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x5540 = x959 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5541 = Fp(x5540.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5541);
          reg = x5541;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5542 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5542 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5543 = x5540 - x5542;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5544 = x5543 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5545 = Fp(x5544.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5545);
          reg = x5545;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5546 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5546 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5547 = x5544 - x5546;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5548 = x5547 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5549 = Fp(x5548.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5549);
          reg = x5549;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5550 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5550 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5551 = x5548 - x5550;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5552 = x5551 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x5553 = Fp(x5552.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5553);
          reg = x5553;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5554 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5554 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x5555 = x5552 - x5554;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x5556 = x5555 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5556);
        reg = x5556;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5557 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5557 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x5558 = x96 - x5557;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x5559 = x5557 * x5558;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5559);
        reg = x5559;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x5560 = x93 - x5557;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5561 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5561 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x5562 = x5561 * x5560;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x5562 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:0)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x62);
        reg = x62;
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./zirgen/components/mux.h":49:0))
    auto x5563 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x5563 != Fp::invalid());
    if (x5563 != 0) {
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":142:0)
      auto x5564 = x959 * x75;
      {
        auto [x5565, x5566, x5567, x5568] = extern_ramRead(ctx, cycle, "", {x5564, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5565);
          reg = x5565;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5566);
          reg = x5566;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5567);
          reg = x5567;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5568);
          reg = x5568;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5569 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5569 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5570 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5570 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5571 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5571 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5572 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x5572 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5564);
        reg = x5564;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5569);
        reg = x5569;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5570);
        reg = x5570;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5571);
        reg = x5571;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5572);
        reg = x5572;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":144:0)
      auto x5573 = x5569 - x30;
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":144:0)
      if (x5573 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:144");
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":145:0)
      if (x5570 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:145");
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":146:0)
      if (x5571 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:146");
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":147:0)
      if (x5572 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:147");
      {
        auto [x5574, x5575, x5576, x5577] = extern_ramRead(ctx, cycle, "", {x29, x96});
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5574);
          reg = x5574;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5575);
          reg = x5575;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5576);
          reg = x5576;
        }
        // loc("zirgen/components/u32.cpp":88:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5577);
          reg = x5577;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5578 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x5578 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5579 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x5579 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5580 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x5580 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5581 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x5581 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:0)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x29);
        reg = x29;
      }
      // loc("zirgen/components/ram.cpp":169:0)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("zirgen/components/ram.cpp":170:0)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5578);
        reg = x5578;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5579);
        reg = x5579;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5580);
        reg = x5580;
      }
      // loc("zirgen/components/u32.cpp":34:0)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5581);
        reg = x5581;
      }
      {
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5582 = (x5578 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5582);
          reg = x5582;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5583 = x5578 - x96;
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5584 = (x5583 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5584);
          reg = x5584;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5585 = x5578 - x93;
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5586 = (x5585 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5586);
          reg = x5586;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5587 = x5578 - x76;
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5588 = (x5587 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5588);
          reg = x5588;
        }
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5589 = x5578 - x77;
        // loc("./zirgen/components/onehot.h":37:0)
        auto x5590 = (x5589 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5590);
          reg = x5590;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5591 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x5591 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5592 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x5592 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x5593 = x5592 * x93;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x5594 = x5591 + x5593;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5595 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x5595 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x5596 = x5595 * x76;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x5597 = x5594 + x5596;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x5598 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x5598 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x5599 = x5598 * x77;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x5600 = x5597 + x5599;
      // loc("./zirgen/components/onehot.h":40:0)
      auto x5601 = x5600 - x5578;
      // loc("./zirgen/components/onehot.h":40:0)
      if (x5601 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":154:0)
        auto x5602 = (x5600 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":154:0)
        auto x5603 = x96 - x5602;
        if (x5603 != 0) {
          extern_log(ctx, cycle, "  ecall, selector = %w", {x5578, x5579, x5580, x5581});
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[0](Reg)"("./zirgen/components/mux.h":49:0))
      auto x5604 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x5604 != Fp::invalid());
      if (x5604 != 0) {
        {
          auto [x5605, x5606, x5607, x5608] = extern_ramRead(ctx, cycle, "", {x28, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5605);
            reg = x5605;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5606);
            reg = x5606;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5607);
            reg = x5607;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5608);
            reg = x5608;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5609 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5609 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5610 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5610 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5611 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5611 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5612 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5612 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5609);
          reg = x5609;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5610);
          reg = x5610;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5611);
          reg = x5611;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5612);
          reg = x5612;
        }
        // loc("./zirgen/components/u32.h":27:0)
        auto x5613 = x5612 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x5614 = x5611 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x5615 = x5610 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x5616 = x5609 + x5615;
        // loc("./zirgen/components/u32.h":26:0)
        auto x5617 = x5616 + x5614;
        // loc("./zirgen/components/u32.h":27:0)
        auto x5618 = x5617 + x5613;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":19:0)
        auto x5619 = x5618 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":19:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5619);
          reg = x5619;
        }
        {
          auto [x5620, x5621, x5622, x5623] = extern_ramRead(ctx, cycle, "", {x27, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5620);
            reg = x5620;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5621);
            reg = x5621;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5622);
            reg = x5622;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5623);
            reg = x5623;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5624 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5624 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5625 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5625 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5626 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5626 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5627 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5627 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5624);
          reg = x5624;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5625);
          reg = x5625;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5626);
          reg = x5626;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5627);
          reg = x5627;
        }
        extern_log(ctx, cycle, "ECallHalt> exitCode = %w, ramAddr = %w", {x5624, x5625, x5626, x5627, x5609, x5610, x5611, x5612});
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":25:0)
        auto x5628 = x959 + x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x5629 = x5628 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5630 = Fp(x5629.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5630);
            reg = x5630;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5631 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5631 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5632 = x5629 - x5631;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5633 = x5632 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5634 = Fp(x5633.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5634);
            reg = x5634;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5635 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5635 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5636 = x5633 - x5635;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5637 = x5636 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5638 = Fp(x5637.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5638);
            reg = x5638;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5639 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5639 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5640 = x5637 - x5639;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5641 = x5640 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x5642 = Fp(x5641.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5642);
            reg = x5642;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5643 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5643 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5644 = x5641 - x5643;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5645 = x5644 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5645);
          reg = x5645;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5646 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5646 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5647 = x96 - x5646;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5648 = x5646 * x5647;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5649 = x93 - x5646;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5650 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5650 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5651 = x5650 * x5649;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x5651 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":26:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
      }
      if (x5591 != 0) {
        {
          auto [x5652, x5653, x5654, x5655] = extern_ramRead(ctx, cycle, "", {x27, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5652);
            reg = x5652;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5653);
            reg = x5653;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5654);
            reg = x5654;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5655);
            reg = x5655;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5656 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5656 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5657 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5657 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5658 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5658 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5659 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5659 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5656);
          reg = x5656;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5657);
          reg = x5657;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5658);
          reg = x5658;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5659);
          reg = x5659;
        }
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5660 = (x5656 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5660);
            reg = x5660;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5661 = x5656 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5662 = (x5661 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5662);
            reg = x5662;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5663 = x5656 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5664 = (x5663 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5664);
            reg = x5664;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5665 = x5656 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5666 = (x5665 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5666);
            reg = x5666;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5667 = x5656 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5668 = (x5667 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5668);
            reg = x5668;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5669 = x5656 - x72;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5670 = (x5669 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5670);
            reg = x5670;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5671 = x5656 - x71;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5672 = (x5671 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5672);
            reg = x5672;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5673 = x5656 - x70;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x5674 = (x5673 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5674);
            reg = x5674;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5675 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x5675 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5676 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x5676 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5677 = x5676 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5678 = x5675 + x5677;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5679 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x5679 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5680 = x5679 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5681 = x5678 + x5680;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5682 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x5682 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5683 = x5682 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5684 = x5681 + x5683;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5685 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x5685 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5686 = x5685 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5687 = x5684 + x5686;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5688 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x5688 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5689 = x5688 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5690 = x5687 + x5689;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5691 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x5691 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5692 = x5691 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5693 = x5690 + x5692;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x5694 = x5693 - x5656;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x5694 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":41:0))
        auto x5695 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x5695 != Fp::invalid());
        if (x5695 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[0](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5696 = args[1][0];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[0](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5697 = args[1][1];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[0](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5698 = args[1][2];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[0](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5699 = args[1][3];
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5696);
            reg = x5696;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5697);
            reg = x5697;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5698);
            reg = x5698;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5699);
            reg = x5699;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5700 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5700 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5701 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5701 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5702 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5702 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5703 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5703 != Fp::invalid());
          extern_log(ctx, cycle, "  Read from %u: %w", {x5693, x5700, x5701, x5702, x5703});
        }
        if (x5675 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[1](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5704 = args[1][4];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[1](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5705 = args[1][5];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[1](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5706 = args[1][6];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[1](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5707 = args[1][7];
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5704);
            reg = x5704;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5705);
            reg = x5705;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5706);
            reg = x5706;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5707);
            reg = x5707;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5708 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5708 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5709 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5709 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5710 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5710 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5711 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5711 != Fp::invalid());
          extern_log(ctx, cycle, "  Read from %u: %w", {x5693, x5708, x5709, x5710, x5711});
        }
        if (x5676 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[2](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5712 = args[1][8];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[2](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5713 = args[1][9];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[2](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5714 = args[1][10];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[2](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5715 = args[1][11];
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5712);
            reg = x5712;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5713);
            reg = x5713;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5714);
            reg = x5714;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5715);
            reg = x5715;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5716 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5716 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5717 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5717 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5718 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5718 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5719 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5719 != Fp::invalid());
          extern_log(ctx, cycle, "  Read from %u: %w", {x5693, x5716, x5717, x5718, x5719});
        }
        if (x5679 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[3](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5720 = args[1][12];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[3](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5721 = args[1][13];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[3](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5722 = args[1][14];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[3](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5723 = args[1][15];
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5720);
            reg = x5720;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5721);
            reg = x5721;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5722);
            reg = x5722;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5723);
            reg = x5723;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5724 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5724 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5725 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5725 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5726 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5726 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5727 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5727 != Fp::invalid());
          extern_log(ctx, cycle, "  Read from %u: %w", {x5693, x5724, x5725, x5726, x5727});
        }
        if (x5682 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[4](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5728 = args[1][16];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[4](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5729 = args[1][17];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[4](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5730 = args[1][18];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[4](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5731 = args[1][19];
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5728);
            reg = x5728;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5729);
            reg = x5729;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5730);
            reg = x5730;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5731);
            reg = x5731;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5732 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5732 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5733 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5733 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5734 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5734 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5735 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5735 != Fp::invalid());
          extern_log(ctx, cycle, "  Read from %u: %w", {x5693, x5732, x5733, x5734, x5735});
        }
        if (x5685 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[5](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5736 = args[1][20];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[5](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5737 = args[1][21];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[5](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5738 = args[1][22];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[5](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5739 = args[1][23];
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5736);
            reg = x5736;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5737);
            reg = x5737;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5738);
            reg = x5738;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5739);
            reg = x5739;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5740 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5740 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5741 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5741 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5742 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5742 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5743 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5743 != Fp::invalid());
          extern_log(ctx, cycle, "  Read from %u: %w", {x5693, x5740, x5741, x5742, x5743});
        }
        if (x5688 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[6](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5744 = args[1][24];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[6](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5745 = args[1][25];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[6](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5746 = args[1][26];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[6](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5747 = args[1][27];
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5744);
            reg = x5744;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5745);
            reg = x5745;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5746);
            reg = x5746;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5747);
            reg = x5747;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5748 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5748 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5749 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5749 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5750 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5750 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5751 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5751 != Fp::invalid());
          extern_log(ctx, cycle, "  Read from %u: %w", {x5693, x5748, x5749, x5750, x5751});
        }
        if (x5691 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[7](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5752 = args[1][28];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[7](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5753 = args[1][29];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[7](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5754 = args[1][30];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[7](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5755 = args[1][31];
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5752);
            reg = x5752;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5753);
            reg = x5753;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5754);
            reg = x5754;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5755);
            reg = x5755;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5756 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5756 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5757 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5757 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5758 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5758 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x5759 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5759 != Fp::invalid());
          extern_log(ctx, cycle, "  Read from %u: %w", {x5693, x5756, x5757, x5758, x5759});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5760 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x5760 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5761 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x5761 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5762 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x5762 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5763 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x5763 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5760);
          reg = x5760;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5761);
          reg = x5761;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5762);
          reg = x5762;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5763);
          reg = x5763;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x27, x5760, x5761, x5762, x5763, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5764 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5764 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5765 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5765 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5766 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5766 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5767 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5767 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5764);
          reg = x5764;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5765);
          reg = x5765;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5766);
          reg = x5766;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5767);
          reg = x5767;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":51:0)
        auto x5768 = x959 + x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x5769 = x5768 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5770 = Fp(x5769.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5770);
            reg = x5770;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5771 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5771 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5772 = x5769 - x5771;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5773 = x5772 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5774 = Fp(x5773.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5774);
            reg = x5774;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5775 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5775 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5776 = x5773 - x5775;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5777 = x5776 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5778 = Fp(x5777.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5778);
            reg = x5778;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5779 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5779 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5780 = x5777 - x5779;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5781 = x5780 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x5782 = Fp(x5781.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5782);
            reg = x5782;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5783 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5783 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5784 = x5781 - x5783;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5785 = x5784 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5785);
          reg = x5785;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5786 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5786 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5787 = x96 - x5786;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5788 = x5786 * x5787;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5788);
          reg = x5788;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5789 = x93 - x5786;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5790 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5790 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5791 = x5790 * x5789;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x5791 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":52:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
      }
      if (x5592 != 0) {
        {
          auto [x5792, x5793, x5794, x5795] = extern_ramRead(ctx, cycle, "", {x27, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5792);
            reg = x5792;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5793);
            reg = x5793;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5794);
            reg = x5794;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5795);
            reg = x5795;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5796 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5796 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5797 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5797 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5798 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5798 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5799 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5799 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5796);
          reg = x5796;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5797);
          reg = x5797;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5798);
          reg = x5798;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5799);
          reg = x5799;
        }
        {
          auto [x5800, x5801, x5802, x5803] = extern_ramRead(ctx, cycle, "", {x28, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5800);
            reg = x5800;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5801);
            reg = x5801;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5802);
            reg = x5802;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5803);
            reg = x5803;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5804 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5804 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5805 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5805 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5806 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5806 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5807 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5807 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5804);
          reg = x5804;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5805);
          reg = x5805;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5806);
          reg = x5806;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5807);
          reg = x5807;
        }
        {
          // loc("./zirgen/components/u32.h":27:0)
          auto x5808 = x5807 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x5809 = x5806 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x5810 = x5805 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x5811 = x5804 + x5810;
          // loc("./zirgen/components/u32.h":26:0)
          auto x5812 = x5811 + x5809;
          // loc("./zirgen/components/u32.h":27:0)
          auto x5813 = x5812 + x5808;
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":79:0)
          auto x5814 = Fp(x5813.asUInt32() & x76.asUInt32());
          if (x5814 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":81:0)
            auto x5815 = x5813 - x5814;
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":81:0)
            auto x5816 = x5815 + x77;
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":81:0)
            auto x5817 = x5816 * x75;
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":81:0)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5817);
              reg = x5817;
            }
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":82:0)
            auto x5818 = x5814 - x96;
            // loc("./zirgen/components/bits.h":68:0)
            {
              auto& reg = args[2][76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5818);
              reg = x5818;
            }
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":84:0)
          auto x5819 = (x5814 == 0) ? Fp(1) : Fp(0);
          if (x5819 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":85:0)
            auto x5820 = x5813 * x75;
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":85:0)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5820);
              reg = x5820;
            }
            // loc("./zirgen/components/bits.h":68:0)
            {
              auto& reg = args[2][76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x76);
              reg = x76;
            }
          }
        }
        // loc("./zirgen/components/u32.h":27:0)
        auto x5821 = x5807 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x5822 = x5806 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x5823 = x5805 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x5824 = x5804 + x5823;
        // loc("./zirgen/components/u32.h":26:0)
        auto x5825 = x5824 + x5822;
        // loc("./zirgen/components/u32.h":27:0)
        auto x5826 = x5825 + x5821;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5827 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x5827 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5828 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x5828 != Fp::invalid());
        extern_log(ctx, cycle, "Calculated orig = %u, output chunks = %u, first cycle-1 = %u", {x5826, x5827, x5828});
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":95:0)
        auto x5829 = x5828 + x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":95:0)
        auto x5830 = x5827 - x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":95:0)
        auto x5831 = x5830 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":95:0)
        auto x5832 = x5831 + x5829;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":94:0)
        auto x5833 = x5826 - x5832;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":94:0)
        if (x5833 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:94");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":98:0)
        auto x5834 = x5796 * x75;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5835 = Fp(x5834.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5835);
            reg = x5835;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5836 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x5836 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5837 = x5834 - x5836;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5838 = x5837 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":98:0)
        if (x5838 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:98");
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5839 = Fp(x5834.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5839);
            reg = x5839;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5840 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x5840 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5841 = x5834 - x5840;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5842 = x5841 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":99:0)
        if (x5842 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:99");
        {
          extern_syscallInit(ctx, cycle, "", {x5826});
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x5843 = x959 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5844 = Fp(x5843.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5844);
            reg = x5844;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5845 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5845 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5846 = x5843 - x5845;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5847 = x5846 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5848 = Fp(x5847.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5848);
            reg = x5848;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5849 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5849 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5850 = x5847 - x5849;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5851 = x5850 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5852 = Fp(x5851.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5852);
            reg = x5852;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5853 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5853 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5854 = x5851 - x5853;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5855 = x5854 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x5856 = Fp(x5855.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5856);
            reg = x5856;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5857 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5857 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5858 = x5855 - x5857;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5859 = x5858 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5859);
          reg = x5859;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5860 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5860 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5861 = x96 - x5860;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5862 = x5860 * x5861;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5862);
          reg = x5862;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5863 = x93 - x5860;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5864 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5864 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5865 = x5864 * x5863;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x5865 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":104:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        extern_log(ctx, cycle, "Set next major to be ecall copy in", {});
      }
      if (x5595 != 0) {
        {
          auto [x5866, x5867, x5868, x5869] = extern_ramRead(ctx, cycle, "", {x27, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5866);
            reg = x5866;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5867);
            reg = x5867;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5868);
            reg = x5868;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5869);
            reg = x5869;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5870 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5870 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5871 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5871 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5872 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5872 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5873 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5873 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5870);
          reg = x5870;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5871);
          reg = x5871;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5872);
          reg = x5872;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5873);
          reg = x5873;
        }
        {
          auto [x5874, x5875, x5876, x5877] = extern_ramRead(ctx, cycle, "", {x28, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5874);
            reg = x5874;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5875);
            reg = x5875;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5876);
            reg = x5876;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5877);
            reg = x5877;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5878 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5878 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5879 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5879 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5880 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5880 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5881 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5881 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5878);
          reg = x5878;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5879);
          reg = x5879;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5880);
          reg = x5880;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5881);
          reg = x5881;
        }
        {
          auto [x5882, x5883, x5884, x5885] = extern_ramRead(ctx, cycle, "", {x26, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5882);
            reg = x5882;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5883);
            reg = x5883;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5884);
            reg = x5884;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5885);
            reg = x5885;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5886 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x5886 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5887 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x5887 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5888 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x5888 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5889 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x5889 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5886);
          reg = x5886;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5887);
          reg = x5887;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5888);
          reg = x5888;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5889);
          reg = x5889;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":119:0)
        auto x5890 = x959 + x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x5891 = x5890 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5892 = Fp(x5891.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5892);
            reg = x5892;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5893 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5893 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5894 = x5891 - x5893;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5895 = x5894 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5896 = Fp(x5895.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5896);
            reg = x5896;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5897 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5897 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5898 = x5895 - x5897;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5899 = x5898 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5900 = Fp(x5899.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5900);
            reg = x5900;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5901 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5901 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5902 = x5899 - x5901;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5903 = x5902 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x5904 = Fp(x5903.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5904);
            reg = x5904;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5905 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5905 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5906 = x5903 - x5905;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5907 = x5906 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5907);
          reg = x5907;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5908 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5908 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5909 = x96 - x5908;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5910 = x5908 * x5909;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5910);
          reg = x5910;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5911 = x93 - x5908;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5912 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5912 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5913 = x5912 * x5911;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x5913 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":120:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
      if (x5598 != 0) {
        {
          auto [x5914, x5915, x5916, x5917] = extern_ramRead(ctx, cycle, "", {x28, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5914);
            reg = x5914;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5915);
            reg = x5915;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5916);
            reg = x5916;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5917);
            reg = x5917;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5918 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5918 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5919 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5919 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5920 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5920 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5921 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5921 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5918);
          reg = x5918;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5919);
          reg = x5919;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5920);
          reg = x5920;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5921);
          reg = x5921;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x5922 = x959 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5923 = Fp(x5922.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5923);
            reg = x5923;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5924 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5924 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5925 = x5922 - x5924;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5926 = x5925 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5927 = Fp(x5926.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5927);
            reg = x5927;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5928 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5928 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5929 = x5926 - x5928;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5930 = x5929 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x5931 = Fp(x5930.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5931);
            reg = x5931;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x5932 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5932 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5933 = x5930 - x5932;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x5934 = x5933 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x5935 = Fp(x5934.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5935);
            reg = x5935;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5936 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5936 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5937 = x5934 - x5936;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x5938 = x5937 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5938);
          reg = x5938;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5939 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5939 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5940 = x96 - x5939;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x5941 = x5939 * x5940;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5941);
          reg = x5941;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5942 = x93 - x5939;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5943 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5943 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x5944 = x5943 * x5942;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x5944 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":132:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./zirgen/components/mux.h":49:0))
    auto x5945 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x5945 != Fp::invalid());
    if (x5945 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":174:0))
      auto x5946 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x5946 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":175:0))
      auto x5947 = args[2][112 * steps + ((cycle - 1) & mask)];
      assert(x5947 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":176:0)
      auto x5948 = x5946 + x5947;
      if (x5948 != 0) {
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":178:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":180:0)
      auto x5949 = x96 - x5946;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":180:0)
      auto x5950 = x5949 - x5947;
      if (x5950 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x5951 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x5951 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5951);
          reg = x5951;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":183:0))
        auto x5952 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5952 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":183:0)
        auto x5953 = x5952 - x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":183:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5953);
          reg = x5953;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5954 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x5954 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x5955 = (x5954 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5955);
          reg = x5955;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x5956 = inv(x5954);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5956);
          reg = x5956;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x5957 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x5957 != Fp::invalid());
      if (x5957 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x5954 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x5958 = x96 - x5957;
      if (x5958 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5959 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x5959 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x5960 = x5954 * x5959;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x5961 = x5960 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x5961 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x5957 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":187:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
      }
      if (x5958 != 0) {
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5962 = x2504 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5963 = x1720 + x5962;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5964 = x3207 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5965 = x5963 + x5964;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5966 = x3963 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5967 = x5965 + x5966;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5968 = x4414 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5969 = x5967 + x5968;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5970 = x4778 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5971 = x5969 + x5970;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5972 = x5210 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5973 = x5971 + x5972;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5974 = x5563 * x69;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5975 = x5973 + x5974;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5976 = x5945 * x68;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5977 = x5975 + x5976;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5978 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5978 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5979 = x5978 * x67;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5980 = x5977 + x5979;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5981 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5981 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5982 = x5981 * x66;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5983 = x5980 + x5982;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5984 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5984 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5985 = x5984 * x65;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5986 = x5983 + x5985;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5987 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5987 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5988 = x5987 * x64;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5989 = x5986 + x5988;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5990 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5990 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5991 = x5990 * x63;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5992 = x5989 + x5991;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x5993 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x5993 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5994 = x5993 * x73;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x5995 = x5992 + x5994;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":188:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5995);
          reg = x5995;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x5996 = x959 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x5997 = Fp(x5996.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5997);
          reg = x5997;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x5998 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5998 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x5999 = x5996 - x5998;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6000 = x5999 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x6001 = Fp(x6000.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6001);
          reg = x6001;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x6002 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x6002 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6003 = x6000 - x6002;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6004 = x6003 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x6005 = Fp(x6004.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6005);
          reg = x6005;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x6006 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x6006 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6007 = x6004 - x6006;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6008 = x6007 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x6009 = Fp(x6008.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6009);
          reg = x6009;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6010 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x6010 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x6011 = x6008 - x6010;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x6012 = x6011 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6012);
        reg = x6012;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6013 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x6013 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x6014 = x96 - x6013;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x6015 = x6013 * x6014;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6015);
        reg = x6015;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x6016 = x93 - x6013;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x6017 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x6017 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x6018 = x6017 * x6016;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x6018 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6019 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x6019 != Fp::invalid());
      extern_log(ctx, cycle, "SHA_INIT: major = %u, minor = %u, count = %u", {x68, x6019, x5954});
      if (x5946 != 0) {
        {
          auto [x6020, x6021, x6022, x6023] = extern_ramRead(ctx, cycle, "", {x25, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6020);
            reg = x6020;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6021);
            reg = x6021;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6022);
            reg = x6022;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6023);
            reg = x6023;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6024 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6024 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6025 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6025 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6026 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6026 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6027 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6027 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6024);
          reg = x6024;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6025);
          reg = x6025;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6026);
          reg = x6026;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6027);
          reg = x6027;
        }
        {
          auto [x6028, x6029, x6030, x6031] = extern_ramRead(ctx, cycle, "", {x24, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6028);
            reg = x6028;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6029);
            reg = x6029;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6030);
            reg = x6030;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6031);
            reg = x6031;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6032 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6032 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6033 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6033 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6034 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6034 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6035 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6035 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6032);
          reg = x6032;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6033);
          reg = x6033;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6034);
          reg = x6034;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6035);
          reg = x6035;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6036 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x6036 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6037 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x6037 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6038 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x6038 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6039 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x6039 != Fp::invalid());
        // loc("./zirgen/components/u32.h":27:0)
        auto x6040 = x6039 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6041 = x6038 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6042 = x6037 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6043 = x6036 + x6042;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6044 = x6043 + x6041;
        // loc("./zirgen/components/u32.h":27:0)
        auto x6045 = x6044 + x6040;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":197:0)
        auto x6046 = x6045 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":197:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6046);
          reg = x6046;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6047 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x6047 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6048 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x6048 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6049 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x6049 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6050 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x6050 != Fp::invalid());
        // loc("./zirgen/components/u32.h":27:0)
        auto x6051 = x6050 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6052 = x6049 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6053 = x6048 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6054 = x6047 + x6053;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6055 = x6054 + x6052;
        // loc("./zirgen/components/u32.h":27:0)
        auto x6056 = x6055 + x6051;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":198:0)
        auto x6057 = x6056 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":198:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6057);
          reg = x6057;
        }
        // loc("./zirgen/components/u32.h":27:0)
        auto x6058 = x6027 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6059 = x6026 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6060 = x6025 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6061 = x6024 + x6060;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6062 = x6061 + x6059;
        // loc("./zirgen/components/u32.h":27:0)
        auto x6063 = x6062 + x6058;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":199:0)
        auto x6064 = x6063 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":199:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6064);
          reg = x6064;
        }
        // loc("./zirgen/components/u32.h":27:0)
        auto x6065 = x6035 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6066 = x6034 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6067 = x6033 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6068 = x6032 + x6067;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6069 = x6068 + x6066;
        // loc("./zirgen/components/u32.h":27:0)
        auto x6070 = x6069 + x6065;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":200:0)
        auto x6071 = x6070 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":200:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6071);
          reg = x6071;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6072 = args[2][147 * steps + ((cycle - 1) & mask)];
        assert(x6072 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6073 = args[2][148 * steps + ((cycle - 1) & mask)];
        assert(x6073 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6074 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x6074 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6075 = args[2][150 * steps + ((cycle - 1) & mask)];
        assert(x6075 != Fp::invalid());
        // loc("./zirgen/components/u32.h":27:0)
        auto x6076 = x6075 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6077 = x6074 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6078 = x6073 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x6079 = x6072 + x6078;
        // loc("./zirgen/components/u32.h":26:0)
        auto x6080 = x6079 + x6077;
        // loc("./zirgen/components/u32.h":27:0)
        auto x6081 = x6080 + x6076;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":201:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6081);
          reg = x6081;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":203:0)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6082 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x6082 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":208:0)
        auto x6083 = x6082 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6084 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x6084 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":207:0)
        auto x6085 = x6084 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6086 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6086 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":206:0)
        auto x6087 = x6086 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6088 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x6088 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":205:0)
        auto x6089 = x6088 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6090 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x6090 != Fp::invalid());
        extern_log(ctx, cycle, "  FromEcall: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", {x6089, x6087, x6085, x6083, x6090});
      }
      if (x5947 != 0) {
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":215:0))
        auto x6091 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x6091 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":215:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6091);
          reg = x6091;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":216:0))
        auto x6092 = args[2][117 * steps + ((cycle - 1) & mask)];
        assert(x6092 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":216:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6092);
          reg = x6092;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":217:0))
        auto x6093 = args[2][120 * steps + ((cycle - 1) & mask)];
        assert(x6093 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":14:0)
        auto x6094 = x6093 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":14:0)
        auto x6095 = x6094 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":217:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6095);
          reg = x6095;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":218:0)
        auto x6096 = x6095 + x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":218:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6096);
          reg = x6096;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":219:0))
        auto x6097 = args[2][121 * steps + ((cycle - 1) & mask)];
        assert(x6097 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":219:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6097);
          reg = x6097;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6098 = args[2][118 * steps + ((cycle - 1) & mask)];
        assert(x6098 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6098);
          reg = x6098;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":221:0)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6099 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x6099 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":226:0)
        auto x6100 = x6099 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6101 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x6101 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":225:0)
        auto x6102 = x6101 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6103 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6103 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":224:0)
        auto x6104 = x6103 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6105 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x6105 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":223:0)
        auto x6106 = x6105 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6107 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x6107 != Fp::invalid());
        extern_log(ctx, cycle, "  FromPageFault: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", {x6106, x6104, x6102, x6100, x6107});
      }
      if (x5950 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":230:0))
        auto x6108 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x6108 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":230:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6108);
          reg = x6108;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":231:0))
        auto x6109 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x6109 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":231:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6109);
          reg = x6109;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":232:0))
        auto x6110 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x6110 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":232:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6110);
          reg = x6110;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":233:0))
        auto x6111 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x6111 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":233:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6111);
          reg = x6111;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":234:0))
        auto x6112 = args[2][146 * steps + ((cycle - 1) & mask)];
        assert(x6112 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":234:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6112);
          reg = x6112;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6113 = args[2][151 * steps + ((cycle - 1) & mask)];
        assert(x6113 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6113);
          reg = x6113;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":236:0))
        auto x6114 = args[2][152 * steps + ((cycle - 1) & mask)];
        assert(x6114 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":236:0)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6114);
          reg = x6114;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6115 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6115 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":239:0)
        auto x6116 = x6115 + x5954;
        {
          auto [x6117, x6118, x6119, x6120] = extern_ramRead(ctx, cycle, "", {x6116, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6117);
            reg = x6117;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6118);
            reg = x6118;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6119);
            reg = x6119;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6120);
            reg = x6120;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6121 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6121 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6122 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6122 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6123 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6123 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6124 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6124 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6116);
          reg = x6116;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6121);
          reg = x6121;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6122);
          reg = x6122;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6123);
          reg = x6123;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6124);
          reg = x6124;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":240:0)
        auto x6125 = x6116 + x77;
        {
          auto [x6126, x6127, x6128, x6129] = extern_ramRead(ctx, cycle, "", {x6125, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6126);
            reg = x6126;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6127);
            reg = x6127;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6128);
            reg = x6128;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6129);
            reg = x6129;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6130 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6130 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6131 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6131 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6132 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6132 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6133 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6133 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6125);
          reg = x6125;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6130);
          reg = x6130;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6131);
          reg = x6131;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6132);
          reg = x6132;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6133);
          reg = x6133;
        }
      }
      // loc("./zirgen/components/bits.h":27:0)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6134 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x6134 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x6135 = (x6134 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6135);
          reg = x6135;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x6136 = inv(x6134);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6136);
          reg = x6136;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6137 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x6137 != Fp::invalid());
      if (x6137 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x6134 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x6138 = x96 - x6137;
      if (x6138 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6139 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x6139 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x6140 = x6134 * x6139;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x6141 = x6140 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x6141 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      {
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6142 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6142 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6143 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6143 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6144 = x6143 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6145 = x6142 + x6144;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6146 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x6146 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6147 = x6146 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6148 = x6145 + x6147;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6149 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6149 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6150 = x6149 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6151 = x6148 + x6150;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6152 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6152 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6153 = x6152 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6154 = x6151 + x6153;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6155 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6155 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6156 = x6155 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6157 = x6154 + x6156;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6158 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6158 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6159 = x6158 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6160 = x6157 + x6159;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6161 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6161 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6162 = x6161 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6163 = x6160 + x6162;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6164 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6164 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6165 = x6164 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6166 = x6163 + x6165;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6167 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6167 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6168 = x6167 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6169 = x6166 + x6168;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6170 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6170 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6171 = x6170 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6172 = x6169 + x6171;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6173 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x6173 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6174 = x6173 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6175 = x6172 + x6174;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6176 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x6176 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6177 = x6176 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6178 = x6175 + x6177;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6179 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x6179 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6180 = x6179 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6181 = x6178 + x6180;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6182 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x6182 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6183 = x6182 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6184 = x6181 + x6183;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6185 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x6185 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6186 = x6185 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6187 = x6184 + x6186;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6188 = x95 - x6187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6189 = x6188 * x10;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6189);
        reg = x6189;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6190 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x6190 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6191 = Fp(x6190.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6191);
          reg = x6191;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6192 = Fp(x6190.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6193 = x6192 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6193);
          reg = x6193;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6194 = Fp(x6190.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6195 = x6194 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6195);
          reg = x6195;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6196 = Fp(x6190.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6197 = x6196 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6197);
          reg = x6197;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6198 = Fp(x6190.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6199 = x6198 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6199);
          reg = x6199;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6200 = Fp(x6190.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6201 = x6200 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6201);
          reg = x6201;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6202 = Fp(x6190.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6203 = x6202 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6203);
          reg = x6203;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6204 = Fp(x6190.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6205 = x6204 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6205);
          reg = x6205;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6206 = Fp(x6190.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6207 = x6206 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6207);
          reg = x6207;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6208 = Fp(x6190.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6209 = x6208 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6209);
          reg = x6209;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6210 = Fp(x6190.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6211 = x6210 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6211);
          reg = x6211;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6212 = Fp(x6190.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6213 = x6212 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6213);
          reg = x6213;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6214 = Fp(x6190.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6215 = x6214 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6215);
          reg = x6215;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6216 = Fp(x6190.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6217 = x6216 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6217);
          reg = x6217;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6218 = Fp(x6190.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6219 = x6218 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6219);
          reg = x6219;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6220 = Fp(x6190.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6221 = x6220 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6221);
          reg = x6221;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6222 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x6222 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6223 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6223 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6224 = x6223 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6225 = x6222 + x6224;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6226 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6226 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6227 = x6226 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6228 = x6225 + x6227;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6229 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6229 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6230 = x6229 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6231 = x6228 + x6230;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6232 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6232 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6233 = x6232 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6234 = x6231 + x6233;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6235 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6235 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6236 = x6235 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6237 = x6234 + x6236;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6238 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6238 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6239 = x6238 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6240 = x6237 + x6239;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6241 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6241 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6242 = x6241 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6243 = x6240 + x6242;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6244 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6244 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6245 = x6244 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6246 = x6243 + x6245;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6247 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6247 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6248 = x6247 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6249 = x6246 + x6248;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6250 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6250 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6251 = x6250 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6252 = x6249 + x6251;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6253 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6253 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6254 = x6253 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6255 = x6252 + x6254;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6256 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6256 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6257 = x6256 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6258 = x6255 + x6257;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6259 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6259 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6260 = x6259 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6261 = x6258 + x6260;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6262 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6262 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6263 = x6262 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6264 = x6261 + x6263;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6265 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6265 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6266 = x6265 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6267 = x6264 + x6266;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6268 = x6190 - x6267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6269 = x6268 * x10;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6269);
        reg = x6269;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6270 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6270 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6271 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6271 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6272 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6272 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6273 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6273 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6274 = x6272 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6275 = x6273 + x6274;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6276 = x6270 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6277 = x6271 + x6276;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6278 = Fp(x6275.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6278);
          reg = x6278;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6279 = Fp(x6275.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6280 = x6279 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6280);
          reg = x6280;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6281 = Fp(x6275.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6282 = x6281 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6282);
          reg = x6282;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6283 = Fp(x6275.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6284 = x6283 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6284);
          reg = x6284;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6285 = Fp(x6275.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6286 = x6285 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6286);
          reg = x6286;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6287 = Fp(x6275.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6288 = x6287 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6288);
          reg = x6288;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6289 = Fp(x6275.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6290 = x6289 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6290);
          reg = x6290;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6291 = Fp(x6275.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6292 = x6291 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6292);
          reg = x6292;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6293 = Fp(x6275.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6294 = x6293 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6294);
          reg = x6294;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6295 = Fp(x6275.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6296 = x6295 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6296);
          reg = x6296;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6297 = Fp(x6275.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6298 = x6297 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6298);
          reg = x6298;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6299 = Fp(x6275.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6300 = x6299 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6300);
          reg = x6300;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6301 = Fp(x6275.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6302 = x6301 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6302);
          reg = x6302;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6303 = Fp(x6275.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6304 = x6303 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6304);
          reg = x6304;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6305 = Fp(x6275.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6306 = x6305 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6306);
          reg = x6306;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6307 = Fp(x6275.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6308 = x6307 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6308);
          reg = x6308;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6309 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x6309 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6310 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x6310 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6311 = x6310 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6312 = x6309 + x6311;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6313 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x6313 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6314 = x6313 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6315 = x6312 + x6314;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6316 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x6316 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6317 = x6316 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6318 = x6315 + x6317;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6319 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x6319 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6320 = x6319 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6321 = x6318 + x6320;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6322 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x6322 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6323 = x6322 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6324 = x6321 + x6323;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6325 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x6325 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6326 = x6325 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6327 = x6324 + x6326;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6328 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x6328 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6329 = x6328 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6330 = x6327 + x6329;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6331 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x6331 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6332 = x6331 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6333 = x6330 + x6332;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6334 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x6334 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6335 = x6334 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6336 = x6333 + x6335;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6337 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x6337 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6338 = x6337 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6339 = x6336 + x6338;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6340 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x6340 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6341 = x6340 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6342 = x6339 + x6341;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6343 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x6343 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6344 = x6343 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6345 = x6342 + x6344;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6346 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x6346 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6347 = x6346 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6348 = x6345 + x6347;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6349 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x6349 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6350 = x6349 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6351 = x6348 + x6350;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6352 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x6352 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6353 = x6352 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6354 = x6351 + x6353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6355 = x6275 - x6354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6356 = x6355 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:0)
        auto x6357 = Fp(x6356.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6357);
          reg = x6357;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6358 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6358 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
      auto x6359 = x6356 - x6358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
      auto x6360 = x6359 * x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      auto x6361 = x96 - x6360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      auto x6362 = x6360 * x6361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      if (x6362 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:0)
      auto x6363 = x6277 + x6356;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6364 = Fp(x6363.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6364);
          reg = x6364;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6365 = Fp(x6363.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6366 = x6365 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6366);
          reg = x6366;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6367 = Fp(x6363.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6368 = x6367 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6368);
          reg = x6368;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6369 = Fp(x6363.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6370 = x6369 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6370);
          reg = x6370;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6371 = Fp(x6363.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6372 = x6371 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6372);
          reg = x6372;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6373 = Fp(x6363.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6374 = x6373 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6374);
          reg = x6374;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6375 = Fp(x6363.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6376 = x6375 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6376);
          reg = x6376;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6377 = Fp(x6363.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6378 = x6377 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6378);
          reg = x6378;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6379 = Fp(x6363.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6380 = x6379 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6380);
          reg = x6380;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6381 = Fp(x6363.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6382 = x6381 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6382);
          reg = x6382;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6383 = Fp(x6363.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6384 = x6383 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6384);
          reg = x6384;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6385 = Fp(x6363.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6386 = x6385 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6386);
          reg = x6386;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6387 = Fp(x6363.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6388 = x6387 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6388);
          reg = x6388;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6389 = Fp(x6363.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6390 = x6389 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6390);
          reg = x6390;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6391 = Fp(x6363.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6392 = x6391 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6392);
          reg = x6392;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6393 = Fp(x6363.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6394 = x6393 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6394);
          reg = x6394;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6395 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x6395 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6396 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x6396 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6397 = x6396 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6398 = x6395 + x6397;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6399 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x6399 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6400 = x6399 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6401 = x6398 + x6400;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6402 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x6402 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6403 = x6402 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6404 = x6401 + x6403;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6405 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x6405 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6406 = x6405 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6407 = x6404 + x6406;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6408 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x6408 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6409 = x6408 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6410 = x6407 + x6409;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6411 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x6411 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6412 = x6411 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6413 = x6410 + x6412;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6414 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6414 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6415 = x6414 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6416 = x6413 + x6415;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6417 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6417 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6418 = x6417 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6419 = x6416 + x6418;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6420 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6420 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6421 = x6420 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6422 = x6419 + x6421;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6423 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6423 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6424 = x6423 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6425 = x6422 + x6424;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6426 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6426 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6427 = x6426 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6428 = x6425 + x6427;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6429 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6429 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6430 = x6429 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6431 = x6428 + x6430;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6432 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6432 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6433 = x6432 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6434 = x6431 + x6433;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6435 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6435 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6436 = x6435 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6437 = x6434 + x6436;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6438 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6438 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6439 = x6438 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6440 = x6437 + x6439;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6441 = x6363 - x6440;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6442 = x6441 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:0)
        auto x6443 = Fp(x6442.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6443);
          reg = x6443;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6444 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x6444 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
      auto x6445 = x6442 - x6444;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
      auto x6446 = x6445 * x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      auto x6447 = x96 - x6446;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      auto x6448 = x6446 * x6447;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      if (x6448 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6449 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x6449 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6450 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x6450 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6451 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x6451 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6452 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x6452 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6453 = x6451 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6454 = x6452 + x6453;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6455 = x6449 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6456 = x6450 + x6455;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6457 = Fp(x6454.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6457);
          reg = x6457;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6458 = Fp(x6454.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6459 = x6458 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6459);
          reg = x6459;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6460 = Fp(x6454.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6461 = x6460 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6461);
          reg = x6461;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6462 = Fp(x6454.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6463 = x6462 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6463);
          reg = x6463;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6464 = Fp(x6454.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6465 = x6464 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6465);
          reg = x6465;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6466 = Fp(x6454.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6467 = x6466 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6467);
          reg = x6467;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6468 = Fp(x6454.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6469 = x6468 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6469);
          reg = x6469;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6470 = Fp(x6454.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6471 = x6470 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6471);
          reg = x6471;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6472 = Fp(x6454.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6473 = x6472 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6473);
          reg = x6473;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6474 = Fp(x6454.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6475 = x6474 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6475);
          reg = x6475;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6476 = Fp(x6454.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6477 = x6476 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6477);
          reg = x6477;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6478 = Fp(x6454.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6479 = x6478 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6479);
          reg = x6479;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6480 = Fp(x6454.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6481 = x6480 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6481);
          reg = x6481;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6482 = Fp(x6454.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6483 = x6482 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6483);
          reg = x6483;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6484 = Fp(x6454.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6485 = x6484 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6485);
          reg = x6485;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6486 = Fp(x6454.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6487 = x6486 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6487);
          reg = x6487;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6488 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6488 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6489 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6489 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6490 = x6489 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6491 = x6488 + x6490;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6492 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6492 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6493 = x6492 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6494 = x6491 + x6493;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6495 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6495 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6496 = x6495 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6497 = x6494 + x6496;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6498 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6498 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6499 = x6498 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6500 = x6497 + x6499;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6501 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6501 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6502 = x6501 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6503 = x6500 + x6502;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6504 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6504 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6505 = x6504 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6506 = x6503 + x6505;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6507 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6507 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6508 = x6507 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6509 = x6506 + x6508;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6510 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6510 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6511 = x6510 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6512 = x6509 + x6511;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6513 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6513 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6514 = x6513 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6515 = x6512 + x6514;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6516 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6516 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6517 = x6516 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6518 = x6515 + x6517;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6519 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6519 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6520 = x6519 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6521 = x6518 + x6520;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6522 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6522 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6523 = x6522 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6524 = x6521 + x6523;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6525 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6525 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6526 = x6525 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6527 = x6524 + x6526;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6528 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6528 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6529 = x6528 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6530 = x6527 + x6529;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6531 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6531 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6532 = x6531 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6533 = x6530 + x6532;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6534 = x6454 - x6533;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6535 = x6534 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:0)
        auto x6536 = Fp(x6535.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6536);
          reg = x6536;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6537 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x6537 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
      auto x6538 = x6535 - x6537;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
      auto x6539 = x6538 * x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      auto x6540 = x96 - x6539;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      auto x6541 = x6539 * x6540;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      if (x6541 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:0)
      auto x6542 = x6456 + x6535;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6543 = Fp(x6542.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6543);
          reg = x6543;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6544 = Fp(x6542.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6545 = x6544 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6545);
          reg = x6545;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6546 = Fp(x6542.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6547 = x6546 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6547);
          reg = x6547;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6548 = Fp(x6542.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6549 = x6548 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6549);
          reg = x6549;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6550 = Fp(x6542.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6551 = x6550 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6551);
          reg = x6551;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6552 = Fp(x6542.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6553 = x6552 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6553);
          reg = x6553;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6554 = Fp(x6542.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6555 = x6554 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6555);
          reg = x6555;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6556 = Fp(x6542.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6557 = x6556 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6557);
          reg = x6557;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6558 = Fp(x6542.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6559 = x6558 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6559);
          reg = x6559;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6560 = Fp(x6542.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6561 = x6560 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6561);
          reg = x6561;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6562 = Fp(x6542.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6563 = x6562 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6563);
          reg = x6563;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6564 = Fp(x6542.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6565 = x6564 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6565);
          reg = x6565;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6566 = Fp(x6542.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6567 = x6566 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6567);
          reg = x6567;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6568 = Fp(x6542.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6569 = x6568 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6569);
          reg = x6569;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6570 = Fp(x6542.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6571 = x6570 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6571);
          reg = x6571;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6572 = Fp(x6542.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6573 = x6572 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][222 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6573);
          reg = x6573;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6574 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6574 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6575 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6576 = x6575 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6577 = x6574 + x6576;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6578 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6579 = x6578 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6580 = x6577 + x6579;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6581 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6582 = x6581 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6583 = x6580 + x6582;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6584 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6584 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6585 = x6584 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6586 = x6583 + x6585;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6587 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6588 = x6587 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6589 = x6586 + x6588;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6590 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6591 = x6590 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6592 = x6589 + x6591;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6593 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6594 = x6593 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6595 = x6592 + x6594;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6596 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6597 = x6596 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6598 = x6595 + x6597;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6599 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6600 = x6599 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6601 = x6598 + x6600;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6602 = args[2][217 * steps + ((cycle - 0) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6603 = x6602 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6604 = x6601 + x6603;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6605 = args[2][218 * steps + ((cycle - 0) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6606 = x6605 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6607 = x6604 + x6606;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6608 = args[2][219 * steps + ((cycle - 0) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6609 = x6608 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6610 = x6607 + x6609;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6611 = args[2][220 * steps + ((cycle - 0) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6612 = x6611 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6613 = x6610 + x6612;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6614 = args[2][221 * steps + ((cycle - 0) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6615 = x6614 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6616 = x6613 + x6615;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6617 = args[2][222 * steps + ((cycle - 0) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6618 = x6617 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6619 = x6616 + x6618;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6620 = x6542 - x6619;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6621 = x6620 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:0)
        auto x6622 = Fp(x6621.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6622);
          reg = x6622;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6623 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
      auto x6624 = x6621 - x6623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
      auto x6625 = x6624 * x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      auto x6626 = x96 - x6625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      auto x6627 = x6625 * x6626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      if (x6627 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/components/mux.h":49:0))
    auto x6628 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x6628 != Fp::invalid());
    if (x6628 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":262:0))
      auto x6629 = args[2][109 * steps + ((cycle - 1) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":263:0))
      auto x6630 = args[2][111 * steps + ((cycle - 1) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":264:0)
      auto x6631 = x6629 + x6630;
      if (x6631 != 0) {
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":266:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":268:0)
      auto x6632 = x96 - x6629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":268:0)
      auto x6633 = x6632 - x6630;
      if (x6633 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6634 = args[2][144 * steps + ((cycle - 1) & mask)];
        assert(x6634 != Fp::invalid());
        if (x6634 != 0) {
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":272:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":274:0)
        auto x6635 = x96 - x6634;
        if (x6635 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x6636 = args[2][149 * steps + ((cycle - 1) & mask)];
          assert(x6636 != Fp::invalid());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6636);
            reg = x6636;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":277:0))
          auto x6637 = args[2][143 * steps + ((cycle - 1) & mask)];
          assert(x6637 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":277:0)
          auto x6638 = x6637 - x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":277:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6638);
            reg = x6638;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6639 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x6639 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x6640 = (x6639 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6640);
          reg = x6640;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x6641 = inv(x6639);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6641);
          reg = x6641;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6642 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x6642 != Fp::invalid());
      if (x6642 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x6639 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x6643 = x96 - x6642;
      if (x6643 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6644 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x6644 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x6645 = x6639 * x6644;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x6646 = x6645 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x6646 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x6642 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6647 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x6647 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":284:0)
        auto x6648 = x96 - x6647;
        if (x6648 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":284:0)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x67);
            reg = x67;
          }
        }
        if (x6647 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":285:0)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x66);
            reg = x66;
          }
        }
      }
      if (x6643 != 0) {
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6649 = x2504 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6650 = x1720 + x6649;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6651 = x3207 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6652 = x6650 + x6651;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6653 = x3963 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6654 = x6652 + x6653;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6655 = x4414 * x72;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6656 = x6654 + x6655;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6657 = x4778 * x71;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6658 = x6656 + x6657;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6659 = x5210 * x70;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6660 = x6658 + x6659;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6661 = x5563 * x69;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6662 = x6660 + x6661;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6663 = x5945 * x68;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6664 = x6662 + x6663;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6665 = x6628 * x67;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6666 = x6664 + x6665;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6667 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x6667 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6668 = x6667 * x66;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6669 = x6666 + x6668;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6670 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x6670 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6671 = x6670 * x65;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6672 = x6669 + x6671;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6673 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x6673 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6674 = x6673 * x64;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6675 = x6672 + x6674;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6676 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x6676 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6677 = x6676 * x63;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6678 = x6675 + x6677;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6679 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x6679 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6680 = x6679 * x73;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x6681 = x6678 + x6680;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":287:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6681);
          reg = x6681;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x6682 = x959 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x6683 = Fp(x6682.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6683);
          reg = x6683;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x6684 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6685 = x6682 - x6684;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6686 = x6685 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x6687 = Fp(x6686.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6687);
          reg = x6687;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x6688 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6689 = x6686 - x6688;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6690 = x6689 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x6691 = Fp(x6690.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6691);
          reg = x6691;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x6692 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6693 = x6690 - x6692;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x6694 = x6693 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x6695 = Fp(x6694.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6695);
          reg = x6695;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6696 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x6697 = x6694 - x6696;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x6698 = x6697 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6698);
        reg = x6698;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6699 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x6700 = x96 - x6699;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x6701 = x6699 * x6700;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6701);
        reg = x6701;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x6702 = x93 - x6699;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x6703 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x6704 = x6703 * x6702;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x6704 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":290:0))
      auto x6705 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":290:0)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6705);
        reg = x6705;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":291:0))
      auto x6706 = args[2][140 * steps + ((cycle - 1) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":291:0)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6706);
        reg = x6706;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":292:0))
      auto x6707 = args[2][141 * steps + ((cycle - 1) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":292:0)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6707);
        reg = x6707;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":293:0))
      auto x6708 = args[2][142 * steps + ((cycle - 1) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":293:0)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6708);
        reg = x6708;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":294:0))
      auto x6709 = args[2][146 * steps + ((cycle - 1) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":294:0)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6709);
        reg = x6709;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6710 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:0)
      {
        auto& reg = args[2][151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6710);
        reg = x6710;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":296:0))
      auto x6711 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":296:0)
      {
        auto& reg = args[2][152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6711);
        reg = x6711;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6712 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x6712 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x6713 = (x6712 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6713);
          reg = x6713;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x6714 = inv(x6712);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6714);
          reg = x6714;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6715 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x6715 != Fp::invalid());
      if (x6715 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x6712 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x6716 = x96 - x6715;
      if (x6716 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x6717 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x6717 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x6718 = x6712 * x6717;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x6719 = x6718 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x6719 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("./zirgen/components/bits.h":27:0)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x6720 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":306:0)
      auto x6721 = x6720 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x6722 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":305:0)
      auto x6723 = x6722 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x6724 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":304:0)
      auto x6725 = x6724 * x77;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6726 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x6726 != Fp::invalid());
      extern_log(ctx, cycle, "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = %10x, data1 = %10x, state = %10x, repeat: %u", {x67, x6726, x6639, x6725, x6723, x6721, x6712});
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":310:0)
      auto x6727 = x96 - x6726;
      if (x6727 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":311:0))
        auto x6728 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x6728 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":311:0)
        auto x6729 = x6724 + x70;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":311:0)
        auto x6730 = x6729 - x6639;
        {
          auto [x6731, x6732, x6733, x6734] = extern_ramRead(ctx, cycle, "", {x6730, x6728});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6731);
            reg = x6731;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6732);
            reg = x6732;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6733);
            reg = x6733;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6734);
            reg = x6734;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6735 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6735 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6736 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6736 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6737 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6737 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6738 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6738 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6730);
          reg = x6730;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6728);
          reg = x6728;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6735);
          reg = x6735;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6736);
          reg = x6736;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6737);
          reg = x6737;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6738);
          reg = x6738;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":312:0)
        auto x6739 = x9 - x6639;
        {
          auto [x6740, x6741, x6742, x6743] = extern_ramRead(ctx, cycle, "", {x6739, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6740);
            reg = x6740;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6741);
            reg = x6741;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6742);
            reg = x6742;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6743);
            reg = x6743;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6744 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6744 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6745 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6745 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6746 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6746 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6747 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6747 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6739);
          reg = x6739;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6744);
          reg = x6744;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6745);
          reg = x6745;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6746);
          reg = x6746;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6747);
          reg = x6747;
        }
      }
      if (x6726 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":315:0))
        auto x6748 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x6748 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":315:0)
        auto x6749 = x6722 + x70;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":315:0)
        auto x6750 = x6749 - x6639;
        {
          auto [x6751, x6752, x6753, x6754] = extern_ramRead(ctx, cycle, "", {x6750, x6748});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6751);
            reg = x6751;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6752);
            reg = x6752;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6753);
            reg = x6753;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6754);
            reg = x6754;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6755 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6755 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6756 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6756 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6757 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6757 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6758 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6758 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6750);
          reg = x6750;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6748);
          reg = x6748;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6755);
          reg = x6755;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6756);
          reg = x6756;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6757);
          reg = x6757;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6758);
          reg = x6758;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":316:0)
        auto x6759 = x8 - x6639;
        {
          auto [x6760, x6761, x6762, x6763] = extern_ramRead(ctx, cycle, "", {x6759, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6760);
            reg = x6760;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6761);
            reg = x6761;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6762);
            reg = x6762;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6763);
            reg = x6763;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6764 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6764 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6765 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6765 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6766 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6766 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x6767 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6767 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6759);
          reg = x6759;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6764);
          reg = x6764;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6765);
          reg = x6765;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6766);
          reg = x6766;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6767);
          reg = x6767;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6768 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6768 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6769 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6769 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6770 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6770 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6771 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6771 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6772 = x6770 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6773 = x6771 + x6772;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6774 = x6768 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:0)
      auto x6775 = x6769 + x6774;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6776 = Fp(x6773.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6776);
          reg = x6776;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6777 = Fp(x6773.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6778 = x6777 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6778);
          reg = x6778;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6779 = Fp(x6773.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6780 = x6779 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6780);
          reg = x6780;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6781 = Fp(x6773.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6782 = x6781 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6782);
          reg = x6782;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6783 = Fp(x6773.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6784 = x6783 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6784);
          reg = x6784;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6785 = Fp(x6773.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6786 = x6785 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6786);
          reg = x6786;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6787 = Fp(x6773.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6788 = x6787 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6788);
          reg = x6788;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6789 = Fp(x6773.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6790 = x6789 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6790);
          reg = x6790;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6791 = Fp(x6773.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6792 = x6791 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6792);
          reg = x6792;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6793 = Fp(x6773.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6794 = x6793 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6794);
          reg = x6794;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6795 = Fp(x6773.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6796 = x6795 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6796);
          reg = x6796;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6797 = Fp(x6773.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6798 = x6797 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6798);
          reg = x6798;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6799 = Fp(x6773.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6800 = x6799 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6800);
          reg = x6800;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6801 = Fp(x6773.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6802 = x6801 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6802);
          reg = x6802;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6803 = Fp(x6773.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6804 = x6803 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6804);
          reg = x6804;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6805 = Fp(x6773.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6806 = x6805 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6806);
          reg = x6806;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6807 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6807 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6808 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6808 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6809 = x6808 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6810 = x6807 + x6809;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6811 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x6811 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6812 = x6811 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6813 = x6810 + x6812;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6814 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6814 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6815 = x6814 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6816 = x6813 + x6815;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6817 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6817 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6818 = x6817 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6819 = x6816 + x6818;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6820 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6820 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6821 = x6820 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6822 = x6819 + x6821;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6823 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6823 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6824 = x6823 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6825 = x6822 + x6824;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6826 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6826 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6827 = x6826 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6828 = x6825 + x6827;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6829 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6829 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6830 = x6829 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6831 = x6828 + x6830;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6832 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6832 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6833 = x6832 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6834 = x6831 + x6833;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6835 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6835 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6836 = x6835 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6837 = x6834 + x6836;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6838 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x6838 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6839 = x6838 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6840 = x6837 + x6839;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6841 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x6841 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6842 = x6841 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6843 = x6840 + x6842;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6844 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x6844 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6845 = x6844 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6846 = x6843 + x6845;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6847 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x6847 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6848 = x6847 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6849 = x6846 + x6848;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6850 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x6850 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6851 = x6850 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6852 = x6849 + x6851;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6853 = x6773 - x6852;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6854 = x6853 * x10;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6854);
        reg = x6854;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6855 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x6855 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":117:0)
      auto x6856 = x6775 + x6855;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6857 = Fp(x6856.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6857);
          reg = x6857;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6858 = Fp(x6856.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6859 = x6858 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6859);
          reg = x6859;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6860 = Fp(x6856.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6861 = x6860 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6861);
          reg = x6861;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6862 = Fp(x6856.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6863 = x6862 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6863);
          reg = x6863;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6864 = Fp(x6856.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6865 = x6864 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6865);
          reg = x6865;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6866 = Fp(x6856.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6867 = x6866 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6867);
          reg = x6867;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6868 = Fp(x6856.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6869 = x6868 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6869);
          reg = x6869;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6870 = Fp(x6856.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6871 = x6870 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6871);
          reg = x6871;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6872 = Fp(x6856.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6873 = x6872 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6873);
          reg = x6873;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6874 = Fp(x6856.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6875 = x6874 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6875);
          reg = x6875;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6876 = Fp(x6856.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6877 = x6876 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6877);
          reg = x6877;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6878 = Fp(x6856.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6879 = x6878 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6879);
          reg = x6879;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6880 = Fp(x6856.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6881 = x6880 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6881);
          reg = x6881;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6882 = Fp(x6856.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6883 = x6882 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6883);
          reg = x6883;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6884 = Fp(x6856.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6885 = x6884 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6885);
          reg = x6885;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6886 = Fp(x6856.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x6887 = x6886 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6887);
          reg = x6887;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6888 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x6888 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6889 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6889 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6890 = x6889 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6891 = x6888 + x6890;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6892 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6892 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6893 = x6892 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6894 = x6891 + x6893;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6895 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6895 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6896 = x6895 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6897 = x6894 + x6896;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6898 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6898 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6899 = x6898 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6900 = x6897 + x6899;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6901 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6901 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6902 = x6901 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6903 = x6900 + x6902;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6904 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6904 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6905 = x6904 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6906 = x6903 + x6905;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6907 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6907 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6908 = x6907 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6909 = x6906 + x6908;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6910 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6910 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6911 = x6910 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6912 = x6909 + x6911;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6913 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6913 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6914 = x6913 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6915 = x6912 + x6914;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6916 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6916 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6917 = x6916 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6918 = x6915 + x6917;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6919 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6919 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6920 = x6919 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6921 = x6918 + x6920;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6922 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6922 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6923 = x6922 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6924 = x6921 + x6923;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6925 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6925 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6926 = x6925 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6927 = x6924 + x6926;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6928 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6928 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6929 = x6928 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6930 = x6927 + x6929;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6931 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6931 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6932 = x6931 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x6933 = x6930 + x6932;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6934 = x6856 - x6933;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x6935 = x6934 * x10;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6935);
        reg = x6935;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6936 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6936 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6937 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6937 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6938 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6938 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6939 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6939 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6940 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6940 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6941 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6941 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6942 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6942 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6943 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6943 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6944 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6944 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6945 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6945 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6946 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6946 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6947 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6947 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6948 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6948 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6949 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6949 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6950 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6950 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6951 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6951 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6952 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6952 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6953 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6953 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6954 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6954 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6955 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6955 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6956 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6956 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6957 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6957 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6958 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6958 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6959 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6959 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6960 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6960 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6961 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6961 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6962 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6962 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6963 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6963 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6964 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6964 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6965 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6965 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6966 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6966 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6967 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6967 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6968 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6968 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6969 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6969 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6970 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6970 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6971 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6971 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6972 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6972 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6973 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6973 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6974 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6974 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6975 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6975 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6976 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6976 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6977 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6977 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6978 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6978 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6979 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6979 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6980 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6980 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6981 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6981 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6982 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6982 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6983 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6983 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6984 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6984 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6985 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6985 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6986 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6986 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6987 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6987 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6988 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6988 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6989 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6989 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6990 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6990 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6991 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6991 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6992 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6992 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6993 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6993 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6994 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6994 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6995 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6995 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6996 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6996 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6997 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6997 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6998 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6998 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x6999 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7000 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x7000 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7001 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x7001 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7002 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x7002 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7003 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x7003 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7004 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x7004 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7005 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x7005 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7006 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x7006 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7007 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x7007 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7008 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x7008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7009 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x7009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7010 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x7010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7011 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x7011 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7012 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x7012 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7013 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x7013 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7014 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x7014 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7015 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x7015 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7016 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x7016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7017 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x7017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7018 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x7018 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7019 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x7019 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7020 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x7020 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7021 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x7021 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7022 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x7022 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7023 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x7023 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7024 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x7024 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7025 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x7025 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7026 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x7026 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7027 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x7027 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7028 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x7028 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7029 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x7029 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7030 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x7030 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7031 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x7031 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7032 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x7032 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7033 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x7033 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7034 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x7034 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7035 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x7035 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7036 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x7036 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7037 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x7037 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7038 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x7038 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7039 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x7039 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7040 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x7040 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7041 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x7041 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7042 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x7042 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7043 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x7043 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7044 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x7044 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7045 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x7045 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7046 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x7046 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7047 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x7047 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7048 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x7048 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7049 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x7049 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7050 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x7050 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7051 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x7051 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7052 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x7052 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7053 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x7053 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7054 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x7054 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7055 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x7055 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7056 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x7056 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7057 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x7057 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7058 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x7058 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7059 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x7059 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7060 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x7060 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7061 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x7061 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7062 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x7062 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7063 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x7063 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7064 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x7064 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7065 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x7065 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7066 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x7066 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7067 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x7067 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7068 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x7068 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7069 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x7069 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7070 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x7070 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7071 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x7071 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7072 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x7072 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7073 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x7073 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7074 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x7074 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7075 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x7075 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7076 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x7076 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7077 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x7077 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7078 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x7078 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7079 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x7079 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7080 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x7080 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7081 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x7081 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7082 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x7082 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7083 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x7083 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7084 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x7084 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7085 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x7085 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7086 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x7086 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7087 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x7087 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7088 = args[2][215 * steps + ((cycle - 1) & mask)];
      assert(x7088 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7089 = args[2][216 * steps + ((cycle - 1) & mask)];
      assert(x7089 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7090 = args[2][217 * steps + ((cycle - 1) & mask)];
      assert(x7090 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7091 = args[2][218 * steps + ((cycle - 1) & mask)];
      assert(x7091 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7092 = args[2][219 * steps + ((cycle - 1) & mask)];
      assert(x7092 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7093 = args[2][220 * steps + ((cycle - 1) & mask)];
      assert(x7093 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7094 = args[2][221 * steps + ((cycle - 1) & mask)];
      assert(x7094 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7095 = args[2][222 * steps + ((cycle - 1) & mask)];
      assert(x7095 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7096 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x7096 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7097 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x7097 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7098 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x7098 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7099 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x7099 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7100 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x7100 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7101 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x7101 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7102 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x7102 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7103 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x7103 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7104 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x7104 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7105 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x7105 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7106 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x7106 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7107 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x7107 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7108 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x7108 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7109 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x7109 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7110 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x7110 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7111 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x7111 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7112 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x7112 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7113 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x7113 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7114 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x7114 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7115 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x7115 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7116 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x7116 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7117 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x7117 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7118 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x7118 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7119 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x7119 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7120 = args[2][215 * steps + ((cycle - 2) & mask)];
      assert(x7120 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7121 = args[2][216 * steps + ((cycle - 2) & mask)];
      assert(x7121 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7122 = args[2][217 * steps + ((cycle - 2) & mask)];
      assert(x7122 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7123 = args[2][218 * steps + ((cycle - 2) & mask)];
      assert(x7123 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7124 = args[2][219 * steps + ((cycle - 2) & mask)];
      assert(x7124 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7125 = args[2][220 * steps + ((cycle - 2) & mask)];
      assert(x7125 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7126 = args[2][221 * steps + ((cycle - 2) & mask)];
      assert(x7126 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7127 = args[2][222 * steps + ((cycle - 2) & mask)];
      assert(x7127 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7128 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x7128 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7129 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x7129 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7130 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x7130 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7131 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x7131 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7132 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x7132 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7133 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x7133 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7134 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x7134 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7135 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x7135 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7136 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x7136 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7137 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x7137 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7138 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x7138 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7139 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x7139 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7140 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x7140 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7141 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x7141 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7142 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x7142 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7143 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x7143 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7144 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x7144 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7145 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x7145 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7146 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x7146 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7147 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x7147 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7148 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x7148 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7149 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x7149 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7150 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x7150 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7151 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x7151 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7152 = args[2][215 * steps + ((cycle - 3) & mask)];
      assert(x7152 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7153 = args[2][216 * steps + ((cycle - 3) & mask)];
      assert(x7153 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7154 = args[2][217 * steps + ((cycle - 3) & mask)];
      assert(x7154 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7155 = args[2][218 * steps + ((cycle - 3) & mask)];
      assert(x7155 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7156 = args[2][219 * steps + ((cycle - 3) & mask)];
      assert(x7156 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7157 = args[2][220 * steps + ((cycle - 3) & mask)];
      assert(x7157 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7158 = args[2][221 * steps + ((cycle - 3) & mask)];
      assert(x7158 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7159 = args[2][222 * steps + ((cycle - 3) & mask)];
      assert(x7159 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7160 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x7160 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7161 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x7161 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7162 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x7162 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7163 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x7163 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7164 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x7164 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7165 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x7165 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7166 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x7166 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7167 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x7167 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7168 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x7168 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7169 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x7169 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7170 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x7170 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7171 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x7171 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7172 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x7172 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7173 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x7173 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7174 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x7174 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7175 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x7175 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7176 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x7176 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7177 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x7177 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7178 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x7178 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7179 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x7179 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7180 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x7180 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7181 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x7181 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7182 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x7182 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7183 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x7183 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7184 = args[2][215 * steps + ((cycle - 4) & mask)];
      assert(x7184 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7185 = args[2][216 * steps + ((cycle - 4) & mask)];
      assert(x7185 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7186 = args[2][217 * steps + ((cycle - 4) & mask)];
      assert(x7186 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7187 = args[2][218 * steps + ((cycle - 4) & mask)];
      assert(x7187 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7188 = args[2][219 * steps + ((cycle - 4) & mask)];
      assert(x7188 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7189 = args[2][220 * steps + ((cycle - 4) & mask)];
      assert(x7189 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7190 = args[2][221 * steps + ((cycle - 4) & mask)];
      assert(x7190 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7191 = args[2][222 * steps + ((cycle - 4) & mask)];
      assert(x7191 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7192 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x7192 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7193 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x7193 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7194 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x7194 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x7195 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x7195 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:0)
      auto x7196 = x7193 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:0)
      auto x7197 = x7192 + x7196;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:0)
      auto x7198 = x7195 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:0)
      auto x7199 = x7194 + x7198;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7200 = x6949 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7201 = x7200 * x6958;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7202 = x6949 + x6958;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7203 = x7202 - x7201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7204 = x6950 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7205 = x7204 * x6959;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7206 = x6950 + x6959;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7207 = x7206 - x7205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7208 = x6951 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7209 = x7208 * x6960;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7210 = x6951 + x6960;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7211 = x7210 - x7209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7212 = x6952 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7213 = x7212 * x6961;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7214 = x6952 + x6961;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7215 = x7214 - x7213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7216 = x6953 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7217 = x7216 * x6962;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7218 = x6953 + x6962;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7219 = x7218 - x7217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7220 = x6954 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7221 = x7220 * x6963;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7222 = x6954 + x6963;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7223 = x7222 - x7221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7224 = x6955 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7225 = x7224 * x6964;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7226 = x6955 + x6964;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7227 = x7226 - x7225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7228 = x6956 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7229 = x7228 * x6965;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7230 = x6956 + x6965;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7231 = x7230 - x7229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7232 = x6957 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7233 = x7232 * x6966;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7234 = x6957 + x6966;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7235 = x7234 - x7233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7236 = x6958 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7237 = x7236 * x6967;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7238 = x6958 + x6967;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7239 = x7238 - x7237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7240 = x6959 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7241 = x7240 * x6936;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7242 = x6959 + x6936;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7243 = x7242 - x7241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7244 = x6960 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7245 = x7244 * x6937;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7246 = x6960 + x6937;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7247 = x7246 - x7245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7248 = x6961 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7249 = x7248 * x6938;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7250 = x6961 + x6938;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7251 = x7250 - x7249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7252 = x6962 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7253 = x7252 * x6939;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7254 = x6962 + x6939;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7255 = x7254 - x7253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7256 = x6963 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7257 = x7256 * x6940;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7258 = x6963 + x6940;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7259 = x7258 - x7257;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7260 = x6964 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7261 = x7260 * x6941;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7262 = x6964 + x6941;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7263 = x7262 - x7261;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7264 = x6965 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7265 = x7264 * x6942;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7266 = x6965 + x6942;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7267 = x7266 - x7265;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7268 = x6966 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7269 = x7268 * x6943;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7270 = x6966 + x6943;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7271 = x7270 - x7269;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7272 = x6967 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7273 = x7272 * x6944;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7274 = x6967 + x6944;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7275 = x7274 - x7273;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7276 = x6936 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7277 = x7276 * x6945;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7278 = x6936 + x6945;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7279 = x7278 - x7277;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7280 = x6937 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7281 = x7280 * x6946;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7282 = x6937 + x6946;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7283 = x7282 - x7281;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7284 = x6938 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7285 = x7284 * x6947;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7286 = x6938 + x6947;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7287 = x7286 - x7285;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7288 = x6939 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7289 = x7288 * x6948;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7290 = x6939 + x6948;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7291 = x7290 - x7289;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7292 = x6940 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7293 = x7292 * x6949;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7294 = x6940 + x6949;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7295 = x7294 - x7293;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7296 = x6941 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7297 = x7296 * x6950;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7298 = x6941 + x6950;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7299 = x7298 - x7297;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7300 = x6942 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7301 = x7300 * x6951;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7302 = x6942 + x6951;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7303 = x7302 - x7301;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7304 = x6943 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7305 = x7304 * x6952;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7306 = x6943 + x6952;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7307 = x7306 - x7305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7308 = x6944 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7309 = x7308 * x6953;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7310 = x6944 + x6953;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7311 = x7310 - x7309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7312 = x6945 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7313 = x7312 * x6954;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7314 = x6945 + x6954;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7315 = x7314 - x7313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7316 = x6946 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7317 = x7316 * x6955;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7318 = x6946 + x6955;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7319 = x7318 - x7317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7320 = x6947 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7321 = x7320 * x6956;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7322 = x6947 + x6956;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7323 = x7322 - x7321;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7324 = x6948 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7325 = x7324 * x6957;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7326 = x6948 + x6957;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7327 = x7326 - x7325;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7328 = x7284 * x7203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7329 = x6938 + x7203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7330 = x7329 - x7328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7331 = x7288 * x7207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7332 = x6939 + x7207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7333 = x7332 - x7331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7334 = x7292 * x7211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7335 = x6940 + x7211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7336 = x7335 - x7334;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7337 = x7296 * x7215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7338 = x6941 + x7215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7339 = x7338 - x7337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7340 = x7300 * x7219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7341 = x6942 + x7219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7342 = x7341 - x7340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7343 = x7304 * x7223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7344 = x6943 + x7223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7345 = x7344 - x7343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7346 = x7308 * x7227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7347 = x6944 + x7227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7348 = x7347 - x7346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7349 = x7312 * x7231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7350 = x6945 + x7231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7351 = x7350 - x7349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7352 = x7316 * x7235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7353 = x6946 + x7235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7354 = x7353 - x7352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7355 = x7320 * x7239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7356 = x6947 + x7239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7357 = x7356 - x7355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7358 = x7324 * x7243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7359 = x6948 + x7243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7360 = x7359 - x7358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7361 = x7200 * x7247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7362 = x6949 + x7247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7363 = x7362 - x7361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7364 = x7204 * x7251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7365 = x6950 + x7251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7366 = x7365 - x7364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7367 = x7208 * x7255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7368 = x6951 + x7255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7369 = x7368 - x7367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7370 = x7212 * x7259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7371 = x6952 + x7259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7372 = x7371 - x7370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7373 = x7216 * x7263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7374 = x6953 + x7263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7375 = x7374 - x7373;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7376 = x7220 * x7267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7377 = x6954 + x7267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7378 = x7377 - x7376;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7379 = x7224 * x7271;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7380 = x6955 + x7271;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7381 = x7380 - x7379;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7382 = x7228 * x7275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7383 = x6956 + x7275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7384 = x7383 - x7382;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7385 = x7232 * x7279;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7386 = x6957 + x7279;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7387 = x7386 - x7385;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7388 = x7236 * x7283;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7389 = x6958 + x7283;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7390 = x7389 - x7388;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7391 = x7240 * x7287;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7392 = x6959 + x7287;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7393 = x7392 - x7391;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7394 = x7244 * x7291;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7395 = x6960 + x7291;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7396 = x7395 - x7394;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7397 = x7248 * x7295;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7398 = x6961 + x7295;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7399 = x7398 - x7397;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7400 = x7252 * x7299;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7401 = x6962 + x7299;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7402 = x7401 - x7400;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7403 = x7256 * x7303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7404 = x6963 + x7303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7405 = x7404 - x7403;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7406 = x7260 * x7307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7407 = x6964 + x7307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7408 = x7407 - x7406;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7409 = x7264 * x7311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7410 = x6965 + x7311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7411 = x7410 - x7409;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7412 = x7268 * x7315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7413 = x6966 + x7315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7414 = x7413 - x7412;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7415 = x7272 * x7319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7416 = x6967 + x7319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7417 = x7416 - x7415;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7418 = x7276 * x7323;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7419 = x6936 + x7323;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7420 = x7419 - x7418;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7421 = x7280 * x7327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7422 = x6937 + x7327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7423 = x7422 - x7421;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7424 = x7075 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7425 = x7424 * x7089;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7426 = x7075 + x7089;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7427 = x7426 - x7425;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7428 = x7076 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7429 = x7428 * x7090;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7430 = x7076 + x7090;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7431 = x7430 - x7429;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7432 = x7077 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7433 = x7432 * x7091;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7434 = x7077 + x7091;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7435 = x7434 - x7433;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7436 = x7078 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7437 = x7436 * x7092;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7438 = x7078 + x7092;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7439 = x7438 - x7437;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7440 = x7079 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7441 = x7440 * x7093;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7442 = x7079 + x7093;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7443 = x7442 - x7441;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7444 = x7080 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7445 = x7444 * x7094;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7446 = x7080 + x7094;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7447 = x7446 - x7445;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7448 = x7081 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7449 = x7448 * x7095;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7450 = x7081 + x7095;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7451 = x7450 - x7449;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7452 = x7082 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7453 = x7452 * x7064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7454 = x7082 + x7064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7455 = x7454 - x7453;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7456 = x7083 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7457 = x7456 * x7065;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7458 = x7083 + x7065;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7459 = x7458 - x7457;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7460 = x7084 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7461 = x7460 * x7066;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7462 = x7084 + x7066;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7463 = x7462 - x7461;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7464 = x7085 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7465 = x7464 * x7067;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7466 = x7085 + x7067;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7467 = x7466 - x7465;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7468 = x7086 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7469 = x7468 * x7068;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7470 = x7086 + x7068;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7471 = x7470 - x7469;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7472 = x7087 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7473 = x7472 * x7069;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7474 = x7087 + x7069;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7475 = x7474 - x7473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7476 = x7088 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7477 = x7476 * x7070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7478 = x7088 + x7070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7479 = x7478 - x7477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7480 = x7089 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7481 = x7480 * x7071;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7482 = x7089 + x7071;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7483 = x7482 - x7481;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7484 = x7090 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7485 = x7484 * x7072;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7486 = x7090 + x7072;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7487 = x7486 - x7485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7488 = x7091 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7489 = x7488 * x7073;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7490 = x7091 + x7073;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7491 = x7490 - x7489;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7492 = x7092 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7493 = x7492 * x7074;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7494 = x7092 + x7074;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7495 = x7494 - x7493;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7496 = x7093 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7497 = x7496 * x7075;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7498 = x7093 + x7075;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7499 = x7498 - x7497;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7500 = x7094 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7501 = x7500 * x7076;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7502 = x7094 + x7076;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7503 = x7502 - x7501;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7504 = x7095 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7505 = x7504 * x7077;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7506 = x7095 + x7077;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7507 = x7506 - x7505;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7508 = x7064 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7509 = x7508 * x7078;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7510 = x7064 + x7078;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7511 = x7510 - x7509;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7512 = x7065 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7513 = x7512 * x7079;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7514 = x7065 + x7079;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7515 = x7514 - x7513;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7516 = x7066 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7517 = x7516 * x7080;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7518 = x7066 + x7080;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7519 = x7518 - x7517;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7520 = x7067 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7521 = x7520 * x7081;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7522 = x7067 + x7081;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7523 = x7522 - x7521;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7524 = x7068 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7525 = x7524 * x7082;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7526 = x7068 + x7082;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7527 = x7526 - x7525;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7528 = x7069 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7529 = x7528 * x7083;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7530 = x7069 + x7083;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7531 = x7530 - x7529;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7532 = x7070 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7533 = x7532 * x7084;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7534 = x7070 + x7084;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7535 = x7534 - x7533;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7536 = x7071 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7537 = x7536 * x7085;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7538 = x7071 + x7085;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7539 = x7538 - x7537;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7540 = x7072 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7541 = x7540 * x7086;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7542 = x7072 + x7086;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7543 = x7542 - x7541;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7544 = x7073 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7545 = x7544 * x7087;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7546 = x7073 + x7087;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7547 = x7546 - x7545;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7548 = x7074 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7549 = x7548 * x7088;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7550 = x7074 + x7088;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7551 = x7550 - x7549;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7552 = x7532 * x7427;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7553 = x7070 + x7427;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7554 = x7553 - x7552;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7555 = x7536 * x7431;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7556 = x7071 + x7431;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7557 = x7556 - x7555;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7558 = x7540 * x7435;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7559 = x7072 + x7435;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7560 = x7559 - x7558;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7561 = x7544 * x7439;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7562 = x7073 + x7439;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7563 = x7562 - x7561;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7564 = x7548 * x7443;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7565 = x7074 + x7443;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7566 = x7565 - x7564;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7567 = x7424 * x7447;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7568 = x7075 + x7447;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7569 = x7568 - x7567;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7570 = x7428 * x7451;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7571 = x7076 + x7451;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7572 = x7571 - x7570;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7573 = x7432 * x7455;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7574 = x7077 + x7455;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7575 = x7574 - x7573;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7576 = x7436 * x7459;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7577 = x7078 + x7459;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7578 = x7577 - x7576;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7579 = x7440 * x7463;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7580 = x7079 + x7463;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7581 = x7580 - x7579;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7582 = x7444 * x7467;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7583 = x7080 + x7467;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7584 = x7583 - x7582;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7585 = x7448 * x7471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7586 = x7081 + x7471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7587 = x7586 - x7585;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7588 = x7452 * x7475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7589 = x7082 + x7475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7590 = x7589 - x7588;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7591 = x7456 * x7479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7592 = x7083 + x7479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7593 = x7592 - x7591;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7594 = x7460 * x7483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7595 = x7084 + x7483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7596 = x7595 - x7594;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7597 = x7464 * x7487;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7598 = x7085 + x7487;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7599 = x7598 - x7597;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7600 = x7468 * x7491;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7601 = x7086 + x7491;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7602 = x7601 - x7600;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7603 = x7472 * x7495;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7604 = x7087 + x7495;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7605 = x7604 - x7603;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7606 = x7476 * x7499;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7607 = x7088 + x7499;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7608 = x7607 - x7606;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7609 = x7480 * x7503;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7610 = x7089 + x7503;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7611 = x7610 - x7609;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7612 = x7484 * x7507;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7613 = x7090 + x7507;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7614 = x7613 - x7612;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7615 = x7488 * x7511;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7616 = x7091 + x7511;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7617 = x7616 - x7615;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7618 = x7492 * x7515;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7619 = x7092 + x7515;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7620 = x7619 - x7618;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7621 = x7496 * x7519;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7622 = x7093 + x7519;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7623 = x7622 - x7621;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7624 = x7500 * x7523;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7625 = x7094 + x7523;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7626 = x7625 - x7624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7627 = x7504 * x7527;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7628 = x7095 + x7527;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7629 = x7628 - x7627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7630 = x7508 * x7531;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7631 = x7064 + x7531;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7632 = x7631 - x7630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7633 = x7512 * x7535;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7634 = x7065 + x7535;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7635 = x7634 - x7633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7636 = x7516 * x7539;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7637 = x7066 + x7539;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7638 = x7637 - x7636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7639 = x7520 * x7543;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7640 = x7067 + x7543;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7641 = x7640 - x7639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7642 = x7524 * x7547;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7643 = x7068 + x7547;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7644 = x7643 - x7642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7645 = x7528 * x7551;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7646 = x7069 + x7551;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x7647 = x7646 - x7645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7648 = x7557 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7649 = x7554 + x7648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7650 = x7560 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7651 = x7649 + x7650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7652 = x7563 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7653 = x7651 + x7652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7654 = x7566 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7655 = x7653 + x7654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7656 = x7569 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7657 = x7655 + x7656;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7658 = x7572 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7659 = x7657 + x7658;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7660 = x7575 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7661 = x7659 + x7660;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7662 = x7578 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7663 = x7661 + x7662;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7664 = x7581 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7665 = x7663 + x7664;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7666 = x7584 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7667 = x7665 + x7666;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7668 = x7587 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7669 = x7667 + x7668;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7670 = x7590 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7671 = x7669 + x7670;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7672 = x7593 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7673 = x7671 + x7672;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7674 = x7596 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7675 = x7673 + x7674;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7676 = x7599 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7677 = x7675 + x7676;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7678 = x7605 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7679 = x7602 + x7678;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7680 = x7608 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7681 = x7679 + x7680;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7682 = x7611 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7683 = x7681 + x7682;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7684 = x7614 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7685 = x7683 + x7684;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7686 = x7617 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7687 = x7685 + x7686;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7688 = x7620 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7689 = x7687 + x7688;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7690 = x7623 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7691 = x7689 + x7690;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7692 = x7626 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7693 = x7691 + x7692;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7694 = x7629 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7695 = x7693 + x7694;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7696 = x7632 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7697 = x7695 + x7696;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7698 = x7635 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7699 = x7697 + x7698;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7700 = x7638 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7701 = x7699 + x7700;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7702 = x7641 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7703 = x7701 + x7702;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7704 = x7644 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7705 = x7703 + x7704;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7706 = x7647 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7707 = x7705 + x7706;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7708 = x96 - x7064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7709 = x7708 * x7128;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7710 = x7064 * x7096;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7711 = x7710 + x7709;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7712 = x96 - x7065;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7713 = x7712 * x7129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7714 = x7065 * x7097;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7715 = x7714 + x7713;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7716 = x96 - x7066;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7717 = x7716 * x7130;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7718 = x7066 * x7098;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7719 = x7718 + x7717;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7720 = x96 - x7067;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7721 = x7720 * x7131;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7722 = x7067 * x7099;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7723 = x7722 + x7721;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7724 = x96 - x7068;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7725 = x7724 * x7132;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7726 = x7068 * x7100;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7727 = x7726 + x7725;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7728 = x96 - x7069;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7729 = x7728 * x7133;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7730 = x7069 * x7101;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7731 = x7730 + x7729;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7732 = x96 - x7070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7733 = x7732 * x7134;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7734 = x7070 * x7102;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7735 = x7734 + x7733;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7736 = x96 - x7071;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7737 = x7736 * x7135;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7738 = x7071 * x7103;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7739 = x7738 + x7737;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7740 = x96 - x7072;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7741 = x7740 * x7136;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7742 = x7072 * x7104;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7743 = x7742 + x7741;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7744 = x96 - x7073;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7745 = x7744 * x7137;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7746 = x7073 * x7105;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7747 = x7746 + x7745;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7748 = x96 - x7074;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7749 = x7748 * x7138;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7750 = x7074 * x7106;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7751 = x7750 + x7749;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7752 = x96 - x7075;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7753 = x7752 * x7139;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7754 = x7075 * x7107;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7755 = x7754 + x7753;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7756 = x96 - x7076;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7757 = x7756 * x7140;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7758 = x7076 * x7108;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7759 = x7758 + x7757;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7760 = x96 - x7077;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7761 = x7760 * x7141;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7762 = x7077 * x7109;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7763 = x7762 + x7761;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7764 = x96 - x7078;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7765 = x7764 * x7142;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7766 = x7078 * x7110;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7767 = x7766 + x7765;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7768 = x96 - x7079;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7769 = x7768 * x7143;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7770 = x7079 * x7111;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7771 = x7770 + x7769;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7772 = x96 - x7080;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7773 = x7772 * x7144;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7774 = x7080 * x7112;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7775 = x7774 + x7773;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7776 = x96 - x7081;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7777 = x7776 * x7145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7778 = x7081 * x7113;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7779 = x7778 + x7777;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7780 = x96 - x7082;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7781 = x7780 * x7146;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7782 = x7082 * x7114;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7783 = x7782 + x7781;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7784 = x96 - x7083;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7785 = x7784 * x7147;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7786 = x7083 * x7115;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7787 = x7786 + x7785;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7788 = x96 - x7084;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7789 = x7788 * x7148;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7790 = x7084 * x7116;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7791 = x7790 + x7789;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7792 = x96 - x7085;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7793 = x7792 * x7149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7794 = x7085 * x7117;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7795 = x7794 + x7793;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7796 = x96 - x7086;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7797 = x7796 * x7150;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7798 = x7086 * x7118;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7799 = x7798 + x7797;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7800 = x96 - x7087;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7801 = x7800 * x7151;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7802 = x7087 * x7119;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7803 = x7802 + x7801;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7804 = x96 - x7088;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7805 = x7804 * x7152;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7806 = x7088 * x7120;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7807 = x7806 + x7805;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7808 = x96 - x7089;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7809 = x7808 * x7153;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7810 = x7089 * x7121;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7811 = x7810 + x7809;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7812 = x96 - x7090;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7813 = x7812 * x7154;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7814 = x7090 * x7122;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7815 = x7814 + x7813;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7816 = x96 - x7091;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7817 = x7816 * x7155;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7818 = x7091 * x7123;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7819 = x7818 + x7817;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7820 = x96 - x7092;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7821 = x7820 * x7156;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7822 = x7092 * x7124;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7823 = x7822 + x7821;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7824 = x96 - x7093;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7825 = x7824 * x7157;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7826 = x7093 * x7125;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7827 = x7826 + x7825;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7828 = x96 - x7094;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7829 = x7828 * x7158;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7830 = x7094 * x7126;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7831 = x7830 + x7829;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7832 = x96 - x7095;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7833 = x7832 * x7159;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7834 = x7095 * x7127;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x7835 = x7834 + x7833;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7836 = x7715 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7837 = x7711 + x7836;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7838 = x7719 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7839 = x7837 + x7838;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7840 = x7723 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7841 = x7839 + x7840;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7842 = x7727 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7843 = x7841 + x7842;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7844 = x7731 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7845 = x7843 + x7844;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7846 = x7735 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7847 = x7845 + x7846;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7848 = x7739 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7849 = x7847 + x7848;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7850 = x7743 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7851 = x7849 + x7850;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7852 = x7747 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7853 = x7851 + x7852;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7854 = x7751 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7855 = x7853 + x7854;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7856 = x7755 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7857 = x7855 + x7856;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7858 = x7759 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7859 = x7857 + x7858;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7860 = x7763 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7861 = x7859 + x7860;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7862 = x7767 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7863 = x7861 + x7862;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7864 = x7771 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7865 = x7863 + x7864;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7866 = x7779 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7867 = x7775 + x7866;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7868 = x7783 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7869 = x7867 + x7868;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7870 = x7787 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7871 = x7869 + x7870;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7872 = x7791 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7873 = x7871 + x7872;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7874 = x7795 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7875 = x7873 + x7874;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7876 = x7799 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7877 = x7875 + x7876;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7878 = x7803 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7879 = x7877 + x7878;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7880 = x7807 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7881 = x7879 + x7880;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7882 = x7811 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7883 = x7881 + x7882;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7884 = x7815 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7885 = x7883 + x7884;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7886 = x7819 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7887 = x7885 + x7886;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7888 = x7823 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7889 = x7887 + x7888;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7890 = x7827 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7891 = x7889 + x7890;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7892 = x7831 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7893 = x7891 + x7892;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7894 = x7835 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7895 = x7893 + x7894;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x7896 = x7865 + x7677;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x7897 = x7895 + x7707;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7898 = x7161 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7899 = x7160 + x7898;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7900 = x7162 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7901 = x7899 + x7900;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7902 = x7163 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7903 = x7901 + x7902;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7904 = x7164 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7905 = x7903 + x7904;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7906 = x7165 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7907 = x7905 + x7906;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7908 = x7166 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7909 = x7907 + x7908;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7910 = x7167 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7911 = x7909 + x7910;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7912 = x7168 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7913 = x7911 + x7912;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7914 = x7169 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7915 = x7913 + x7914;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7916 = x7170 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7917 = x7915 + x7916;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7918 = x7171 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7919 = x7917 + x7918;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7920 = x7172 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7921 = x7919 + x7920;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7922 = x7173 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7923 = x7921 + x7922;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7924 = x7174 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7925 = x7923 + x7924;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7926 = x7175 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7927 = x7925 + x7926;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7928 = x7177 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7929 = x7176 + x7928;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7930 = x7178 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7931 = x7929 + x7930;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7932 = x7179 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7933 = x7931 + x7932;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7934 = x7180 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7935 = x7933 + x7934;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7936 = x7181 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7937 = x7935 + x7936;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7938 = x7182 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7939 = x7937 + x7938;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7940 = x7183 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7941 = x7939 + x7940;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7942 = x7184 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7943 = x7941 + x7942;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7944 = x7185 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7945 = x7943 + x7944;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7946 = x7186 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7947 = x7945 + x7946;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7948 = x7187 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7949 = x7947 + x7948;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7950 = x7188 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7951 = x7949 + x7950;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7952 = x7189 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7953 = x7951 + x7952;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7954 = x7190 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7955 = x7953 + x7954;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7956 = x7191 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7957 = x7955 + x7956;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x7958 = x7927 + x7896;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x7959 = x7957 + x7897;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x7960 = x7197 + x7958;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x7961 = x7199 + x7959;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x7962 = x6852 + x7960;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x7963 = x6933 + x7961;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7964 = x7333 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7965 = x7330 + x7964;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7966 = x7336 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7967 = x7965 + x7966;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7968 = x7339 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7969 = x7967 + x7968;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7970 = x7342 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7971 = x7969 + x7970;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7972 = x7345 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7973 = x7971 + x7972;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7974 = x7348 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7975 = x7973 + x7974;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7976 = x7351 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7977 = x7975 + x7976;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7978 = x7354 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7979 = x7977 + x7978;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7980 = x7357 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7981 = x7979 + x7980;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7982 = x7360 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7983 = x7981 + x7982;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7984 = x7363 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7985 = x7983 + x7984;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7986 = x7366 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7987 = x7985 + x7986;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7988 = x7369 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7989 = x7987 + x7988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7990 = x7372 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7991 = x7989 + x7990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7992 = x7375 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7993 = x7991 + x7992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7994 = x7381 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7995 = x7378 + x7994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7996 = x7384 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7997 = x7995 + x7996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7998 = x7387 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x7999 = x7997 + x7998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8000 = x7390 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8001 = x7999 + x8000;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8002 = x7393 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8003 = x8001 + x8002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8004 = x7396 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8005 = x8003 + x8004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8006 = x7399 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8007 = x8005 + x8006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8008 = x7402 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8009 = x8007 + x8008;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8010 = x7405 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8011 = x8009 + x8010;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8012 = x7408 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8013 = x8011 + x8012;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8014 = x7411 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8015 = x8013 + x8014;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8016 = x7414 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8017 = x8015 + x8016;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8018 = x7417 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8019 = x8017 + x8018;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8020 = x7420 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8021 = x8019 + x8020;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8022 = x7423 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8023 = x8021 + x8022;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8024 = x6936 * x6968;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8025 = x8024 * x7000;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8026 = x96 - x6936;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8027 = x8026 * x6968;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8028 = x8027 * x7000;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8029 = x96 - x6968;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8030 = x6936 * x8029;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8031 = x8030 * x7000;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8032 = x96 - x7000;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8033 = x8024 * x8032;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8034 = x8033 + x8031;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8035 = x8034 + x8028;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8036 = x8035 + x8025;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8037 = x6937 * x6969;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8038 = x8037 * x7001;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8039 = x96 - x6937;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8040 = x8039 * x6969;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8041 = x8040 * x7001;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8042 = x96 - x6969;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8043 = x6937 * x8042;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8044 = x8043 * x7001;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8045 = x96 - x7001;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8046 = x8037 * x8045;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8047 = x8046 + x8044;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8048 = x8047 + x8041;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8049 = x8048 + x8038;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8050 = x6938 * x6970;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8051 = x8050 * x7002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8052 = x96 - x6938;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8053 = x8052 * x6970;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8054 = x8053 * x7002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8055 = x96 - x6970;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8056 = x6938 * x8055;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8057 = x8056 * x7002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8058 = x96 - x7002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8059 = x8050 * x8058;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8060 = x8059 + x8057;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8061 = x8060 + x8054;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8062 = x8061 + x8051;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8063 = x6939 * x6971;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8064 = x8063 * x7003;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8065 = x96 - x6939;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8066 = x8065 * x6971;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8067 = x8066 * x7003;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8068 = x96 - x6971;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8069 = x6939 * x8068;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8070 = x8069 * x7003;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8071 = x96 - x7003;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8072 = x8063 * x8071;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8073 = x8072 + x8070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8074 = x8073 + x8067;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8075 = x8074 + x8064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8076 = x6940 * x6972;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8077 = x8076 * x7004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8078 = x96 - x6940;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8079 = x8078 * x6972;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8080 = x8079 * x7004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8081 = x96 - x6972;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8082 = x6940 * x8081;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8083 = x8082 * x7004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8084 = x96 - x7004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8085 = x8076 * x8084;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8086 = x8085 + x8083;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8087 = x8086 + x8080;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8088 = x8087 + x8077;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8089 = x6941 * x6973;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8090 = x8089 * x7005;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8091 = x96 - x6941;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8092 = x8091 * x6973;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8093 = x8092 * x7005;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8094 = x96 - x6973;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8095 = x6941 * x8094;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8096 = x8095 * x7005;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8097 = x96 - x7005;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8098 = x8089 * x8097;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8099 = x8098 + x8096;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8100 = x8099 + x8093;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8101 = x8100 + x8090;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8102 = x6942 * x6974;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8103 = x8102 * x7006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8104 = x96 - x6942;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8105 = x8104 * x6974;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8106 = x8105 * x7006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8107 = x96 - x6974;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8108 = x6942 * x8107;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8109 = x8108 * x7006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8110 = x96 - x7006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8111 = x8102 * x8110;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8112 = x8111 + x8109;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8113 = x8112 + x8106;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8114 = x8113 + x8103;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8115 = x6943 * x6975;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8116 = x8115 * x7007;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8117 = x96 - x6943;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8118 = x8117 * x6975;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8119 = x8118 * x7007;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8120 = x96 - x6975;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8121 = x6943 * x8120;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8122 = x8121 * x7007;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8123 = x96 - x7007;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8124 = x8115 * x8123;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8125 = x8124 + x8122;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8126 = x8125 + x8119;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8127 = x8126 + x8116;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8128 = x6944 * x6976;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8129 = x8128 * x7008;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8130 = x96 - x6944;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8131 = x8130 * x6976;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8132 = x8131 * x7008;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8133 = x96 - x6976;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8134 = x6944 * x8133;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8135 = x8134 * x7008;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8136 = x96 - x7008;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8137 = x8128 * x8136;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8138 = x8137 + x8135;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8139 = x8138 + x8132;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8140 = x8139 + x8129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8141 = x6945 * x6977;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8142 = x8141 * x7009;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8143 = x96 - x6945;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8144 = x8143 * x6977;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8145 = x8144 * x7009;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8146 = x96 - x6977;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8147 = x6945 * x8146;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8148 = x8147 * x7009;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8149 = x96 - x7009;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8150 = x8141 * x8149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8151 = x8150 + x8148;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8152 = x8151 + x8145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8153 = x8152 + x8142;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8154 = x6946 * x6978;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8155 = x8154 * x7010;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8156 = x96 - x6946;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8157 = x8156 * x6978;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8158 = x8157 * x7010;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8159 = x96 - x6978;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8160 = x6946 * x8159;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8161 = x8160 * x7010;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8162 = x96 - x7010;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8163 = x8154 * x8162;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8164 = x8163 + x8161;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8165 = x8164 + x8158;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8166 = x8165 + x8155;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8167 = x6947 * x6979;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8168 = x8167 * x7011;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8169 = x96 - x6947;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8170 = x8169 * x6979;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8171 = x8170 * x7011;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8172 = x96 - x6979;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8173 = x6947 * x8172;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8174 = x8173 * x7011;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8175 = x96 - x7011;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8176 = x8167 * x8175;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8177 = x8176 + x8174;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8178 = x8177 + x8171;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8179 = x8178 + x8168;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8180 = x6948 * x6980;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8181 = x8180 * x7012;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8182 = x96 - x6948;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8183 = x8182 * x6980;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8184 = x8183 * x7012;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8185 = x96 - x6980;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8186 = x6948 * x8185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8187 = x8186 * x7012;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8188 = x96 - x7012;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8189 = x8180 * x8188;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8190 = x8189 + x8187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8191 = x8190 + x8184;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8192 = x8191 + x8181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8193 = x6949 * x6981;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8194 = x8193 * x7013;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8195 = x96 - x6949;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8196 = x8195 * x6981;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8197 = x8196 * x7013;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8198 = x96 - x6981;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8199 = x6949 * x8198;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8200 = x8199 * x7013;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8201 = x96 - x7013;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8202 = x8193 * x8201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8203 = x8202 + x8200;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8204 = x8203 + x8197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8205 = x8204 + x8194;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8206 = x6950 * x6982;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8207 = x8206 * x7014;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8208 = x96 - x6950;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8209 = x8208 * x6982;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8210 = x8209 * x7014;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8211 = x96 - x6982;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8212 = x6950 * x8211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8213 = x8212 * x7014;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8214 = x96 - x7014;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8215 = x8206 * x8214;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8216 = x8215 + x8213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8217 = x8216 + x8210;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8218 = x8217 + x8207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8219 = x6951 * x6983;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8220 = x8219 * x7015;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8221 = x96 - x6951;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8222 = x8221 * x6983;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8223 = x8222 * x7015;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8224 = x96 - x6983;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8225 = x6951 * x8224;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8226 = x8225 * x7015;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8227 = x96 - x7015;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8228 = x8219 * x8227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8229 = x8228 + x8226;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8230 = x8229 + x8223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8231 = x8230 + x8220;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8232 = x6952 * x6984;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8233 = x8232 * x7016;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8234 = x96 - x6952;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8235 = x8234 * x6984;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8236 = x8235 * x7016;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8237 = x96 - x6984;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8238 = x6952 * x8237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8239 = x8238 * x7016;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8240 = x96 - x7016;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8241 = x8232 * x8240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8242 = x8241 + x8239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8243 = x8242 + x8236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8244 = x8243 + x8233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8245 = x6953 * x6985;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8246 = x8245 * x7017;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8247 = x96 - x6953;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8248 = x8247 * x6985;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8249 = x8248 * x7017;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8250 = x96 - x6985;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8251 = x6953 * x8250;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8252 = x8251 * x7017;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8253 = x96 - x7017;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8254 = x8245 * x8253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8255 = x8254 + x8252;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8256 = x8255 + x8249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8257 = x8256 + x8246;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8258 = x6954 * x6986;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8259 = x8258 * x7018;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8260 = x96 - x6954;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8261 = x8260 * x6986;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8262 = x8261 * x7018;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8263 = x96 - x6986;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8264 = x6954 * x8263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8265 = x8264 * x7018;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8266 = x96 - x7018;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8267 = x8258 * x8266;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8268 = x8267 + x8265;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8269 = x8268 + x8262;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8270 = x8269 + x8259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8271 = x6955 * x6987;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8272 = x8271 * x7019;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8273 = x96 - x6955;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8274 = x8273 * x6987;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8275 = x8274 * x7019;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8276 = x96 - x6987;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8277 = x6955 * x8276;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8278 = x8277 * x7019;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8279 = x96 - x7019;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8280 = x8271 * x8279;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8281 = x8280 + x8278;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8282 = x8281 + x8275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8283 = x8282 + x8272;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8284 = x6956 * x6988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8285 = x8284 * x7020;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8286 = x96 - x6956;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8287 = x8286 * x6988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8288 = x8287 * x7020;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8289 = x96 - x6988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8290 = x6956 * x8289;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8291 = x8290 * x7020;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8292 = x96 - x7020;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8293 = x8284 * x8292;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8294 = x8293 + x8291;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8295 = x8294 + x8288;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8296 = x8295 + x8285;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8297 = x6957 * x6989;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8298 = x8297 * x7021;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8299 = x96 - x6957;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8300 = x8299 * x6989;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8301 = x8300 * x7021;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8302 = x96 - x6989;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8303 = x6957 * x8302;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8304 = x8303 * x7021;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8305 = x96 - x7021;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8306 = x8297 * x8305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8307 = x8306 + x8304;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8308 = x8307 + x8301;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8309 = x8308 + x8298;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8310 = x6958 * x6990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8311 = x8310 * x7022;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8312 = x96 - x6958;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8313 = x8312 * x6990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8314 = x8313 * x7022;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8315 = x96 - x6990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8316 = x6958 * x8315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8317 = x8316 * x7022;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8318 = x96 - x7022;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8319 = x8310 * x8318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8320 = x8319 + x8317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8321 = x8320 + x8314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8322 = x8321 + x8311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8323 = x6959 * x6991;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8324 = x8323 * x7023;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8325 = x96 - x6959;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8326 = x8325 * x6991;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8327 = x8326 * x7023;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8328 = x96 - x6991;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8329 = x6959 * x8328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8330 = x8329 * x7023;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8331 = x96 - x7023;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8332 = x8323 * x8331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8333 = x8332 + x8330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8334 = x8333 + x8327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8335 = x8334 + x8324;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8336 = x6960 * x6992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8337 = x8336 * x7024;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8338 = x96 - x6960;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8339 = x8338 * x6992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8340 = x8339 * x7024;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8341 = x96 - x6992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8342 = x6960 * x8341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8343 = x8342 * x7024;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8344 = x96 - x7024;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8345 = x8336 * x8344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8346 = x8345 + x8343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8347 = x8346 + x8340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8348 = x8347 + x8337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8349 = x6961 * x6993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8350 = x8349 * x7025;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8351 = x96 - x6961;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8352 = x8351 * x6993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8353 = x8352 * x7025;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8354 = x96 - x6993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8355 = x6961 * x8354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8356 = x8355 * x7025;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8357 = x96 - x7025;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8358 = x8349 * x8357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8359 = x8358 + x8356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8360 = x8359 + x8353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8361 = x8360 + x8350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8362 = x6962 * x6994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8363 = x8362 * x7026;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8364 = x96 - x6962;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8365 = x8364 * x6994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8366 = x8365 * x7026;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8367 = x96 - x6994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8368 = x6962 * x8367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8369 = x8368 * x7026;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8370 = x96 - x7026;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8371 = x8362 * x8370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8372 = x8371 + x8369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8373 = x8372 + x8366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8374 = x8373 + x8363;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8375 = x6963 * x6995;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8376 = x8375 * x7027;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8377 = x96 - x6963;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8378 = x8377 * x6995;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8379 = x8378 * x7027;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8380 = x96 - x6995;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8381 = x6963 * x8380;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8382 = x8381 * x7027;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8383 = x96 - x7027;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8384 = x8375 * x8383;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8385 = x8384 + x8382;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8386 = x8385 + x8379;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8387 = x8386 + x8376;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8388 = x6964 * x6996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8389 = x8388 * x7028;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8390 = x96 - x6964;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8391 = x8390 * x6996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8392 = x8391 * x7028;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8393 = x96 - x6996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8394 = x6964 * x8393;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8395 = x8394 * x7028;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8396 = x96 - x7028;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8397 = x8388 * x8396;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8398 = x8397 + x8395;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8399 = x8398 + x8392;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8400 = x8399 + x8389;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8401 = x6965 * x6997;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8402 = x8401 * x7029;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8403 = x96 - x6965;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8404 = x8403 * x6997;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8405 = x8404 * x7029;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8406 = x96 - x6997;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8407 = x6965 * x8406;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8408 = x8407 * x7029;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8409 = x96 - x7029;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8410 = x8401 * x8409;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8411 = x8410 + x8408;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8412 = x8411 + x8405;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8413 = x8412 + x8402;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8414 = x6966 * x6998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8415 = x8414 * x7030;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8416 = x96 - x6966;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8417 = x8416 * x6998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8418 = x8417 * x7030;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8419 = x96 - x6998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8420 = x6966 * x8419;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8421 = x8420 * x7030;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8422 = x96 - x7030;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8423 = x8414 * x8422;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8424 = x8423 + x8421;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8425 = x8424 + x8418;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8426 = x8425 + x8415;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8427 = x6967 * x6999;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8428 = x8427 * x7031;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8429 = x96 - x6967;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8430 = x8429 * x6999;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8431 = x8430 * x7031;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8432 = x96 - x6999;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8433 = x6967 * x8432;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8434 = x8433 * x7031;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8435 = x96 - x7031;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8436 = x8427 * x8435;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8437 = x8436 + x8434;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x8438 = x8437 + x8431;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x8439 = x8438 + x8428;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8440 = x8049 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8441 = x8036 + x8440;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8442 = x8062 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8443 = x8441 + x8442;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8444 = x8075 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8445 = x8443 + x8444;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8446 = x8088 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8447 = x8445 + x8446;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8448 = x8101 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8449 = x8447 + x8448;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8450 = x8114 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8451 = x8449 + x8450;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8452 = x8127 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8453 = x8451 + x8452;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8454 = x8140 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8455 = x8453 + x8454;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8456 = x8153 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8457 = x8455 + x8456;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8458 = x8166 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8459 = x8457 + x8458;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8460 = x8179 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8461 = x8459 + x8460;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8462 = x8192 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8463 = x8461 + x8462;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8464 = x8205 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8465 = x8463 + x8464;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8466 = x8218 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8467 = x8465 + x8466;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8468 = x8231 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8469 = x8467 + x8468;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8470 = x8257 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8471 = x8244 + x8470;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8472 = x8270 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8473 = x8471 + x8472;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8474 = x8283 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8475 = x8473 + x8474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8476 = x8296 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8477 = x8475 + x8476;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8478 = x8309 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8479 = x8477 + x8478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8480 = x8322 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8481 = x8479 + x8480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8482 = x8335 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8483 = x8481 + x8482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8484 = x8348 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8485 = x8483 + x8484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8486 = x8361 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8487 = x8485 + x8486;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8488 = x8374 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8489 = x8487 + x8488;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8490 = x8387 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8491 = x8489 + x8490;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8492 = x8400 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8493 = x8491 + x8492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8494 = x8413 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8495 = x8493 + x8494;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8496 = x8426 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8497 = x8495 + x8496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8498 = x8439 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8499 = x8497 + x8498;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x8500 = x8469 + x7993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x8501 = x8499 + x8023;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x8502 = x7962 + x8500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x8503 = x7963 + x8501;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8504 = x7033 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8505 = x7032 + x8504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8506 = x7034 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8507 = x8505 + x8506;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8508 = x7035 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8509 = x8507 + x8508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8510 = x7036 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8511 = x8509 + x8510;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8512 = x7037 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8513 = x8511 + x8512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8514 = x7038 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8515 = x8513 + x8514;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8516 = x7039 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8517 = x8515 + x8516;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8518 = x7040 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8519 = x8517 + x8518;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8520 = x7041 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8521 = x8519 + x8520;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8522 = x7042 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8523 = x8521 + x8522;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8524 = x7043 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8525 = x8523 + x8524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8526 = x7044 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8527 = x8525 + x8526;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8528 = x7045 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8529 = x8527 + x8528;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8530 = x7046 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8531 = x8529 + x8530;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8532 = x7047 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8533 = x8531 + x8532;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8534 = x7049 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8535 = x7048 + x8534;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8536 = x7050 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8537 = x8535 + x8536;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8538 = x7051 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8539 = x8537 + x8538;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8540 = x7052 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8541 = x8539 + x8540;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8542 = x7053 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8543 = x8541 + x8542;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8544 = x7054 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8545 = x8543 + x8544;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8546 = x7055 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8547 = x8545 + x8546;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8548 = x7056 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8549 = x8547 + x8548;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8550 = x7057 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8551 = x8549 + x8550;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8552 = x7058 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8553 = x8551 + x8552;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8554 = x7059 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8555 = x8553 + x8554;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8556 = x7060 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8557 = x8555 + x8556;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8558 = x7061 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8559 = x8557 + x8558;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8560 = x7062 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8561 = x8559 + x8560;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8562 = x7063 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x8563 = x8561 + x8562;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x8564 = x7962 + x8533;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x8565 = x7963 + x8563;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":489:0)
      {
        auto& reg = args[2][153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8502);
        reg = x8502;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":490:0)
      {
        auto& reg = args[2][155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8564);
        reg = x8564;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":489:0)
      {
        auto& reg = args[2][154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8503);
        reg = x8503;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":490:0)
      {
        auto& reg = args[2][156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8565);
        reg = x8565;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
      auto x8566 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8566 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
      auto x8567 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8567 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8568 = Fp(x8566.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8568);
          reg = x8568;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8569 = Fp(x8566.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8570 = x8569 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8570);
          reg = x8570;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8571 = Fp(x8566.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8572 = x8571 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8572);
          reg = x8572;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8573 = Fp(x8566.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8574 = x8573 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8574);
          reg = x8574;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8575 = Fp(x8566.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8576 = x8575 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8576);
          reg = x8576;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8577 = Fp(x8566.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8578 = x8577 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8578);
          reg = x8578;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8579 = Fp(x8566.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8580 = x8579 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8580);
          reg = x8580;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8581 = Fp(x8566.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8582 = x8581 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8582);
          reg = x8582;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8583 = Fp(x8566.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8584 = x8583 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8584);
          reg = x8584;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8585 = Fp(x8566.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8586 = x8585 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8586);
          reg = x8586;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8587 = Fp(x8566.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8588 = x8587 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8588);
          reg = x8588;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8589 = Fp(x8566.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8590 = x8589 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8590);
          reg = x8590;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8591 = Fp(x8566.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8592 = x8591 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8592);
          reg = x8592;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8593 = Fp(x8566.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8594 = x8593 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8594);
          reg = x8594;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8595 = Fp(x8566.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8596 = x8595 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8596);
          reg = x8596;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8597 = Fp(x8566.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8598 = x8597 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8598);
          reg = x8598;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8599 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8599 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8600 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8600 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8601 = x8600 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8602 = x8599 + x8601;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8603 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8604 = x8603 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8605 = x8602 + x8604;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8606 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8607 = x8606 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8608 = x8605 + x8607;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8609 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8610 = x8609 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8611 = x8608 + x8610;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8612 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8613 = x8612 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8614 = x8611 + x8613;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8615 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8616 = x8615 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8617 = x8614 + x8616;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8618 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8619 = x8618 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8620 = x8617 + x8619;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8621 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8622 = x8621 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8623 = x8620 + x8622;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8624 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8625 = x8624 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8626 = x8623 + x8625;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8627 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8628 = x8627 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8629 = x8626 + x8628;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8630 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8631 = x8630 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8632 = x8629 + x8631;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8633 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8634 = x8633 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8635 = x8632 + x8634;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8636 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8637 = x8636 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8638 = x8635 + x8637;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8639 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8640 = x8639 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8641 = x8638 + x8640;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8642 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8643 = x8642 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8644 = x8641 + x8643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x8645 = x8566 - x8644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x8646 = x8645 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:0)
        auto x8647 = Fp(x8646.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8647);
          reg = x8647;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8648 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8648 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
      auto x8649 = x8646 - x8648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
      auto x8650 = x8649 * x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      auto x8651 = x96 - x8650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      auto x8652 = x8650 * x8651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      if (x8652 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:0)
      auto x8653 = x8567 + x8646;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8654 = Fp(x8653.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8654);
          reg = x8654;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8655 = Fp(x8653.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8656 = x8655 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8656);
          reg = x8656;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8657 = Fp(x8653.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8658 = x8657 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8658);
          reg = x8658;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8659 = Fp(x8653.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8660 = x8659 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8660);
          reg = x8660;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8661 = Fp(x8653.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8662 = x8661 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8662);
          reg = x8662;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8663 = Fp(x8653.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8664 = x8663 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8664);
          reg = x8664;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8665 = Fp(x8653.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8666 = x8665 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8666);
          reg = x8666;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8667 = Fp(x8653.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8668 = x8667 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8668);
          reg = x8668;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8669 = Fp(x8653.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8670 = x8669 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8670);
          reg = x8670;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8671 = Fp(x8653.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8672 = x8671 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8672);
          reg = x8672;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8673 = Fp(x8653.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8674 = x8673 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8674);
          reg = x8674;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8675 = Fp(x8653.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8676 = x8675 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8676);
          reg = x8676;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8677 = Fp(x8653.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8678 = x8677 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8678);
          reg = x8678;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8679 = Fp(x8653.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8680 = x8679 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8680);
          reg = x8680;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8681 = Fp(x8653.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8682 = x8681 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8682);
          reg = x8682;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8683 = Fp(x8653.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8684 = x8683 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8684);
          reg = x8684;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8685 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8685 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8686 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8686 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8687 = x8686 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8688 = x8685 + x8687;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8689 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8689 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8690 = x8689 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8691 = x8688 + x8690;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8692 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8692 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8693 = x8692 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8694 = x8691 + x8693;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8695 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8695 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8696 = x8695 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8697 = x8694 + x8696;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8698 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8698 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8699 = x8698 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8700 = x8697 + x8699;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8701 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8701 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8702 = x8701 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8703 = x8700 + x8702;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8704 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8704 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8705 = x8704 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8706 = x8703 + x8705;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8707 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8707 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8708 = x8707 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8709 = x8706 + x8708;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8710 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8710 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8711 = x8710 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8712 = x8709 + x8711;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8713 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8713 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8714 = x8713 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8715 = x8712 + x8714;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8716 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8716 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8717 = x8716 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8718 = x8715 + x8717;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8719 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8719 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8720 = x8719 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8721 = x8718 + x8720;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8722 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8722 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8723 = x8722 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8724 = x8721 + x8723;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8725 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8725 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8726 = x8725 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8727 = x8724 + x8726;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8728 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8728 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8729 = x8728 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8730 = x8727 + x8729;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x8731 = x8653 - x8730;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x8732 = x8731 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:0)
        auto x8733 = Fp(x8732.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8733);
          reg = x8733;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8734 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x8734 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
      auto x8735 = x8732 - x8734;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
      auto x8736 = x8735 * x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      auto x8737 = x96 - x8736;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      auto x8738 = x8736 * x8737;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      if (x8738 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
      auto x8739 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8739 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
      auto x8740 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8740 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8741 = Fp(x8739.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8741);
          reg = x8741;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8742 = Fp(x8739.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8743 = x8742 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8743);
          reg = x8743;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8744 = Fp(x8739.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8745 = x8744 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8745);
          reg = x8745;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8746 = Fp(x8739.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8747 = x8746 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8747);
          reg = x8747;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8748 = Fp(x8739.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8749 = x8748 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8749);
          reg = x8749;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8750 = Fp(x8739.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8751 = x8750 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8751);
          reg = x8751;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8752 = Fp(x8739.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8753 = x8752 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8753);
          reg = x8753;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8754 = Fp(x8739.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8755 = x8754 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8755);
          reg = x8755;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8756 = Fp(x8739.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8757 = x8756 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8757);
          reg = x8757;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8758 = Fp(x8739.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8759 = x8758 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8759);
          reg = x8759;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8760 = Fp(x8739.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8761 = x8760 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8761);
          reg = x8761;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8762 = Fp(x8739.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8763 = x8762 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8763);
          reg = x8763;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8764 = Fp(x8739.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8765 = x8764 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8765);
          reg = x8765;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8766 = Fp(x8739.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8767 = x8766 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8767);
          reg = x8767;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8768 = Fp(x8739.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8769 = x8768 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8769);
          reg = x8769;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8770 = Fp(x8739.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8771 = x8770 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8771);
          reg = x8771;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8772 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8772 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8773 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8773 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8774 = x8773 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8775 = x8772 + x8774;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8776 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8776 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8777 = x8776 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8778 = x8775 + x8777;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8779 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8779 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8780 = x8779 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8781 = x8778 + x8780;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8782 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8782 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8783 = x8782 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8784 = x8781 + x8783;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8785 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8785 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8786 = x8785 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8787 = x8784 + x8786;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8788 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8788 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8789 = x8788 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8790 = x8787 + x8789;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8791 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8791 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8792 = x8791 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8793 = x8790 + x8792;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8794 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8794 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8795 = x8794 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8796 = x8793 + x8795;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8797 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8797 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8798 = x8797 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8799 = x8796 + x8798;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8800 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8800 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8801 = x8800 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8802 = x8799 + x8801;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8803 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8803 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8804 = x8803 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8805 = x8802 + x8804;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8806 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8806 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8807 = x8806 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8808 = x8805 + x8807;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8809 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8809 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8810 = x8809 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8811 = x8808 + x8810;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8812 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8812 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8813 = x8812 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8814 = x8811 + x8813;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8815 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8815 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8816 = x8815 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8817 = x8814 + x8816;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x8818 = x8739 - x8817;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x8819 = x8818 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:0)
        auto x8820 = Fp(x8819.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8820);
          reg = x8820;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8821 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x8821 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
      auto x8822 = x8819 - x8821;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
      auto x8823 = x8822 * x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      auto x8824 = x96 - x8823;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      auto x8825 = x8823 * x8824;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
      if (x8825 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:0)
      auto x8826 = x8740 + x8819;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8827 = Fp(x8826.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8827);
          reg = x8827;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8828 = Fp(x8826.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8829 = x8828 * x54;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8829);
          reg = x8829;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8830 = Fp(x8826.asUInt32() & x77.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8831 = x8830 * x75;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8831);
          reg = x8831;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8832 = Fp(x8826.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8833 = x8832 * x55;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8833);
          reg = x8833;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8834 = Fp(x8826.asUInt32() & x62.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8835 = x8834 * x56;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8835);
          reg = x8835;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8836 = Fp(x8826.asUInt32() & x59.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8837 = x8836 * x57;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8837);
          reg = x8837;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8838 = Fp(x8826.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8839 = x8838 * x52;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8839);
          reg = x8839;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8840 = Fp(x8826.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8841 = x8840 * x60;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8841);
          reg = x8841;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8842 = Fp(x8826.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8843 = x8842 * x90;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8843);
          reg = x8843;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8844 = Fp(x8826.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8845 = x8844 * x21;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8845);
          reg = x8845;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8846 = Fp(x8826.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8847 = x8846 * x20;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8847);
          reg = x8847;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8848 = Fp(x8826.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8849 = x8848 * x18;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8849);
          reg = x8849;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8850 = Fp(x8826.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8851 = x8850 * x16;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8851);
          reg = x8851;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8852 = Fp(x8826.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8853 = x8852 * x14;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8853);
          reg = x8853;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8854 = Fp(x8826.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8855 = x8854 * x13;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8855);
          reg = x8855;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8856 = Fp(x8826.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
        auto x8857 = x8856 * x11;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][222 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8857);
          reg = x8857;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8858 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8858 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8859 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8859 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8860 = x8859 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8861 = x8858 + x8860;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8862 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8862 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8863 = x8862 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8864 = x8861 + x8863;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8865 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8865 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8866 = x8865 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8867 = x8864 + x8866;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8868 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8868 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8869 = x8868 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8870 = x8867 + x8869;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8871 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8871 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8872 = x8871 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8873 = x8870 + x8872;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8874 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8874 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8875 = x8874 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8876 = x8873 + x8875;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8877 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x8877 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8878 = x8877 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8879 = x8876 + x8878;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8880 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x8880 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8881 = x8880 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8882 = x8879 + x8881;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8883 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x8883 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8884 = x8883 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8885 = x8882 + x8884;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8886 = args[2][217 * steps + ((cycle - 0) & mask)];
      assert(x8886 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8887 = x8886 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8888 = x8885 + x8887;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8889 = args[2][218 * steps + ((cycle - 0) & mask)];
      assert(x8889 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8890 = x8889 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8891 = x8888 + x8890;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8892 = args[2][219 * steps + ((cycle - 0) & mask)];
      assert(x8892 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8893 = x8892 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8894 = x8891 + x8893;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8895 = args[2][220 * steps + ((cycle - 0) & mask)];
      assert(x8895 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8896 = x8895 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8897 = x8894 + x8896;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8898 = args[2][221 * steps + ((cycle - 0) & mask)];
      assert(x8898 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8899 = x8898 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8900 = x8897 + x8899;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8901 = args[2][222 * steps + ((cycle - 0) & mask)];
      assert(x8901 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8902 = x8901 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
      auto x8903 = x8900 + x8902;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x8904 = x8826 - x8903;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
      auto x8905 = x8904 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:0)
        auto x8906 = Fp(x8905.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8906);
          reg = x8906;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8907 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8907 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
      auto x8908 = x8905 - x8907;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
      auto x8909 = x8908 * x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      auto x8910 = x96 - x8909;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      auto x8911 = x8909 * x8910;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
      if (x8911 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/components/mux.h":49:0))
    auto x8912 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x8912 != Fp::invalid());
    if (x8912 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8913 = args[2][144 * steps + ((cycle - 1) & mask)];
      assert(x8913 != Fp::invalid());
      if (x8913 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":341:0))
        auto x8914 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x8914 != Fp::invalid());
        if (x8914 != 0) {
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":344:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7);
            reg = x7;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":345:0))
          auto x8915 = args[2][146 * steps + ((cycle - 1) & mask)];
          assert(x8915 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":345:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8915);
            reg = x8915;
          }
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":347:0)
        auto x8916 = x96 - x8914;
        if (x8916 != 0) {
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":349:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x76);
            reg = x76;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":350:0))
          auto x8917 = args[2][146 * steps + ((cycle - 1) & mask)];
          assert(x8917 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":350:0)
          auto x8918 = x8917 - x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":350:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8918);
            reg = x8918;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":353:0)
      auto x8919 = x96 - x8913;
      if (x8919 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x8920 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x8920 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8920);
          reg = x8920;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":356:0))
        auto x8921 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x8921 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":356:0)
        auto x8922 = x8921 - x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":356:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8922);
          reg = x8922;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":357:0))
        auto x8923 = args[2][146 * steps + ((cycle - 1) & mask)];
        assert(x8923 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":357:0)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8923);
          reg = x8923;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8924 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x8924 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x8925 = (x8924 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8925);
          reg = x8925;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x8926 = inv(x8924);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8926);
          reg = x8926;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8927 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x8927 != Fp::invalid());
      if (x8927 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x8924 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x8928 = x96 - x8927;
      if (x8928 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x8929 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x8929 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x8930 = x8924 * x8929;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x8931 = x8930 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x8931 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8932 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x8932 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":361:0)
      auto x8933 = x96 - x8932;
      if (x8927 != 0) {
        if (x8933 != 0) {
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        if (x8932 != 0) {
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
        }
      }
      if (x8928 != 0) {
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":371:0))
      auto x8934 = args[2][140 * steps + ((cycle - 1) & mask)];
      assert(x8934 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":371:0)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8934);
        reg = x8934;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":372:0))
      auto x8935 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x8935 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":372:0)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8935);
        reg = x8935;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8936 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x8936 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:0)
      {
        auto& reg = args[2][151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8936);
        reg = x8936;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":374:0))
      auto x8937 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x8937 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":374:0)
      {
        auto& reg = args[2][152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8937);
        reg = x8937;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8938 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8938 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x8939 = (x8938 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8939);
          reg = x8939;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x8940 = inv(x8938);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8940);
          reg = x8940;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8941 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x8941 != Fp::invalid());
      if (x8941 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x8938 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x8942 = x96 - x8941;
      if (x8942 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x8943 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x8943 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x8944 = x8938 * x8943;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x8945 = x8944 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x8945 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x8946 = x959 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x8947 = Fp(x8946.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8947);
          reg = x8947;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x8948 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x8948 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x8949 = x8946 - x8948;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x8950 = x8949 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x8951 = Fp(x8950.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8951);
          reg = x8951;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x8952 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x8952 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x8953 = x8950 - x8952;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x8954 = x8953 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x8955 = Fp(x8954.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8955);
          reg = x8955;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x8956 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x8956 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x8957 = x8954 - x8956;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x8958 = x8957 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x8959 = Fp(x8958.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8959);
          reg = x8959;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8960 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x8960 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x8961 = x8958 - x8960;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x8962 = x8961 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8962);
        reg = x8962;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8963 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x8963 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x8964 = x96 - x8963;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x8965 = x8963 * x8964;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8965);
        reg = x8965;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x8966 = x93 - x8963;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x8967 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x8967 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x8968 = x8967 * x8966;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x8968 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      extern_log(ctx, cycle, "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", {x66, x8932, x8924, x8938});
      if (x8933 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":384:0)
        auto x8969 = x6 - x8924;
        {
          auto [x8970, x8971, x8972, x8973] = extern_ramRead(ctx, cycle, "", {x8969, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8970);
            reg = x8970;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8971);
            reg = x8971;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8972);
            reg = x8972;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8973);
            reg = x8973;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x8974 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x8974 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x8975 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x8975 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x8976 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x8976 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x8977 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x8977 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8969);
          reg = x8969;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8974);
          reg = x8974;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8975);
          reg = x8975;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8976);
          reg = x8976;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8977);
          reg = x8977;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8978 = args[2][79 * steps + ((cycle - 2) & mask)];
      assert(x8978 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8979 = args[2][80 * steps + ((cycle - 2) & mask)];
      assert(x8979 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8980 = args[2][81 * steps + ((cycle - 2) & mask)];
      assert(x8980 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8981 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8981 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8982 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8982 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8983 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8983 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8984 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8984 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8985 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8985 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8986 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8986 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8987 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8987 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8988 = args[2][12 * steps + ((cycle - 2) & mask)];
      assert(x8988 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8989 = args[2][13 * steps + ((cycle - 2) & mask)];
      assert(x8989 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8990 = args[2][14 * steps + ((cycle - 2) & mask)];
      assert(x8990 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8991 = args[2][15 * steps + ((cycle - 2) & mask)];
      assert(x8991 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8992 = args[2][16 * steps + ((cycle - 2) & mask)];
      assert(x8992 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8993 = args[2][17 * steps + ((cycle - 2) & mask)];
      assert(x8993 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8994 = args[2][18 * steps + ((cycle - 2) & mask)];
      assert(x8994 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8995 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8995 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8996 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8996 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8997 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8997 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8998 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8998 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x8999 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9000 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x9000 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9001 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x9001 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9002 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x9002 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9003 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x9003 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9004 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x9004 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9005 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x9005 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9006 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x9006 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9007 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x9007 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9008 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x9008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9009 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x9009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9010 = args[2][79 * steps + ((cycle - 7) & mask)];
      assert(x9010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9011 = args[2][80 * steps + ((cycle - 7) & mask)];
      assert(x9011 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9012 = args[2][81 * steps + ((cycle - 7) & mask)];
      assert(x9012 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9013 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x9013 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9014 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x9014 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9015 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x9015 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9016 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x9016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9017 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x9017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9018 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x9018 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9019 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x9019 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9020 = args[2][12 * steps + ((cycle - 7) & mask)];
      assert(x9020 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9021 = args[2][13 * steps + ((cycle - 7) & mask)];
      assert(x9021 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9022 = args[2][14 * steps + ((cycle - 7) & mask)];
      assert(x9022 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9023 = args[2][15 * steps + ((cycle - 7) & mask)];
      assert(x9023 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9024 = args[2][16 * steps + ((cycle - 7) & mask)];
      assert(x9024 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9025 = args[2][17 * steps + ((cycle - 7) & mask)];
      assert(x9025 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9026 = args[2][18 * steps + ((cycle - 7) & mask)];
      assert(x9026 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9027 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x9027 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9028 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x9028 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9029 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x9029 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9030 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x9030 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9031 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x9031 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9032 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x9032 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9033 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x9033 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9034 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x9034 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9035 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x9035 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9036 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x9036 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9037 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x9037 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9038 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x9038 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9039 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x9039 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9040 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x9040 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9041 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x9041 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9042 = args[2][79 * steps + ((cycle - 15) & mask)];
      assert(x9042 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9043 = args[2][80 * steps + ((cycle - 15) & mask)];
      assert(x9043 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9044 = args[2][81 * steps + ((cycle - 15) & mask)];
      assert(x9044 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9045 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x9045 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9046 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x9046 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9047 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x9047 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9048 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x9048 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9049 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x9049 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9050 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x9050 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9051 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x9051 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9052 = args[2][12 * steps + ((cycle - 15) & mask)];
      assert(x9052 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9053 = args[2][13 * steps + ((cycle - 15) & mask)];
      assert(x9053 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9054 = args[2][14 * steps + ((cycle - 15) & mask)];
      assert(x9054 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9055 = args[2][15 * steps + ((cycle - 15) & mask)];
      assert(x9055 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9056 = args[2][16 * steps + ((cycle - 15) & mask)];
      assert(x9056 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9057 = args[2][17 * steps + ((cycle - 15) & mask)];
      assert(x9057 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9058 = args[2][18 * steps + ((cycle - 15) & mask)];
      assert(x9058 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9059 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x9059 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9060 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x9060 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9061 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x9061 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9062 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x9062 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9063 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x9063 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9064 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x9064 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9065 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x9065 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9066 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x9066 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9067 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x9067 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9068 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x9068 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9069 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x9069 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9070 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x9070 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9071 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x9071 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9072 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x9072 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9073 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x9073 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9074 = args[2][79 * steps + ((cycle - 16) & mask)];
      assert(x9074 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9075 = args[2][80 * steps + ((cycle - 16) & mask)];
      assert(x9075 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9076 = args[2][81 * steps + ((cycle - 16) & mask)];
      assert(x9076 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9077 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x9077 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9078 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x9078 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9079 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x9079 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9080 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x9080 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9081 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x9081 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9082 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x9082 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9083 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x9083 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9084 = args[2][12 * steps + ((cycle - 16) & mask)];
      assert(x9084 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9085 = args[2][13 * steps + ((cycle - 16) & mask)];
      assert(x9085 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9086 = args[2][14 * steps + ((cycle - 16) & mask)];
      assert(x9086 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9087 = args[2][15 * steps + ((cycle - 16) & mask)];
      assert(x9087 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9088 = args[2][16 * steps + ((cycle - 16) & mask)];
      assert(x9088 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9089 = args[2][17 * steps + ((cycle - 16) & mask)];
      assert(x9089 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9090 = args[2][18 * steps + ((cycle - 16) & mask)];
      assert(x9090 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9091 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x9091 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9092 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x9092 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9093 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x9093 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9094 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x9094 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9095 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x9095 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9096 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x9096 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9097 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x9097 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9098 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x9098 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9099 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x9099 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9100 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x9100 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9101 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x9101 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9102 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x9102 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9103 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x9103 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9104 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x9104 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x9105 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x9105 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9106 = x9060 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9107 = x9106 * x9045;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9108 = x9060 + x9045;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9109 = x9108 - x9107;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9110 = x9061 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9111 = x9110 * x9046;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9112 = x9061 + x9046;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9113 = x9112 - x9111;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9114 = x9062 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9115 = x9114 * x9047;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9116 = x9062 + x9047;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9117 = x9116 - x9115;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9118 = x9063 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9119 = x9118 * x9048;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9120 = x9063 + x9048;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9121 = x9120 - x9119;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9122 = x9064 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9123 = x9122 * x9049;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9124 = x9064 + x9049;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9125 = x9124 - x9123;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9126 = x9065 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9127 = x9126 * x9050;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9128 = x9065 + x9050;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9129 = x9128 - x9127;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9130 = x9066 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9131 = x9130 * x9051;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9132 = x9066 + x9051;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9133 = x9132 - x9131;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9134 = x9067 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9135 = x9134 * x9052;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9136 = x9067 + x9052;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9137 = x9136 - x9135;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9138 = x9068 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9139 = x9138 * x9053;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9140 = x9068 + x9053;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9141 = x9140 - x9139;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9142 = x9069 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9143 = x9142 * x9054;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9144 = x9069 + x9054;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9145 = x9144 - x9143;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9146 = x9070 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9147 = x9146 * x9055;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9148 = x9070 + x9055;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9149 = x9148 - x9147;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9150 = x9071 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9151 = x9150 * x9056;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9152 = x9071 + x9056;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9153 = x9152 - x9151;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9154 = x9072 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9155 = x9154 * x9057;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9156 = x9072 + x9057;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9157 = x9156 - x9155;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9158 = x9073 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9159 = x9158 * x9058;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9160 = x9073 + x9058;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9161 = x9160 - x9159;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9162 = x9042 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9163 = x9162 * x9059;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9164 = x9042 + x9059;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9165 = x9164 - x9163;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9166 = x9043 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9167 = x9166 * x9060;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9168 = x9043 + x9060;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9169 = x9168 - x9167;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9170 = x9044 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9171 = x9170 * x9061;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9172 = x9044 + x9061;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9173 = x9172 - x9171;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9174 = x9045 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9175 = x9174 * x9062;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9176 = x9045 + x9062;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9177 = x9176 - x9175;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9178 = x9046 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9179 = x9178 * x9063;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9180 = x9046 + x9063;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9181 = x9180 - x9179;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9182 = x9047 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9183 = x9182 * x9064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9184 = x9047 + x9064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9185 = x9184 - x9183;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9186 = x9048 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9187 = x9186 * x9065;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9188 = x9048 + x9065;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9189 = x9188 - x9187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9190 = x9049 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9191 = x9190 * x9066;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9192 = x9049 + x9066;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9193 = x9192 - x9191;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9194 = x9050 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9195 = x9194 * x9067;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9196 = x9050 + x9067;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9197 = x9196 - x9195;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9198 = x9051 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9199 = x9198 * x9068;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9200 = x9051 + x9068;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9201 = x9200 - x9199;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9202 = x9052 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9203 = x9202 * x9069;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9204 = x9052 + x9069;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9205 = x9204 - x9203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9206 = x9053 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9207 = x9206 * x9070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9208 = x9053 + x9070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9209 = x9208 - x9207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9210 = x9054 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9211 = x9210 * x9071;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9212 = x9054 + x9071;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9213 = x9212 - x9211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9214 = x9055 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9215 = x9214 * x9072;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9216 = x9055 + x9072;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9217 = x9216 - x9215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9218 = x9056 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9219 = x9218 * x9073;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9220 = x9056 + x9073;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9221 = x9220 - x9219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9222 = x9190 * x9109;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9223 = x9049 + x9109;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9224 = x9223 - x9222;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9225 = x9194 * x9113;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9226 = x9050 + x9113;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9227 = x9226 - x9225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9228 = x9198 * x9117;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9229 = x9051 + x9117;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9230 = x9229 - x9228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9231 = x9202 * x9121;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9232 = x9052 + x9121;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9233 = x9232 - x9231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9234 = x9206 * x9125;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9235 = x9053 + x9125;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9236 = x9235 - x9234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9237 = x9210 * x9129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9238 = x9054 + x9129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9239 = x9238 - x9237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9240 = x9214 * x9133;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9241 = x9055 + x9133;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9242 = x9241 - x9240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9243 = x9218 * x9137;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9244 = x9056 + x9137;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9245 = x9244 - x9243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9246 = x9057 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9247 = x9246 * x9141;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9248 = x9057 + x9141;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9249 = x9248 - x9247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9250 = x9058 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9251 = x9250 * x9145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9252 = x9058 + x9145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9253 = x9252 - x9251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9254 = x9059 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9255 = x9254 * x9149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9256 = x9059 + x9149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9257 = x9256 - x9255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9258 = x9106 * x9153;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9259 = x9060 + x9153;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9260 = x9259 - x9258;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9261 = x9110 * x9157;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9262 = x9061 + x9157;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9263 = x9262 - x9261;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9264 = x9114 * x9161;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9265 = x9062 + x9161;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9266 = x9265 - x9264;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9267 = x9118 * x9165;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9268 = x9063 + x9165;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9269 = x9268 - x9267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9270 = x9122 * x9169;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9271 = x9064 + x9169;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9272 = x9271 - x9270;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9273 = x9126 * x9173;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9274 = x9065 + x9173;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9275 = x9274 - x9273;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9276 = x9130 * x9177;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9277 = x9066 + x9177;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9278 = x9277 - x9276;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9279 = x9134 * x9181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9280 = x9067 + x9181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9281 = x9280 - x9279;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9282 = x9138 * x9185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9283 = x9068 + x9185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9284 = x9283 - x9282;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9285 = x9142 * x9189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9286 = x9069 + x9189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9287 = x9286 - x9285;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9288 = x9146 * x9193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9289 = x9070 + x9193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9290 = x9289 - x9288;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9291 = x9150 * x9197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9292 = x9071 + x9197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9293 = x9292 - x9291;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9294 = x9154 * x9201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9295 = x9072 + x9201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9296 = x9295 - x9294;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9297 = x9158 * x9205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9298 = x9073 + x9205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9299 = x9298 - x9297;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9300 = x9162 * x9209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9301 = x9042 + x9209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9302 = x9301 - x9300;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9303 = x9166 * x9213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9304 = x9043 + x9213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9305 = x9304 - x9303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9306 = x9170 * x9217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9307 = x9044 + x9217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9308 = x9307 - x9306;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9309 = x9174 * x9221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9310 = x9045 + x9221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9311 = x9310 - x9309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9312 = x9178 * x9057;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9313 = x9046 + x9057;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9314 = x9313 - x9312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9315 = x9182 * x9058;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9316 = x9047 + x9058;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9317 = x9316 - x9315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9318 = x9186 * x9059;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9319 = x9048 + x9059;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9320 = x9319 - x9318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9321 = x8997 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9322 = x9321 * x8988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9323 = x8997 + x8988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9324 = x9323 - x9322;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9325 = x8998 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9326 = x9325 * x8989;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9327 = x8998 + x8989;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9328 = x9327 - x9326;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9329 = x8999 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9330 = x9329 * x8990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9331 = x8999 + x8990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9332 = x9331 - x9330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9333 = x9000 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9334 = x9333 * x8991;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9335 = x9000 + x8991;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9336 = x9335 - x9334;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9337 = x9001 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9338 = x9337 * x8992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9339 = x9001 + x8992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9340 = x9339 - x9338;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9341 = x9002 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9342 = x9341 * x8993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9343 = x9002 + x8993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9344 = x9343 - x9342;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9345 = x9003 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9346 = x9345 * x8994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9347 = x9003 + x8994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9348 = x9347 - x9346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9349 = x9004 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9350 = x9349 * x8995;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9351 = x9004 + x8995;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9352 = x9351 - x9350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9353 = x9005 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9354 = x9353 * x8996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9355 = x9005 + x8996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9356 = x9355 - x9354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9357 = x9006 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9358 = x9357 * x8997;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9359 = x9006 + x8997;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9360 = x9359 - x9358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9361 = x9007 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9362 = x9361 * x8998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9363 = x9007 + x8998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9364 = x9363 - x9362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9365 = x9008 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9366 = x9365 * x8999;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9367 = x9008 + x8999;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9368 = x9367 - x9366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9369 = x9009 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9370 = x9369 * x9000;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9371 = x9009 + x9000;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9372 = x9371 - x9370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9373 = x8978 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9374 = x9373 * x9001;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9375 = x8978 + x9001;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9376 = x9375 - x9374;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9377 = x8979 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9378 = x9377 * x9002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9379 = x8979 + x9002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9380 = x9379 - x9378;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9381 = x8980 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9382 = x9381 * x9003;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9383 = x8980 + x9003;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9384 = x9383 - x9382;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9385 = x8981 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9386 = x9385 * x9004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9387 = x8981 + x9004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9388 = x9387 - x9386;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9389 = x8982 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9390 = x9389 * x9005;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9391 = x8982 + x9005;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9392 = x9391 - x9390;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9393 = x8983 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9394 = x9393 * x9006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9395 = x8983 + x9006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9396 = x9395 - x9394;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9397 = x8984 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9398 = x9397 * x9007;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9399 = x8984 + x9007;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9400 = x9399 - x9398;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9401 = x8985 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9402 = x9401 * x9008;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9403 = x8985 + x9008;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9404 = x9403 - x9402;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9405 = x8986 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9406 = x9405 * x9009;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9407 = x8986 + x9009;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9408 = x9407 - x9406;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9409 = x8995 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9410 = x9409 * x9324;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9411 = x8995 + x9324;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9412 = x9411 - x9410;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9413 = x8996 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9414 = x9413 * x9328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9415 = x8996 + x9328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9416 = x9415 - x9414;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9417 = x9321 * x9332;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9418 = x8997 + x9332;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9419 = x9418 - x9417;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9420 = x9325 * x9336;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9421 = x8998 + x9336;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9422 = x9421 - x9420;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9423 = x9329 * x9340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9424 = x8999 + x9340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9425 = x9424 - x9423;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9426 = x9333 * x9344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9427 = x9000 + x9344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9428 = x9427 - x9426;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9429 = x9337 * x9348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9430 = x9001 + x9348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9431 = x9430 - x9429;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9432 = x9341 * x9352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9433 = x9002 + x9352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9434 = x9433 - x9432;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9435 = x9345 * x9356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9436 = x9003 + x9356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9437 = x9436 - x9435;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9438 = x9349 * x9360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9439 = x9004 + x9360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9440 = x9439 - x9438;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9441 = x9353 * x9364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9442 = x9005 + x9364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9443 = x9442 - x9441;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9444 = x9357 * x9368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9445 = x9006 + x9368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9446 = x9445 - x9444;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9447 = x9361 * x9372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9448 = x9007 + x9372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9449 = x9448 - x9447;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9450 = x9365 * x9376;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9451 = x9008 + x9376;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9452 = x9451 - x9450;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9453 = x9369 * x9380;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9454 = x9009 + x9380;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9455 = x9454 - x9453;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9456 = x9373 * x9384;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9457 = x8978 + x9384;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9458 = x9457 - x9456;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9459 = x9377 * x9388;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9460 = x8979 + x9388;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9461 = x9460 - x9459;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9462 = x9381 * x9392;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9463 = x8980 + x9392;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9464 = x9463 - x9462;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9465 = x9385 * x9396;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9466 = x8981 + x9396;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9467 = x9466 - x9465;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9468 = x9389 * x9400;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9469 = x8982 + x9400;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9470 = x9469 - x9468;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9471 = x9393 * x9404;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9472 = x8983 + x9404;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9473 = x9472 - x9471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9474 = x9397 * x9408;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9475 = x8984 + x9408;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9476 = x9475 - x9474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9477 = x9401 * x8987;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9478 = x8985 + x8987;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9479 = x9478 - x9477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9480 = x9405 * x8988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9481 = x8986 + x8988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9482 = x9481 - x9480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9483 = x8987 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9484 = x9483 * x8989;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9485 = x8987 + x8989;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9486 = x9485 - x9484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9487 = x8988 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9488 = x9487 * x8990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9489 = x8988 + x8990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9490 = x9489 - x9488;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9491 = x8989 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9492 = x9491 * x8991;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9493 = x8989 + x8991;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9494 = x9493 - x9492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9495 = x8990 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9496 = x9495 * x8992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9497 = x8990 + x8992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9498 = x9497 - x9496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9499 = x8991 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9500 = x9499 * x8993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9501 = x8991 + x8993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9502 = x9501 - x9500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9503 = x8992 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9504 = x9503 * x8994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9505 = x8992 + x8994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9506 = x9505 - x9504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9507 = x8993 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9508 = x9507 * x8995;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9509 = x8993 + x8995;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9510 = x9509 - x9508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9511 = x8994 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9512 = x9511 * x8996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9513 = x8994 + x8996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x9514 = x9513 - x9512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9515 = x9416 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9516 = x9412 + x9515;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9517 = x9419 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9518 = x9516 + x9517;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9519 = x9422 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9520 = x9518 + x9519;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9521 = x9425 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9522 = x9520 + x9521;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9523 = x9428 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9524 = x9522 + x9523;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9525 = x9431 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9526 = x9524 + x9525;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9527 = x9434 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9528 = x9526 + x9527;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9529 = x9437 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9530 = x9528 + x9529;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9531 = x9440 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9532 = x9530 + x9531;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9533 = x9443 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9534 = x9532 + x9533;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9535 = x9446 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9536 = x9534 + x9535;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9537 = x9449 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9538 = x9536 + x9537;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9539 = x9452 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9540 = x9538 + x9539;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9541 = x9455 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9542 = x9540 + x9541;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9543 = x9458 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9544 = x9542 + x9543;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9545 = x9464 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9546 = x9461 + x9545;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9547 = x9467 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9548 = x9546 + x9547;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9549 = x9470 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9550 = x9548 + x9549;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9551 = x9473 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9552 = x9550 + x9551;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9553 = x9476 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9554 = x9552 + x9553;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9555 = x9479 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9556 = x9554 + x9555;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9557 = x9482 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9558 = x9556 + x9557;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9559 = x9486 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9560 = x9558 + x9559;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9561 = x9490 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9562 = x9560 + x9561;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9563 = x9494 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9564 = x9562 + x9563;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9565 = x9498 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9566 = x9564 + x9565;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9567 = x9502 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9568 = x9566 + x9567;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9569 = x9506 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9570 = x9568 + x9569;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9571 = x9510 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9572 = x9570 + x9571;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9573 = x9514 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9574 = x9572 + x9573;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9575 = x9011 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9576 = x9010 + x9575;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9577 = x9012 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9578 = x9576 + x9577;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9579 = x9013 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9580 = x9578 + x9579;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9581 = x9014 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9582 = x9580 + x9581;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9583 = x9015 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9584 = x9582 + x9583;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9585 = x9016 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9586 = x9584 + x9585;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9587 = x9017 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9588 = x9586 + x9587;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9589 = x9018 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9590 = x9588 + x9589;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9591 = x9019 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9592 = x9590 + x9591;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9593 = x9020 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9594 = x9592 + x9593;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9595 = x9021 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9596 = x9594 + x9595;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9597 = x9022 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9598 = x9596 + x9597;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9599 = x9023 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9600 = x9598 + x9599;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9601 = x9024 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9602 = x9600 + x9601;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9603 = x9025 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9604 = x9602 + x9603;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9605 = x9027 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9606 = x9026 + x9605;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9607 = x9028 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9608 = x9606 + x9607;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9609 = x9029 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9610 = x9608 + x9609;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9611 = x9030 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9612 = x9610 + x9611;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9613 = x9031 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9614 = x9612 + x9613;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9615 = x9032 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9616 = x9614 + x9615;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9617 = x9033 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9618 = x9616 + x9617;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9619 = x9034 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9620 = x9618 + x9619;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9621 = x9035 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9622 = x9620 + x9621;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9623 = x9036 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9624 = x9622 + x9623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9625 = x9037 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9626 = x9624 + x9625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9627 = x9038 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9628 = x9626 + x9627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9629 = x9039 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9630 = x9628 + x9629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9631 = x9040 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9632 = x9630 + x9631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9633 = x9041 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9634 = x9632 + x9633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x9635 = x9604 + x9544;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x9636 = x9634 + x9574;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9637 = x9227 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9638 = x9224 + x9637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9639 = x9230 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9640 = x9638 + x9639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9641 = x9233 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9642 = x9640 + x9641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9643 = x9236 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9644 = x9642 + x9643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9645 = x9239 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9646 = x9644 + x9645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9647 = x9242 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9648 = x9646 + x9647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9649 = x9245 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9650 = x9648 + x9649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9651 = x9249 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9652 = x9650 + x9651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9653 = x9253 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9654 = x9652 + x9653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9655 = x9257 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9656 = x9654 + x9655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9657 = x9260 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9658 = x9656 + x9657;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9659 = x9263 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9660 = x9658 + x9659;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9661 = x9266 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9662 = x9660 + x9661;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9663 = x9269 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9664 = x9662 + x9663;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9665 = x9272 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9666 = x9664 + x9665;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9667 = x9278 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9668 = x9275 + x9667;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9669 = x9281 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9670 = x9668 + x9669;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9671 = x9284 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9672 = x9670 + x9671;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9673 = x9287 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9674 = x9672 + x9673;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9675 = x9290 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9676 = x9674 + x9675;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9677 = x9293 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9678 = x9676 + x9677;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9679 = x9296 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9680 = x9678 + x9679;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9681 = x9299 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9682 = x9680 + x9681;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9683 = x9302 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9684 = x9682 + x9683;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9685 = x9305 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9686 = x9684 + x9685;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9687 = x9308 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9688 = x9686 + x9687;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9689 = x9311 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9690 = x9688 + x9689;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9691 = x9314 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9692 = x9690 + x9691;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9693 = x9317 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9694 = x9692 + x9693;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9695 = x9320 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9696 = x9694 + x9695;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x9697 = x9666 + x9635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x9698 = x9696 + x9636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9699 = x9075 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9700 = x9074 + x9699;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9701 = x9076 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9702 = x9700 + x9701;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9703 = x9077 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9704 = x9702 + x9703;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9705 = x9078 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9706 = x9704 + x9705;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9707 = x9079 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9708 = x9706 + x9707;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9709 = x9080 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9710 = x9708 + x9709;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9711 = x9081 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9712 = x9710 + x9711;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9713 = x9082 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9714 = x9712 + x9713;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9715 = x9083 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9716 = x9714 + x9715;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9717 = x9084 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9718 = x9716 + x9717;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9719 = x9085 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9720 = x9718 + x9719;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9721 = x9086 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9722 = x9720 + x9721;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9723 = x9087 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9724 = x9722 + x9723;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9725 = x9088 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9726 = x9724 + x9725;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9727 = x9089 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9728 = x9726 + x9727;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9729 = x9091 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9730 = x9090 + x9729;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9731 = x9092 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9732 = x9730 + x9731;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9733 = x9093 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9734 = x9732 + x9733;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9735 = x9094 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9736 = x9734 + x9735;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9737 = x9095 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9738 = x9736 + x9737;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9739 = x9096 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9740 = x9738 + x9739;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9741 = x9097 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9742 = x9740 + x9741;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9743 = x9098 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9744 = x9742 + x9743;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9745 = x9099 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9746 = x9744 + x9745;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9747 = x9100 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9748 = x9746 + x9747;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9749 = x9101 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9750 = x9748 + x9749;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9751 = x9102 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9752 = x9750 + x9751;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9753 = x9103 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9754 = x9752 + x9753;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9755 = x9104 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9756 = x9754 + x9755;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9757 = x9105 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x9758 = x9756 + x9757;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x9759 = x9728 + x9697;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x9760 = x9758 + x9698;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":460:0)
      {
        auto& reg = args[2][157 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9759);
        reg = x9759;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":460:0)
      {
        auto& reg = args[2][158 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9760);
        reg = x9760;
      }
      if (x8932 != 0) {
        {
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9761 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9761 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9762 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9762 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9763 = x9762 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9764 = x9761 + x9763;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9765 = args[2][81 * steps + ((cycle - 0) & mask)];
        assert(x9765 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9766 = x9765 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9767 = x9764 + x9766;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9768 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9768 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9769 = x9768 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9770 = x9767 + x9769;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9771 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9771 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9772 = x9771 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9773 = x9770 + x9772;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9774 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9774 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9775 = x9774 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9776 = x9773 + x9775;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9777 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9777 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9778 = x9777 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9779 = x9776 + x9778;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9780 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9780 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9781 = x9780 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9782 = x9779 + x9781;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9783 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9783 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9784 = x9783 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9785 = x9782 + x9784;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9786 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9786 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9787 = x9786 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9788 = x9785 + x9787;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9789 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x9789 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9790 = x9789 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9791 = x9788 + x9790;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9792 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x9792 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9793 = x9792 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9794 = x9791 + x9793;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9795 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x9795 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9796 = x9795 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9797 = x9794 + x9796;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9798 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x9798 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9799 = x9798 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9800 = x9797 + x9799;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9801 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x9801 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9802 = x9801 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9803 = x9800 + x9802;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9804 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x9804 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9805 = x9804 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9806 = x9803 + x9805;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x9807 = x95 - x9806;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x9808 = x9807 * x10;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9808);
          reg = x9808;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9809 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9809 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9810 = Fp(x9809.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9810);
            reg = x9810;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9811 = Fp(x9809.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9812 = x9811 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9812);
            reg = x9812;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9813 = Fp(x9809.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9814 = x9813 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9814);
            reg = x9814;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9815 = Fp(x9809.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9816 = x9815 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9816);
            reg = x9816;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9817 = Fp(x9809.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9818 = x9817 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9818);
            reg = x9818;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9819 = Fp(x9809.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9820 = x9819 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9820);
            reg = x9820;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9821 = Fp(x9809.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9822 = x9821 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9822);
            reg = x9822;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9823 = Fp(x9809.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9824 = x9823 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9824);
            reg = x9824;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9825 = Fp(x9809.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9826 = x9825 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9826);
            reg = x9826;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9827 = Fp(x9809.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9828 = x9827 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9828);
            reg = x9828;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9829 = Fp(x9809.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9830 = x9829 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9830);
            reg = x9830;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9831 = Fp(x9809.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9832 = x9831 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9832);
            reg = x9832;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9833 = Fp(x9809.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9834 = x9833 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9834);
            reg = x9834;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9835 = Fp(x9809.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9836 = x9835 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9836);
            reg = x9836;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9837 = Fp(x9809.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9838 = x9837 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9838);
            reg = x9838;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9839 = Fp(x9809.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9840 = x9839 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9840);
            reg = x9840;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9841 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x9841 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9842 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9842 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9843 = x9842 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9844 = x9841 + x9843;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9845 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9845 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9846 = x9845 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9847 = x9844 + x9846;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9848 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9848 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9849 = x9848 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9850 = x9847 + x9849;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9851 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9851 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9852 = x9851 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9853 = x9850 + x9852;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9854 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9854 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9855 = x9854 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9856 = x9853 + x9855;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9857 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9857 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9858 = x9857 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9859 = x9856 + x9858;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9860 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9860 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9861 = x9860 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9862 = x9859 + x9861;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9863 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9863 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9864 = x9863 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9865 = x9862 + x9864;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9866 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9866 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9867 = x9866 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9868 = x9865 + x9867;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9869 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9869 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9870 = x9869 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9871 = x9868 + x9870;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9872 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9872 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9873 = x9872 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9874 = x9871 + x9873;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9875 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9875 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9876 = x9875 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9877 = x9874 + x9876;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9878 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9878 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9879 = x9878 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9880 = x9877 + x9879;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9881 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9881 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9882 = x9881 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9883 = x9880 + x9882;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9884 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9884 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9885 = x9884 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9886 = x9883 + x9885;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x9887 = x9809 - x9886;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x9888 = x9887 * x10;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9888);
          reg = x9888;
        }
      }
      if (x8933 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
        auto x9889 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9889 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
        auto x9890 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9890 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9891 = Fp(x9889.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9891);
            reg = x9891;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9892 = Fp(x9889.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9893 = x9892 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9893);
            reg = x9893;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9894 = Fp(x9889.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9895 = x9894 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9895);
            reg = x9895;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9896 = Fp(x9889.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9897 = x9896 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9897);
            reg = x9897;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9898 = Fp(x9889.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9899 = x9898 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9899);
            reg = x9899;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9900 = Fp(x9889.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9901 = x9900 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9901);
            reg = x9901;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9902 = Fp(x9889.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9903 = x9902 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9903);
            reg = x9903;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9904 = Fp(x9889.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9905 = x9904 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9905);
            reg = x9905;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9906 = Fp(x9889.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9907 = x9906 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9907);
            reg = x9907;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9908 = Fp(x9889.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9909 = x9908 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9909);
            reg = x9909;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9910 = Fp(x9889.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9911 = x9910 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9911);
            reg = x9911;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9912 = Fp(x9889.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9913 = x9912 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9913);
            reg = x9913;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9914 = Fp(x9889.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9915 = x9914 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9915);
            reg = x9915;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9916 = Fp(x9889.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9917 = x9916 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9917);
            reg = x9917;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9918 = Fp(x9889.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9919 = x9918 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9919);
            reg = x9919;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9920 = Fp(x9889.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9921 = x9920 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9921);
            reg = x9921;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9922 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9922 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9923 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9923 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9924 = x9923 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9925 = x9922 + x9924;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9926 = args[2][81 * steps + ((cycle - 0) & mask)];
        assert(x9926 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9927 = x9926 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9928 = x9925 + x9927;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9929 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9929 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9930 = x9929 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9931 = x9928 + x9930;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9932 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9932 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9933 = x9932 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9934 = x9931 + x9933;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9935 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9935 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9936 = x9935 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9937 = x9934 + x9936;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9938 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9938 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9939 = x9938 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9940 = x9937 + x9939;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9941 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9941 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9942 = x9941 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9943 = x9940 + x9942;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9944 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9944 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9945 = x9944 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9946 = x9943 + x9945;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9947 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9947 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9948 = x9947 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9949 = x9946 + x9948;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9950 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x9950 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9951 = x9950 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9952 = x9949 + x9951;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9953 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x9953 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9954 = x9953 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9955 = x9952 + x9954;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9956 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x9956 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9957 = x9956 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9958 = x9955 + x9957;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9959 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x9959 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9960 = x9959 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9961 = x9958 + x9960;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9962 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x9962 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9963 = x9962 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9964 = x9961 + x9963;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9965 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x9965 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9966 = x9965 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x9967 = x9964 + x9966;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x9968 = x9889 - x9967;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x9969 = x9968 * x10;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9969);
          reg = x9969;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x9970 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9970 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":117:0)
        auto x9971 = x9890 + x9970;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9972 = Fp(x9971.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9972);
            reg = x9972;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9973 = Fp(x9971.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9974 = x9973 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9974);
            reg = x9974;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9975 = Fp(x9971.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9976 = x9975 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9976);
            reg = x9976;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9977 = Fp(x9971.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9978 = x9977 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9978);
            reg = x9978;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9979 = Fp(x9971.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9980 = x9979 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9980);
            reg = x9980;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9981 = Fp(x9971.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9982 = x9981 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9982);
            reg = x9982;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9983 = Fp(x9971.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9984 = x9983 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9984);
            reg = x9984;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9985 = Fp(x9971.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9986 = x9985 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9986);
            reg = x9986;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9987 = Fp(x9971.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9988 = x9987 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9988);
            reg = x9988;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9989 = Fp(x9971.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9990 = x9989 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9990);
            reg = x9990;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9991 = Fp(x9971.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9992 = x9991 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9992);
            reg = x9992;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9993 = Fp(x9971.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9994 = x9993 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9994);
            reg = x9994;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9995 = Fp(x9971.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9996 = x9995 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9996);
            reg = x9996;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9997 = Fp(x9971.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9998 = x9997 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9998);
            reg = x9998;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x9999 = Fp(x9971.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10000 = x9999 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10000);
            reg = x10000;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10001 = Fp(x9971.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10002 = x10001 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10002);
            reg = x10002;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10003 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x10003 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10004 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x10004 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10005 = x10004 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10006 = x10003 + x10005;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10007 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x10007 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10008 = x10007 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10009 = x10006 + x10008;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10010 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x10010 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10011 = x10010 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10012 = x10009 + x10011;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10013 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x10013 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10014 = x10013 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10015 = x10012 + x10014;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10016 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x10016 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10017 = x10016 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10018 = x10015 + x10017;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10019 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x10019 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10020 = x10019 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10021 = x10018 + x10020;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10022 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x10022 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10023 = x10022 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10024 = x10021 + x10023;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10025 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x10025 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10026 = x10025 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10027 = x10024 + x10026;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10028 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x10028 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10029 = x10028 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10030 = x10027 + x10029;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10031 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x10031 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10032 = x10031 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10033 = x10030 + x10032;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10034 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x10034 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10035 = x10034 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10036 = x10033 + x10035;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10037 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x10037 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10038 = x10037 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10039 = x10036 + x10038;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10040 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x10040 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10041 = x10040 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10042 = x10039 + x10041;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10043 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x10043 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10044 = x10043 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10045 = x10042 + x10044;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10046 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x10046 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10047 = x10046 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10048 = x10045 + x10047;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10049 = x9971 - x10048;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10050 = x10049 * x10;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10050);
          reg = x10050;
        }
      }
      if (x8932 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10051 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x10051 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10052 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x10052 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10053 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x10053 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10054 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x10054 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10055 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x10055 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10056 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x10056 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10057 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x10057 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10058 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x10058 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10059 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x10059 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10060 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x10060 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10061 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x10061 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10062 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x10062 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10063 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x10063 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10064 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x10064 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10065 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x10065 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10066 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x10066 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10067 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x10067 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10068 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x10068 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10069 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x10069 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10070 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x10070 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10071 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x10071 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10072 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x10072 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10073 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x10073 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10074 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x10074 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10075 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x10075 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10076 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x10076 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10077 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x10077 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10078 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x10078 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10079 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x10079 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10080 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x10080 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10081 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x10081 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10082 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10082 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10083 = x10052 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10084 = x10051 + x10083;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10085 = x10053 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10086 = x10084 + x10085;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10087 = x10054 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10088 = x10086 + x10087;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10089 = x10055 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10090 = x10088 + x10089;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10091 = x10056 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10092 = x10090 + x10091;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10093 = x10057 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10094 = x10092 + x10093;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10095 = x10058 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10096 = x10094 + x10095;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10097 = x10059 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10098 = x10096 + x10097;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10099 = x10060 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10100 = x10098 + x10099;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10101 = x10061 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10102 = x10100 + x10101;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10103 = x10062 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10104 = x10102 + x10103;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10105 = x10063 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10106 = x10104 + x10105;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10107 = x10064 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10108 = x10106 + x10107;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10109 = x10065 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10110 = x10108 + x10109;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10111 = x10066 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10112 = x10110 + x10111;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10113 = x10068 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10114 = x10067 + x10113;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10115 = x10069 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10116 = x10114 + x10115;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10117 = x10070 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10118 = x10116 + x10117;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10119 = x10071 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10120 = x10118 + x10119;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10121 = x10072 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10122 = x10120 + x10121;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10123 = x10073 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10124 = x10122 + x10123;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10125 = x10074 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10126 = x10124 + x10125;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10127 = x10075 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10128 = x10126 + x10127;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10129 = x10076 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10130 = x10128 + x10129;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10131 = x10077 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10132 = x10130 + x10131;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10133 = x10078 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10134 = x10132 + x10133;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10135 = x10079 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10136 = x10134 + x10135;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10137 = x10080 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10138 = x10136 + x10137;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10139 = x10081 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10140 = x10138 + x10139;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10141 = x10082 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10142 = x10140 + x10141;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10143 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x10143 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10144 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x10144 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10145 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x10145 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10146 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x10146 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10147 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x10147 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10148 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x10148 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10149 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x10149 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10150 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x10150 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10151 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x10151 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10152 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x10152 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10153 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x10153 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10154 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x10154 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10155 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x10155 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10156 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x10156 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10157 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x10157 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10158 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x10158 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10159 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x10159 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10160 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x10160 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10161 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x10161 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10162 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x10162 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10163 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x10163 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10164 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x10164 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10165 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x10165 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10166 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x10166 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10167 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x10167 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10168 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x10168 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10169 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x10169 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10170 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x10170 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10171 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x10171 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10172 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x10172 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10173 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x10173 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10174 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x10174 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10175 = x10144 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10176 = x10143 + x10175;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10177 = x10145 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10178 = x10176 + x10177;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10179 = x10146 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10180 = x10178 + x10179;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10181 = x10147 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10182 = x10180 + x10181;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10183 = x10148 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10184 = x10182 + x10183;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10185 = x10149 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10186 = x10184 + x10185;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10187 = x10150 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10188 = x10186 + x10187;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10189 = x10151 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10190 = x10188 + x10189;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10191 = x10152 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10192 = x10190 + x10191;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10193 = x10153 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10194 = x10192 + x10193;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10195 = x10154 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10196 = x10194 + x10195;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10197 = x10155 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10198 = x10196 + x10197;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10199 = x10156 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10200 = x10198 + x10199;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10201 = x10157 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10202 = x10200 + x10201;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10203 = x10158 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10204 = x10202 + x10203;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10205 = x10160 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10206 = x10159 + x10205;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10207 = x10161 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10208 = x10206 + x10207;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10209 = x10162 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10210 = x10208 + x10209;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10211 = x10163 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10212 = x10210 + x10211;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10213 = x10164 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10214 = x10212 + x10213;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10215 = x10165 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10216 = x10214 + x10215;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10217 = x10166 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10218 = x10216 + x10217;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10219 = x10167 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10220 = x10218 + x10219;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10221 = x10168 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10222 = x10220 + x10221;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10223 = x10169 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10224 = x10222 + x10223;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10225 = x10170 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10226 = x10224 + x10225;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10227 = x10171 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10228 = x10226 + x10227;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10229 = x10172 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10230 = x10228 + x10229;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10231 = x10173 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10232 = x10230 + x10231;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10233 = x10174 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10234 = x10232 + x10233;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
        auto x10235 = x10204 + x10112;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
        auto x10236 = x10234 + x10142;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10237 = Fp(x10235.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10237);
            reg = x10237;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10238 = Fp(x10235.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10239 = x10238 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10239);
            reg = x10239;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10240 = Fp(x10235.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10241 = x10240 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10241);
            reg = x10241;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10242 = Fp(x10235.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10243 = x10242 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10243);
            reg = x10243;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10244 = Fp(x10235.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10245 = x10244 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10245);
            reg = x10245;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10246 = Fp(x10235.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10247 = x10246 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10247);
            reg = x10247;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10248 = Fp(x10235.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10249 = x10248 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10249);
            reg = x10249;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10250 = Fp(x10235.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10251 = x10250 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10251);
            reg = x10251;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10252 = Fp(x10235.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10253 = x10252 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10253);
            reg = x10253;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10254 = Fp(x10235.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10255 = x10254 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10255);
            reg = x10255;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10256 = Fp(x10235.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10257 = x10256 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10257);
            reg = x10257;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10258 = Fp(x10235.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10259 = x10258 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10259);
            reg = x10259;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10260 = Fp(x10235.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10261 = x10260 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10261);
            reg = x10261;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10262 = Fp(x10235.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10263 = x10262 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10263);
            reg = x10263;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10264 = Fp(x10235.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10265 = x10264 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10265);
            reg = x10265;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10266 = Fp(x10235.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10267 = x10266 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10267);
            reg = x10267;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10268 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x10268 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10269 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x10269 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10270 = x10269 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10271 = x10268 + x10270;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10272 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x10272 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10273 = x10272 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10274 = x10271 + x10273;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10275 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x10275 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10276 = x10275 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10277 = x10274 + x10276;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10278 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x10278 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10279 = x10278 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10280 = x10277 + x10279;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10281 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x10281 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10282 = x10281 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10283 = x10280 + x10282;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10284 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x10284 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10285 = x10284 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10286 = x10283 + x10285;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10287 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x10287 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10288 = x10287 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10289 = x10286 + x10288;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10290 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x10290 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10291 = x10290 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10292 = x10289 + x10291;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10293 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x10293 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10294 = x10293 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10295 = x10292 + x10294;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10296 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x10296 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10297 = x10296 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10298 = x10295 + x10297;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10299 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x10299 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10300 = x10299 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10301 = x10298 + x10300;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10302 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x10302 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10303 = x10302 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10304 = x10301 + x10303;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10305 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x10305 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10306 = x10305 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10307 = x10304 + x10306;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10308 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x10308 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10309 = x10308 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10310 = x10307 + x10309;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10311 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x10311 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10312 = x10311 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10313 = x10310 + x10312;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10314 = x10235 - x10313;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10315 = x10314 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:0)
          auto x10316 = Fp(x10315.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10316);
            reg = x10316;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10317 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x10317 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
        auto x10318 = x10315 - x10317;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
        auto x10319 = x10318 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        auto x10320 = x96 - x10319;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        auto x10321 = x10319 * x10320;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        if (x10321 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:0)
        auto x10322 = x10236 + x10315;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10323 = Fp(x10322.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10323);
            reg = x10323;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10324 = Fp(x10322.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10325 = x10324 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10325);
            reg = x10325;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10326 = Fp(x10322.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10327 = x10326 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10327);
            reg = x10327;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10328 = Fp(x10322.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10329 = x10328 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10329);
            reg = x10329;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10330 = Fp(x10322.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10331 = x10330 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10331);
            reg = x10331;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10332 = Fp(x10322.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10333 = x10332 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10333);
            reg = x10333;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10334 = Fp(x10322.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10335 = x10334 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10335);
            reg = x10335;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10336 = Fp(x10322.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10337 = x10336 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10337);
            reg = x10337;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10338 = Fp(x10322.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10339 = x10338 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10339);
            reg = x10339;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10340 = Fp(x10322.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10341 = x10340 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10341);
            reg = x10341;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10342 = Fp(x10322.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10343 = x10342 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10343);
            reg = x10343;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10344 = Fp(x10322.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10345 = x10344 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10345);
            reg = x10345;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10346 = Fp(x10322.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10347 = x10346 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10347);
            reg = x10347;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10348 = Fp(x10322.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10349 = x10348 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10349);
            reg = x10349;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10350 = Fp(x10322.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10351 = x10350 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10351);
            reg = x10351;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10352 = Fp(x10322.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10353 = x10352 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10353);
            reg = x10353;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10354 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x10354 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10355 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x10355 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10356 = x10355 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10357 = x10354 + x10356;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10358 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x10358 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10359 = x10358 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10360 = x10357 + x10359;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10361 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x10361 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10362 = x10361 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10363 = x10360 + x10362;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10364 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x10364 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10365 = x10364 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10366 = x10363 + x10365;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10367 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x10367 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10368 = x10367 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10369 = x10366 + x10368;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10370 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x10370 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10371 = x10370 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10372 = x10369 + x10371;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10373 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10373 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10374 = x10373 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10375 = x10372 + x10374;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10376 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10376 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10377 = x10376 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10378 = x10375 + x10377;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10379 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10379 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10380 = x10379 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10381 = x10378 + x10380;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10382 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10382 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10383 = x10382 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10384 = x10381 + x10383;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10385 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10385 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10386 = x10385 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10387 = x10384 + x10386;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10388 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10388 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10389 = x10388 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10390 = x10387 + x10389;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10391 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10391 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10392 = x10391 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10393 = x10390 + x10392;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10394 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10394 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10395 = x10394 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10396 = x10393 + x10395;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10397 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10397 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10398 = x10397 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10399 = x10396 + x10398;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10400 = x10322 - x10399;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10401 = x10400 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:0)
          auto x10402 = Fp(x10401.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10402);
            reg = x10402;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10403 = args[2][74 * steps + ((cycle - 0) & mask)];
        assert(x10403 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
        auto x10404 = x10401 - x10403;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
        auto x10405 = x10404 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        auto x10406 = x96 - x10405;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        auto x10407 = x10405 * x10406;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        if (x10407 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10408 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10408 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10409 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10409 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10410 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10410 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10411 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10411 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10412 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10412 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10413 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10413 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10414 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10414 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10415 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10415 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10416 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10416 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10417 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10417 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10418 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10418 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10419 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10419 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10420 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10420 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10421 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10421 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10422 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10422 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10423 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10423 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10424 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10424 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10425 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10425 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10426 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10426 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10427 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10427 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10428 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10428 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10429 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10429 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10430 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10430 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10431 = args[2][214 * steps + ((cycle - 68) & mask)];
        assert(x10431 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10432 = args[2][215 * steps + ((cycle - 68) & mask)];
        assert(x10432 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10433 = args[2][216 * steps + ((cycle - 68) & mask)];
        assert(x10433 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10434 = args[2][217 * steps + ((cycle - 68) & mask)];
        assert(x10434 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10435 = args[2][218 * steps + ((cycle - 68) & mask)];
        assert(x10435 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10436 = args[2][219 * steps + ((cycle - 68) & mask)];
        assert(x10436 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10437 = args[2][220 * steps + ((cycle - 68) & mask)];
        assert(x10437 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10438 = args[2][221 * steps + ((cycle - 68) & mask)];
        assert(x10438 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10439 = args[2][222 * steps + ((cycle - 68) & mask)];
        assert(x10439 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10440 = x10409 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10441 = x10408 + x10440;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10442 = x10410 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10443 = x10441 + x10442;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10444 = x10411 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10445 = x10443 + x10444;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10446 = x10412 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10447 = x10445 + x10446;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10448 = x10413 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10449 = x10447 + x10448;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10450 = x10414 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10451 = x10449 + x10450;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10452 = x10415 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10453 = x10451 + x10452;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10454 = x10416 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10455 = x10453 + x10454;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10456 = x10417 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10457 = x10455 + x10456;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10458 = x10418 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10459 = x10457 + x10458;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10460 = x10419 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10461 = x10459 + x10460;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10462 = x10420 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10463 = x10461 + x10462;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10464 = x10421 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10465 = x10463 + x10464;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10466 = x10422 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10467 = x10465 + x10466;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10468 = x10423 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10469 = x10467 + x10468;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10470 = x10425 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10471 = x10424 + x10470;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10472 = x10426 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10473 = x10471 + x10472;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10474 = x10427 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10475 = x10473 + x10474;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10476 = x10428 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10477 = x10475 + x10476;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10478 = x10429 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10479 = x10477 + x10478;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10480 = x10430 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10481 = x10479 + x10480;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10482 = x10431 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10483 = x10481 + x10482;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10484 = x10432 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10485 = x10483 + x10484;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10486 = x10433 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10487 = x10485 + x10486;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10488 = x10434 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10489 = x10487 + x10488;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10490 = x10435 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10491 = x10489 + x10490;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10492 = x10436 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10493 = x10491 + x10492;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10494 = x10437 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10495 = x10493 + x10494;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10496 = x10438 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10497 = x10495 + x10496;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10498 = x10439 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10499 = x10497 + x10498;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10500 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x10500 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10501 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x10501 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10502 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x10502 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10503 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x10503 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10504 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x10504 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10505 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x10505 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10506 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x10506 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10507 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x10507 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10508 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x10508 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10509 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x10509 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10510 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x10510 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10511 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x10511 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10512 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x10512 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10513 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x10513 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10514 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x10514 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10515 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x10515 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10516 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x10516 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10517 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x10517 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10518 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x10518 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10519 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x10519 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10520 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x10520 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10521 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x10521 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10522 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x10522 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10523 = args[2][214 * steps + ((cycle - 4) & mask)];
        assert(x10523 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10524 = args[2][215 * steps + ((cycle - 4) & mask)];
        assert(x10524 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10525 = args[2][216 * steps + ((cycle - 4) & mask)];
        assert(x10525 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10526 = args[2][217 * steps + ((cycle - 4) & mask)];
        assert(x10526 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10527 = args[2][218 * steps + ((cycle - 4) & mask)];
        assert(x10527 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10528 = args[2][219 * steps + ((cycle - 4) & mask)];
        assert(x10528 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10529 = args[2][220 * steps + ((cycle - 4) & mask)];
        assert(x10529 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10530 = args[2][221 * steps + ((cycle - 4) & mask)];
        assert(x10530 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10531 = args[2][222 * steps + ((cycle - 4) & mask)];
        assert(x10531 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10532 = x10501 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10533 = x10500 + x10532;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10534 = x10502 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10535 = x10533 + x10534;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10536 = x10503 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10537 = x10535 + x10536;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10538 = x10504 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10539 = x10537 + x10538;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10540 = x10505 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10541 = x10539 + x10540;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10542 = x10506 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10543 = x10541 + x10542;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10544 = x10507 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10545 = x10543 + x10544;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10546 = x10508 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10547 = x10545 + x10546;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10548 = x10509 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10549 = x10547 + x10548;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10550 = x10510 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10551 = x10549 + x10550;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10552 = x10511 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10553 = x10551 + x10552;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10554 = x10512 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10555 = x10553 + x10554;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10556 = x10513 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10557 = x10555 + x10556;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10558 = x10514 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10559 = x10557 + x10558;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10560 = x10515 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10561 = x10559 + x10560;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10562 = x10517 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10563 = x10516 + x10562;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10564 = x10518 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10565 = x10563 + x10564;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10566 = x10519 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10567 = x10565 + x10566;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10568 = x10520 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10569 = x10567 + x10568;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10570 = x10521 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10571 = x10569 + x10570;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10572 = x10522 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10573 = x10571 + x10572;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10574 = x10523 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10575 = x10573 + x10574;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10576 = x10524 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10577 = x10575 + x10576;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10578 = x10525 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10579 = x10577 + x10578;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10580 = x10526 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10581 = x10579 + x10580;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10582 = x10527 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10583 = x10581 + x10582;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10584 = x10528 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10585 = x10583 + x10584;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10586 = x10529 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10587 = x10585 + x10586;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10588 = x10530 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10589 = x10587 + x10588;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10590 = x10531 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
        auto x10591 = x10589 + x10590;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
        auto x10592 = x10561 + x10469;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
        auto x10593 = x10591 + x10499;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10594 = Fp(x10592.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10594);
            reg = x10594;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10595 = Fp(x10592.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10596 = x10595 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10596);
            reg = x10596;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10597 = Fp(x10592.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10598 = x10597 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10598);
            reg = x10598;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10599 = Fp(x10592.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10600 = x10599 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10600);
            reg = x10600;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10601 = Fp(x10592.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10602 = x10601 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10602);
            reg = x10602;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10603 = Fp(x10592.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10604 = x10603 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10604);
            reg = x10604;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10605 = Fp(x10592.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10606 = x10605 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10606);
            reg = x10606;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10607 = Fp(x10592.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10608 = x10607 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10608);
            reg = x10608;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10609 = Fp(x10592.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10610 = x10609 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10610);
            reg = x10610;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10611 = Fp(x10592.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10612 = x10611 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10612);
            reg = x10612;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10613 = Fp(x10592.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10614 = x10613 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10614);
            reg = x10614;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10615 = Fp(x10592.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10616 = x10615 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10616);
            reg = x10616;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10617 = Fp(x10592.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10618 = x10617 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10618);
            reg = x10618;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10619 = Fp(x10592.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10620 = x10619 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10620);
            reg = x10620;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10621 = Fp(x10592.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10622 = x10621 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10622);
            reg = x10622;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10623 = Fp(x10592.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10624 = x10623 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10624);
            reg = x10624;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10625 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10625 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10626 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10626 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10627 = x10626 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10628 = x10625 + x10627;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10629 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10629 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10630 = x10629 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10631 = x10628 + x10630;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10632 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10632 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10633 = x10632 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10634 = x10631 + x10633;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10635 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10635 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10636 = x10635 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10637 = x10634 + x10636;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10638 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10638 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10639 = x10638 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10640 = x10637 + x10639;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10641 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10641 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10642 = x10641 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10643 = x10640 + x10642;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10644 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10644 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10645 = x10644 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10646 = x10643 + x10645;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10647 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10647 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10648 = x10647 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10649 = x10646 + x10648;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10650 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10650 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10651 = x10650 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10652 = x10649 + x10651;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10653 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10653 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10654 = x10653 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10655 = x10652 + x10654;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10656 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10656 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10657 = x10656 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10658 = x10655 + x10657;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10659 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10659 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10660 = x10659 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10661 = x10658 + x10660;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10662 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10662 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10663 = x10662 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10664 = x10661 + x10663;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10665 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10665 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10666 = x10665 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10667 = x10664 + x10666;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10668 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10668 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10669 = x10668 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10670 = x10667 + x10669;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10671 = x10592 - x10670;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10672 = x10671 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:0)
          auto x10673 = Fp(x10672.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10673);
            reg = x10673;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10674 = args[2][75 * steps + ((cycle - 0) & mask)];
        assert(x10674 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
        auto x10675 = x10672 - x10674;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
        auto x10676 = x10675 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        auto x10677 = x96 - x10676;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        auto x10678 = x10676 * x10677;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        if (x10678 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:0)
        auto x10679 = x10593 + x10672;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10680 = Fp(x10679.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10680);
            reg = x10680;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10681 = Fp(x10679.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10682 = x10681 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10682);
            reg = x10682;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10683 = Fp(x10679.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10684 = x10683 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10684);
            reg = x10684;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10685 = Fp(x10679.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10686 = x10685 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10686);
            reg = x10686;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10687 = Fp(x10679.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10688 = x10687 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10688);
            reg = x10688;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10689 = Fp(x10679.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10690 = x10689 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10690);
            reg = x10690;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10691 = Fp(x10679.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10692 = x10691 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10692);
            reg = x10692;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10693 = Fp(x10679.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10694 = x10693 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10694);
            reg = x10694;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10695 = Fp(x10679.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10696 = x10695 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10696);
            reg = x10696;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10697 = Fp(x10679.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10698 = x10697 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10698);
            reg = x10698;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10699 = Fp(x10679.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10700 = x10699 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10700);
            reg = x10700;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10701 = Fp(x10679.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10702 = x10701 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10702);
            reg = x10702;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10703 = Fp(x10679.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10704 = x10703 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10704);
            reg = x10704;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10705 = Fp(x10679.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10706 = x10705 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10706);
            reg = x10706;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10707 = Fp(x10679.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10708 = x10707 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10708);
            reg = x10708;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10709 = Fp(x10679.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x10710 = x10709 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][222 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10710);
            reg = x10710;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10711 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10711 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10712 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10712 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10713 = x10712 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10714 = x10711 + x10713;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10715 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10715 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10716 = x10715 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10717 = x10714 + x10716;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10718 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10718 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10719 = x10718 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10720 = x10717 + x10719;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10721 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10721 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10722 = x10721 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10723 = x10720 + x10722;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10724 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10724 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10725 = x10724 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10726 = x10723 + x10725;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10727 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10727 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10728 = x10727 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10729 = x10726 + x10728;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10730 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x10730 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10731 = x10730 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10732 = x10729 + x10731;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10733 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x10733 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10734 = x10733 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10735 = x10732 + x10734;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10736 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x10736 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10737 = x10736 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10738 = x10735 + x10737;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10739 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x10739 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10740 = x10739 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10741 = x10738 + x10740;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10742 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x10742 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10743 = x10742 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10744 = x10741 + x10743;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10745 = args[2][219 * steps + ((cycle - 0) & mask)];
        assert(x10745 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10746 = x10745 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10747 = x10744 + x10746;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10748 = args[2][220 * steps + ((cycle - 0) & mask)];
        assert(x10748 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10749 = x10748 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10750 = x10747 + x10749;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10751 = args[2][221 * steps + ((cycle - 0) & mask)];
        assert(x10751 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10752 = x10751 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10753 = x10750 + x10752;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10754 = args[2][222 * steps + ((cycle - 0) & mask)];
        assert(x10754 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10755 = x10754 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x10756 = x10753 + x10755;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10757 = x10679 - x10756;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x10758 = x10757 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:0)
          auto x10759 = Fp(x10758.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10759);
            reg = x10759;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x10760 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x10760 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
        auto x10761 = x10758 - x10760;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
        auto x10762 = x10761 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        auto x10763 = x96 - x10762;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        auto x10764 = x10762 * x10763;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        if (x10764 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x10765 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x10765 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":402:0)
      auto x10766 = x96 - x10765;
      if (x8941 != 0) {
        if (x10765 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
          auto x10767 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x10767 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":406:0)
          auto x10768 = x10767 + x8924;
          {
            auto [x10769, x10770, x10771, x10772] = extern_ramRead(ctx, cycle, "", {x10768, x96});
            // loc("zirgen/components/u32.cpp":88:0)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10769);
              reg = x10769;
            }
            // loc("zirgen/components/u32.cpp":88:0)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10770);
              reg = x10770;
            }
            // loc("zirgen/components/u32.cpp":88:0)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10771);
              reg = x10771;
            }
            // loc("zirgen/components/u32.cpp":88:0)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10772);
              reg = x10772;
            }
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10773 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10773 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10774 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10774 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10775 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10775 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10776 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x10776 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10768);
            reg = x10768;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10773);
            reg = x10773;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10774);
            reg = x10774;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10775);
            reg = x10775;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10776);
            reg = x10776;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":407:0)
          auto x10777 = x10767 + x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":407:0)
          auto x10778 = x10777 + x8924;
          {
            auto [x10779, x10780, x10781, x10782] = extern_ramRead(ctx, cycle, "", {x10778, x96});
            // loc("zirgen/components/u32.cpp":88:0)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10779);
              reg = x10779;
            }
            // loc("zirgen/components/u32.cpp":88:0)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10780);
              reg = x10780;
            }
            // loc("zirgen/components/u32.cpp":88:0)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10781);
              reg = x10781;
            }
            // loc("zirgen/components/u32.cpp":88:0)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10782);
              reg = x10782;
            }
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10783 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x10783 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10784 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x10784 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10785 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x10785 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10786 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x10786 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10778);
            reg = x10778;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10783);
            reg = x10783;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10784);
            reg = x10784;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10785);
            reg = x10785;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10786);
            reg = x10786;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10787 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10787 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10788 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10788 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10789 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10789 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10790 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10790 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10791 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10791 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10792 = x10791 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10793 = x10787 + x10792;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10794 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10794 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10795 = x10794 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10796 = x10788 + x10795;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10797 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10797 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10798 = x10797 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10799 = x10789 + x10798;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10800 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10800 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10801 = x10800 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10802 = x10790 + x10801;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10803 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10803 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10804 = x10803 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10805 = x10793 + x10804;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10806 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10806 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10807 = x10806 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10808 = x10796 + x10807;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10809 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10809 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10810 = x10809 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10811 = x10799 + x10810;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10812 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10812 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10813 = x10812 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10814 = x10802 + x10813;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10815 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10815 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10816 = x10815 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10817 = x10805 + x10816;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10818 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10818 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10819 = x10818 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10820 = x10808 + x10819;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10821 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10821 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10822 = x10821 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10823 = x10811 + x10822;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10824 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10824 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10825 = x10824 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10826 = x10814 + x10825;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10827 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10827 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10828 = x10827 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10829 = x10817 + x10828;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10830 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10830 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10831 = x10830 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10832 = x10820 + x10831;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10833 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10833 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10834 = x10833 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10835 = x10823 + x10834;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10836 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10836 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10837 = x10836 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10838 = x10826 + x10837;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10839 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10839 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10840 = x10839 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10841 = x10829 + x10840;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10842 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10842 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10843 = x10842 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10844 = x10832 + x10843;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10845 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10845 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10846 = x10845 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10847 = x10835 + x10846;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10848 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10848 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10849 = x10848 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10850 = x10838 + x10849;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10851 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10851 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10852 = x10851 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10853 = x10841 + x10852;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10854 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10854 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10855 = x10854 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10856 = x10844 + x10855;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10857 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10857 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10858 = x10857 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10859 = x10847 + x10858;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10860 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10860 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10861 = x10860 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10862 = x10850 + x10861;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10863 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10863 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10864 = x10863 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10865 = x10853 + x10864;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10866 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10866 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10867 = x10866 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10868 = x10856 + x10867;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10869 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10869 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10870 = x10869 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10871 = x10859 + x10870;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10872 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10872 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10873 = x10872 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10874 = x10862 + x10873;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:0))
          auto x10875 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x10875 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":408:0)
          auto x10876 = x10875 * x77;
          extern_log(ctx, cycle, "  io0: [%10x] %w, a: %w", {x10876, x10773, x10774, x10775, x10776, x10874, x10871, x10868, x10865});
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10877 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10877 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10878 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10878 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10879 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10879 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10880 = args[2][215 * steps + ((cycle - 0) & mask)];
          assert(x10880 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10881 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10881 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10882 = x10881 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10883 = x10877 + x10882;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10884 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10884 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10885 = x10884 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10886 = x10878 + x10885;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10887 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10887 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10888 = x10887 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10889 = x10879 + x10888;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10890 = args[2][216 * steps + ((cycle - 0) & mask)];
          assert(x10890 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10891 = x10890 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10892 = x10880 + x10891;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10893 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10893 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10894 = x10893 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10895 = x10883 + x10894;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10896 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10896 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10897 = x10896 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10898 = x10886 + x10897;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10899 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10899 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10900 = x10899 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10901 = x10889 + x10900;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10902 = args[2][217 * steps + ((cycle - 0) & mask)];
          assert(x10902 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10903 = x10902 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10904 = x10892 + x10903;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10905 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10905 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10906 = x10905 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10907 = x10895 + x10906;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10908 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10908 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10909 = x10908 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10910 = x10898 + x10909;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10911 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10911 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10912 = x10911 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10913 = x10901 + x10912;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10914 = args[2][218 * steps + ((cycle - 0) & mask)];
          assert(x10914 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10915 = x10914 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10916 = x10904 + x10915;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10917 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10917 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10918 = x10917 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10919 = x10907 + x10918;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10920 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10920 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10921 = x10920 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10922 = x10910 + x10921;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10923 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10923 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10924 = x10923 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10925 = x10913 + x10924;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10926 = args[2][219 * steps + ((cycle - 0) & mask)];
          assert(x10926 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10927 = x10926 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10928 = x10916 + x10927;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10929 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10929 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10930 = x10929 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10931 = x10919 + x10930;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10932 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10932 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10933 = x10932 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10934 = x10922 + x10933;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10935 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10935 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10936 = x10935 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10937 = x10925 + x10936;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10938 = args[2][220 * steps + ((cycle - 0) & mask)];
          assert(x10938 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10939 = x10938 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10940 = x10928 + x10939;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10941 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10941 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10942 = x10941 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10943 = x10931 + x10942;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10944 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10944 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10945 = x10944 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10946 = x10934 + x10945;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10947 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10947 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10948 = x10947 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10949 = x10937 + x10948;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10950 = args[2][221 * steps + ((cycle - 0) & mask)];
          assert(x10950 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10951 = x10950 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10952 = x10940 + x10951;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10953 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10953 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10954 = x10953 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10955 = x10943 + x10954;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10956 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10956 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10957 = x10956 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10958 = x10946 + x10957;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10959 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x10959 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10960 = x10959 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10961 = x10949 + x10960;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10962 = args[2][222 * steps + ((cycle - 0) & mask)];
          assert(x10962 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10963 = x10962 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10964 = x10952 + x10963;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:0))
          auto x10965 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x10965 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":409:0)
          auto x10966 = x10965 * x77;
          extern_log(ctx, cycle, "  io1: [%10x] %w, e: %w", {x10966, x10783, x10784, x10785, x10786, x10964, x10961, x10958, x10955});
          // loc("./zirgen/components/u32.h":27:0)
          auto x10967 = x10865 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x10968 = x10868 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x10969 = x10871 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x10970 = x10874 + x10969;
          // loc("./zirgen/components/u32.h":26:0)
          auto x10971 = x10970 + x10968;
          // loc("./zirgen/components/u32.h":27:0)
          auto x10972 = x10971 + x10967;
          // loc("./zirgen/components/u32.h":27:0)
          auto x10973 = x10776 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x10974 = x10775 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x10975 = x10774 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x10976 = x10773 + x10975;
          // loc("./zirgen/components/u32.h":26:0)
          auto x10977 = x10976 + x10974;
          // loc("./zirgen/components/u32.h":27:0)
          auto x10978 = x10977 + x10973;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":410:0)
          auto x10979 = x10978 - x10972;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":410:0)
          if (x10979 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:410");
          // loc("./zirgen/components/u32.h":27:0)
          auto x10980 = x10955 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x10981 = x10958 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x10982 = x10961 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x10983 = x10964 + x10982;
          // loc("./zirgen/components/u32.h":26:0)
          auto x10984 = x10983 + x10981;
          // loc("./zirgen/components/u32.h":27:0)
          auto x10985 = x10984 + x10980;
          // loc("./zirgen/components/u32.h":27:0)
          auto x10986 = x10786 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x10987 = x10785 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x10988 = x10784 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x10989 = x10783 + x10988;
          // loc("./zirgen/components/u32.h":26:0)
          auto x10990 = x10989 + x10987;
          // loc("./zirgen/components/u32.h":27:0)
          auto x10991 = x10990 + x10986;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":411:0)
          auto x10992 = x10991 - x10985;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":411:0)
          if (x10992 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:411");
        }
        if (x10766 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10993 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10993 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10994 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10994 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10995 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10995 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10996 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10996 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x10997 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10997 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10998 = x10997 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x10999 = x10993 + x10998;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11000 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x11000 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11001 = x11000 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11002 = x10994 + x11001;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11003 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x11003 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11004 = x11003 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11005 = x10995 + x11004;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11006 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x11006 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11007 = x11006 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11008 = x10996 + x11007;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11009 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x11009 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11010 = x11009 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11011 = x10999 + x11010;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11012 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x11012 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11013 = x11012 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11014 = x11002 + x11013;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11015 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x11015 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11016 = x11015 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11017 = x11005 + x11016;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11018 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x11018 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11019 = x11018 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11020 = x11008 + x11019;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11021 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x11021 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11022 = x11021 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11023 = x11011 + x11022;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11024 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x11024 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11025 = x11024 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11026 = x11014 + x11025;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11027 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x11027 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11028 = x11027 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11029 = x11017 + x11028;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11030 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x11030 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11031 = x11030 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11032 = x11020 + x11031;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11033 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x11033 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11034 = x11033 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11035 = x11023 + x11034;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11036 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x11036 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11037 = x11036 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11038 = x11026 + x11037;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11039 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x11039 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11040 = x11039 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11041 = x11029 + x11040;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11042 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x11042 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11043 = x11042 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11044 = x11032 + x11043;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11045 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x11045 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11046 = x11045 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11047 = x11035 + x11046;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11048 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x11048 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11049 = x11048 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11050 = x11038 + x11049;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11051 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x11051 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11052 = x11051 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11053 = x11041 + x11052;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11054 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x11054 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11055 = x11054 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11056 = x11044 + x11055;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11057 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x11057 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11058 = x11057 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11059 = x11047 + x11058;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11060 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x11060 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11061 = x11060 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11062 = x11050 + x11061;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11063 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x11063 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11064 = x11063 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11065 = x11053 + x11064;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11066 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x11066 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11067 = x11066 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11068 = x11056 + x11067;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11069 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x11069 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11070 = x11069 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11071 = x11059 + x11070;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11072 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x11072 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11073 = x11072 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11074 = x11062 + x11073;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11075 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x11075 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11076 = x11075 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11077 = x11065 + x11076;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11078 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x11078 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11079 = x11078 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11080 = x11068 + x11079;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
          auto x11081 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x11081 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":414:0)
          auto x11082 = x11081 + x8924;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11080);
            reg = x11080;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11077);
            reg = x11077;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11074);
            reg = x11074;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11071);
            reg = x11071;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x11082, x11080, x11077, x11074, x11071, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11083 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x11083 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11084 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x11084 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11085 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x11085 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11086 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x11086 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11082);
            reg = x11082;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11083);
            reg = x11083;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11084);
            reg = x11084;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11085);
            reg = x11085;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11086);
            reg = x11086;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11087 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x11087 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11088 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x11088 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11089 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x11089 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11090 = args[2][215 * steps + ((cycle - 0) & mask)];
          assert(x11090 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11091 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x11091 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11092 = x11091 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11093 = x11087 + x11092;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11094 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x11094 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11095 = x11094 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11096 = x11088 + x11095;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11097 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x11097 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11098 = x11097 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11099 = x11089 + x11098;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11100 = args[2][216 * steps + ((cycle - 0) & mask)];
          assert(x11100 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11101 = x11100 * x93;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11102 = x11090 + x11101;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11103 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x11103 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11104 = x11103 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11105 = x11093 + x11104;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11106 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x11106 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11107 = x11106 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11108 = x11096 + x11107;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11109 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x11109 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11110 = x11109 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11111 = x11099 + x11110;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11112 = args[2][217 * steps + ((cycle - 0) & mask)];
          assert(x11112 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11113 = x11112 * x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11114 = x11102 + x11113;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11115 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x11115 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11116 = x11115 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11117 = x11105 + x11116;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11118 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x11118 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11119 = x11118 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11120 = x11108 + x11119;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11121 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x11121 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11122 = x11121 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11123 = x11111 + x11122;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11124 = args[2][218 * steps + ((cycle - 0) & mask)];
          assert(x11124 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11125 = x11124 * x69;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11126 = x11114 + x11125;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11127 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x11127 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11128 = x11127 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11129 = x11117 + x11128;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11130 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x11130 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11131 = x11130 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11132 = x11120 + x11131;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11133 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x11133 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11134 = x11133 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11135 = x11123 + x11134;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11136 = args[2][219 * steps + ((cycle - 0) & mask)];
          assert(x11136 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11137 = x11136 * x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11138 = x11126 + x11137;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11139 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x11139 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11140 = x11139 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11141 = x11129 + x11140;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11142 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x11142 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11143 = x11142 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11144 = x11132 + x11143;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11145 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x11145 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11146 = x11145 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11147 = x11135 + x11146;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11148 = args[2][220 * steps + ((cycle - 0) & mask)];
          assert(x11148 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11149 = x11148 * x59;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11150 = x11138 + x11149;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11151 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x11151 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11152 = x11151 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11153 = x11141 + x11152;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11154 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x11154 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11155 = x11154 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11156 = x11144 + x11155;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11157 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x11157 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11158 = x11157 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11159 = x11147 + x11158;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11160 = args[2][221 * steps + ((cycle - 0) & mask)];
          assert(x11160 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11161 = x11160 * x53;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11162 = x11150 + x11161;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11163 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x11163 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11164 = x11163 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11165 = x11153 + x11164;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11166 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x11166 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11167 = x11166 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11168 = x11156 + x11167;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11169 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x11169 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11170 = x11169 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11171 = x11159 + x11170;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11172 = args[2][222 * steps + ((cycle - 0) & mask)];
          assert(x11172 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11173 = x11172 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:0)
          auto x11174 = x11162 + x11173;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":415:0)
          auto x11175 = x11081 + x77;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":415:0)
          auto x11176 = x11175 + x8924;
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11174);
            reg = x11174;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11171);
            reg = x11171;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11168);
            reg = x11168;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11165);
            reg = x11165;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x11176, x11174, x11171, x11168, x11165, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11177 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x11177 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11178 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x11178 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11179 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x11179 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x11180 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x11180 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11176);
            reg = x11176;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11177);
            reg = x11177;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11178);
            reg = x11178;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11179);
            reg = x11179;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11180);
            reg = x11180;
          }
        }
      }
      if (x8942 != 0) {
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        if (x8932 != 0) {
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11181 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x11181 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11182 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x11182 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11183 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x11183 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11184 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x11184 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11185 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x11185 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11186 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x11186 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11187 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x11187 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11188 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x11188 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11189 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x11189 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11190 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x11190 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11191 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x11191 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11192 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x11192 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11193 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x11193 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11194 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x11194 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11195 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x11195 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11196 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x11196 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11197 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x11197 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11198 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x11198 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11199 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x11199 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11200 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x11200 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11201 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x11201 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11202 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x11202 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11203 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x11203 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11204 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x11204 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11205 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x11205 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11206 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x11206 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11207 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x11207 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11208 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x11208 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11209 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x11209 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11210 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x11210 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11211 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x11211 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11212 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x11212 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11213 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x11213 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11214 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x11214 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11215 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x11215 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11216 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x11216 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11217 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x11217 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11218 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x11218 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11219 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x11219 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11220 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x11220 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11221 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x11221 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11222 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x11222 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11223 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x11223 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11224 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x11224 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11225 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x11225 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11226 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x11226 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11227 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x11227 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11228 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x11228 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11229 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x11229 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11230 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x11230 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11231 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x11231 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11232 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x11232 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11233 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x11233 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11234 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x11234 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11235 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x11235 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11236 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x11236 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11237 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x11237 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11238 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x11238 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11239 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x11239 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11240 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x11240 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11241 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x11241 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11242 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x11242 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11243 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x11243 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11244 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x11244 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11245 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x11245 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11246 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x11246 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11247 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x11247 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11248 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x11248 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11249 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x11249 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11250 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x11250 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11251 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x11251 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11252 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x11252 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11253 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x11253 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11254 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x11254 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11255 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x11255 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11256 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x11256 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11257 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x11257 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11258 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x11258 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11259 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x11259 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11260 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x11260 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11261 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x11261 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11262 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x11262 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11263 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x11263 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11264 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x11264 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11265 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x11265 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11266 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x11266 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11267 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x11267 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11268 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x11268 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11269 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x11269 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11270 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x11270 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11271 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x11271 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11272 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x11272 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11273 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x11273 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11274 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x11274 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11275 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x11275 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11276 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x11276 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11277 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x11277 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11278 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x11278 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11279 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x11279 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11280 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x11280 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11281 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x11281 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11282 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x11282 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11283 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x11283 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11284 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x11284 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11285 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x11285 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11286 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x11286 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11287 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x11287 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11288 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x11288 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11289 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x11289 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11290 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x11290 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11291 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x11291 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11292 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x11292 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11293 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x11293 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11294 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x11294 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11295 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x11295 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11296 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x11296 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11297 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x11297 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11298 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x11298 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11299 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x11299 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11300 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x11300 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11301 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x11301 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11302 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x11302 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11303 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x11303 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11304 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x11304 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11305 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x11305 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11306 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x11306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11307 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x11307 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11308 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x11308 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11309 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x11309 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11310 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x11310 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11311 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x11311 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11312 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x11312 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11313 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x11313 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11314 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x11314 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11315 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x11315 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11316 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x11316 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11317 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x11317 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11318 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x11318 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11319 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x11319 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11320 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x11320 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11321 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x11321 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11322 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x11322 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11323 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x11323 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11324 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x11324 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11325 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x11325 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11326 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x11326 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11327 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x11327 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11328 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x11328 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11329 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x11329 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11330 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x11330 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11331 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x11331 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11332 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x11332 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11333 = args[2][215 * steps + ((cycle - 1) & mask)];
      assert(x11333 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11334 = args[2][216 * steps + ((cycle - 1) & mask)];
      assert(x11334 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11335 = args[2][217 * steps + ((cycle - 1) & mask)];
      assert(x11335 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11336 = args[2][218 * steps + ((cycle - 1) & mask)];
      assert(x11336 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11337 = args[2][219 * steps + ((cycle - 1) & mask)];
      assert(x11337 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11338 = args[2][220 * steps + ((cycle - 1) & mask)];
      assert(x11338 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11339 = args[2][221 * steps + ((cycle - 1) & mask)];
      assert(x11339 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11340 = args[2][222 * steps + ((cycle - 1) & mask)];
      assert(x11340 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11341 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x11341 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11342 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x11342 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11343 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x11343 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11344 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x11344 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11345 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x11345 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11346 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x11346 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11347 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x11347 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11348 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x11348 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11349 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x11349 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11350 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x11350 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11351 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x11351 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11352 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x11352 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11353 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x11353 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11354 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x11354 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11355 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x11355 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11356 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x11356 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11357 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x11357 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11358 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x11358 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11359 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x11359 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11360 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x11360 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11361 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x11361 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11362 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x11362 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11363 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x11363 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11364 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x11364 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11365 = args[2][215 * steps + ((cycle - 2) & mask)];
      assert(x11365 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11366 = args[2][216 * steps + ((cycle - 2) & mask)];
      assert(x11366 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11367 = args[2][217 * steps + ((cycle - 2) & mask)];
      assert(x11367 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11368 = args[2][218 * steps + ((cycle - 2) & mask)];
      assert(x11368 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11369 = args[2][219 * steps + ((cycle - 2) & mask)];
      assert(x11369 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11370 = args[2][220 * steps + ((cycle - 2) & mask)];
      assert(x11370 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11371 = args[2][221 * steps + ((cycle - 2) & mask)];
      assert(x11371 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11372 = args[2][222 * steps + ((cycle - 2) & mask)];
      assert(x11372 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11373 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x11373 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11374 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x11374 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11375 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x11375 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11376 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x11376 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11377 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x11377 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11378 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x11378 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11379 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x11379 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11380 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x11380 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11381 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x11381 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11382 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x11382 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11383 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x11383 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11384 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x11384 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11385 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x11385 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11386 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x11386 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11387 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x11387 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11388 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x11388 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11389 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x11389 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11390 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x11390 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11391 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x11391 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11392 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x11392 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11393 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x11393 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11394 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x11394 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11395 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x11395 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11396 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x11396 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11397 = args[2][215 * steps + ((cycle - 3) & mask)];
      assert(x11397 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11398 = args[2][216 * steps + ((cycle - 3) & mask)];
      assert(x11398 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11399 = args[2][217 * steps + ((cycle - 3) & mask)];
      assert(x11399 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11400 = args[2][218 * steps + ((cycle - 3) & mask)];
      assert(x11400 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11401 = args[2][219 * steps + ((cycle - 3) & mask)];
      assert(x11401 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11402 = args[2][220 * steps + ((cycle - 3) & mask)];
      assert(x11402 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11403 = args[2][221 * steps + ((cycle - 3) & mask)];
      assert(x11403 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11404 = args[2][222 * steps + ((cycle - 3) & mask)];
      assert(x11404 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11405 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x11405 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11406 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x11406 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11407 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x11407 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11408 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x11408 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11409 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x11409 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11410 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x11410 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11411 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x11411 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11412 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x11412 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11413 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x11413 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11414 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x11414 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11415 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x11415 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11416 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x11416 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11417 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x11417 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11418 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x11418 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11419 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x11419 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11420 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x11420 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11421 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x11421 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11422 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x11422 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11423 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x11423 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11424 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x11424 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11425 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x11425 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11426 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x11426 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11427 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x11427 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11428 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x11428 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11429 = args[2][215 * steps + ((cycle - 4) & mask)];
      assert(x11429 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11430 = args[2][216 * steps + ((cycle - 4) & mask)];
      assert(x11430 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11431 = args[2][217 * steps + ((cycle - 4) & mask)];
      assert(x11431 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11432 = args[2][218 * steps + ((cycle - 4) & mask)];
      assert(x11432 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11433 = args[2][219 * steps + ((cycle - 4) & mask)];
      assert(x11433 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11434 = args[2][220 * steps + ((cycle - 4) & mask)];
      assert(x11434 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11435 = args[2][221 * steps + ((cycle - 4) & mask)];
      assert(x11435 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11436 = args[2][222 * steps + ((cycle - 4) & mask)];
      assert(x11436 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11437 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x11437 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11438 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x11438 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11439 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x11439 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11440 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x11440 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11441 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x11441 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11442 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x11442 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11443 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x11443 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11444 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x11444 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11445 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x11445 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11446 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x11446 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11447 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11447 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11448 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11448 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11449 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x11449 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11450 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x11450 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11451 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x11451 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11452 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x11452 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11453 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x11453 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11454 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11454 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11455 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11455 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11456 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11456 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11457 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11457 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11458 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11458 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11459 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11459 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11460 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11460 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11461 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11461 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11462 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11462 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11463 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11463 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11464 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11464 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11465 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11465 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11466 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11466 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11467 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11467 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11468 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11468 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11469 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x11469 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11470 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x11470 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11471 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x11471 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x11472 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x11472 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:0)
      auto x11473 = x11470 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:0)
      auto x11474 = x11469 + x11473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:0)
      auto x11475 = x11472 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:0)
      auto x11476 = x11471 + x11475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11477 = x11194 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11478 = x11477 * x11203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11479 = x11194 + x11203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11480 = x11479 - x11478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11481 = x11195 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11482 = x11481 * x11204;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11483 = x11195 + x11204;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11484 = x11483 - x11482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11485 = x11196 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11486 = x11485 * x11205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11487 = x11196 + x11205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11488 = x11487 - x11486;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11489 = x11197 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11490 = x11489 * x11206;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11491 = x11197 + x11206;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11492 = x11491 - x11490;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11493 = x11198 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11494 = x11493 * x11207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11495 = x11198 + x11207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11496 = x11495 - x11494;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11497 = x11199 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11498 = x11497 * x11208;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11499 = x11199 + x11208;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11500 = x11499 - x11498;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11501 = x11200 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11502 = x11501 * x11209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11503 = x11200 + x11209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11504 = x11503 - x11502;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11505 = x11201 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11506 = x11505 * x11210;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11507 = x11201 + x11210;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11508 = x11507 - x11506;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11509 = x11202 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11510 = x11509 * x11211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11511 = x11202 + x11211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11512 = x11511 - x11510;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11513 = x11203 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11514 = x11513 * x11212;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11515 = x11203 + x11212;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11516 = x11515 - x11514;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11517 = x11204 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11518 = x11517 * x11181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11519 = x11204 + x11181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11520 = x11519 - x11518;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11521 = x11205 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11522 = x11521 * x11182;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11523 = x11205 + x11182;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11524 = x11523 - x11522;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11525 = x11206 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11526 = x11525 * x11183;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11527 = x11206 + x11183;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11528 = x11527 - x11526;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11529 = x11207 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11530 = x11529 * x11184;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11531 = x11207 + x11184;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11532 = x11531 - x11530;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11533 = x11208 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11534 = x11533 * x11185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11535 = x11208 + x11185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11536 = x11535 - x11534;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11537 = x11209 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11538 = x11537 * x11186;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11539 = x11209 + x11186;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11540 = x11539 - x11538;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11541 = x11210 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11542 = x11541 * x11187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11543 = x11210 + x11187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11544 = x11543 - x11542;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11545 = x11211 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11546 = x11545 * x11188;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11547 = x11211 + x11188;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11548 = x11547 - x11546;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11549 = x11212 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11550 = x11549 * x11189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11551 = x11212 + x11189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11552 = x11551 - x11550;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11553 = x11181 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11554 = x11553 * x11190;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11555 = x11181 + x11190;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11556 = x11555 - x11554;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11557 = x11182 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11558 = x11557 * x11191;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11559 = x11182 + x11191;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11560 = x11559 - x11558;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11561 = x11183 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11562 = x11561 * x11192;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11563 = x11183 + x11192;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11564 = x11563 - x11562;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11565 = x11184 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11566 = x11565 * x11193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11567 = x11184 + x11193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11568 = x11567 - x11566;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11569 = x11185 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11570 = x11569 * x11194;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11571 = x11185 + x11194;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11572 = x11571 - x11570;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11573 = x11186 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11574 = x11573 * x11195;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11575 = x11186 + x11195;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11576 = x11575 - x11574;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11577 = x11187 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11578 = x11577 * x11196;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11579 = x11187 + x11196;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11580 = x11579 - x11578;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11581 = x11188 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11582 = x11581 * x11197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11583 = x11188 + x11197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11584 = x11583 - x11582;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11585 = x11189 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11586 = x11585 * x11198;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11587 = x11189 + x11198;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11588 = x11587 - x11586;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11589 = x11190 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11590 = x11589 * x11199;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11591 = x11190 + x11199;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11592 = x11591 - x11590;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11593 = x11191 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11594 = x11593 * x11200;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11595 = x11191 + x11200;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11596 = x11595 - x11594;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11597 = x11192 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11598 = x11597 * x11201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11599 = x11192 + x11201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11600 = x11599 - x11598;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11601 = x11193 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11602 = x11601 * x11202;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11603 = x11193 + x11202;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11604 = x11603 - x11602;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11605 = x11561 * x11480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11606 = x11183 + x11480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11607 = x11606 - x11605;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11608 = x11565 * x11484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11609 = x11184 + x11484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11610 = x11609 - x11608;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11611 = x11569 * x11488;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11612 = x11185 + x11488;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11613 = x11612 - x11611;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11614 = x11573 * x11492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11615 = x11186 + x11492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11616 = x11615 - x11614;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11617 = x11577 * x11496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11618 = x11187 + x11496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11619 = x11618 - x11617;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11620 = x11581 * x11500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11621 = x11188 + x11500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11622 = x11621 - x11620;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11623 = x11585 * x11504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11624 = x11189 + x11504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11625 = x11624 - x11623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11626 = x11589 * x11508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11627 = x11190 + x11508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11628 = x11627 - x11626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11629 = x11593 * x11512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11630 = x11191 + x11512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11631 = x11630 - x11629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11632 = x11597 * x11516;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11633 = x11192 + x11516;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11634 = x11633 - x11632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11635 = x11601 * x11520;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11636 = x11193 + x11520;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11637 = x11636 - x11635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11638 = x11477 * x11524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11639 = x11194 + x11524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11640 = x11639 - x11638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11641 = x11481 * x11528;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11642 = x11195 + x11528;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11643 = x11642 - x11641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11644 = x11485 * x11532;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11645 = x11196 + x11532;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11646 = x11645 - x11644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11647 = x11489 * x11536;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11648 = x11197 + x11536;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11649 = x11648 - x11647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11650 = x11493 * x11540;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11651 = x11198 + x11540;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11652 = x11651 - x11650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11653 = x11497 * x11544;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11654 = x11199 + x11544;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11655 = x11654 - x11653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11656 = x11501 * x11548;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11657 = x11200 + x11548;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11658 = x11657 - x11656;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11659 = x11505 * x11552;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11660 = x11201 + x11552;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11661 = x11660 - x11659;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11662 = x11509 * x11556;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11663 = x11202 + x11556;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11664 = x11663 - x11662;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11665 = x11513 * x11560;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11666 = x11203 + x11560;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11667 = x11666 - x11665;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11668 = x11517 * x11564;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11669 = x11204 + x11564;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11670 = x11669 - x11668;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11671 = x11521 * x11568;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11672 = x11205 + x11568;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11673 = x11672 - x11671;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11674 = x11525 * x11572;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11675 = x11206 + x11572;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11676 = x11675 - x11674;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11677 = x11529 * x11576;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11678 = x11207 + x11576;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11679 = x11678 - x11677;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11680 = x11533 * x11580;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11681 = x11208 + x11580;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11682 = x11681 - x11680;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11683 = x11537 * x11584;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11684 = x11209 + x11584;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11685 = x11684 - x11683;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11686 = x11541 * x11588;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11687 = x11210 + x11588;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11688 = x11687 - x11686;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11689 = x11545 * x11592;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11690 = x11211 + x11592;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11691 = x11690 - x11689;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11692 = x11549 * x11596;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11693 = x11212 + x11596;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11694 = x11693 - x11692;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11695 = x11553 * x11600;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11696 = x11181 + x11600;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11697 = x11696 - x11695;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11698 = x11557 * x11604;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11699 = x11182 + x11604;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11700 = x11699 - x11698;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11701 = x11320 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11702 = x11701 * x11334;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11703 = x11320 + x11334;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11704 = x11703 - x11702;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11705 = x11321 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11706 = x11705 * x11335;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11707 = x11321 + x11335;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11708 = x11707 - x11706;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11709 = x11322 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11710 = x11709 * x11336;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11711 = x11322 + x11336;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11712 = x11711 - x11710;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11713 = x11323 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11714 = x11713 * x11337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11715 = x11323 + x11337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11716 = x11715 - x11714;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11717 = x11324 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11718 = x11717 * x11338;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11719 = x11324 + x11338;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11720 = x11719 - x11718;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11721 = x11325 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11722 = x11721 * x11339;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11723 = x11325 + x11339;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11724 = x11723 - x11722;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11725 = x11326 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11726 = x11725 * x11340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11727 = x11326 + x11340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11728 = x11727 - x11726;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11729 = x11327 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11730 = x11729 * x11309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11731 = x11327 + x11309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11732 = x11731 - x11730;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11733 = x11328 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11734 = x11733 * x11310;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11735 = x11328 + x11310;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11736 = x11735 - x11734;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11737 = x11329 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11738 = x11737 * x11311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11739 = x11329 + x11311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11740 = x11739 - x11738;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11741 = x11330 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11742 = x11741 * x11312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11743 = x11330 + x11312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11744 = x11743 - x11742;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11745 = x11331 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11746 = x11745 * x11313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11747 = x11331 + x11313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11748 = x11747 - x11746;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11749 = x11332 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11750 = x11749 * x11314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11751 = x11332 + x11314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11752 = x11751 - x11750;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11753 = x11333 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11754 = x11753 * x11315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11755 = x11333 + x11315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11756 = x11755 - x11754;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11757 = x11334 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11758 = x11757 * x11316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11759 = x11334 + x11316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11760 = x11759 - x11758;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11761 = x11335 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11762 = x11761 * x11317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11763 = x11335 + x11317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11764 = x11763 - x11762;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11765 = x11336 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11766 = x11765 * x11318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11767 = x11336 + x11318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11768 = x11767 - x11766;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11769 = x11337 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11770 = x11769 * x11319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11771 = x11337 + x11319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11772 = x11771 - x11770;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11773 = x11338 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11774 = x11773 * x11320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11775 = x11338 + x11320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11776 = x11775 - x11774;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11777 = x11339 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11778 = x11777 * x11321;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11779 = x11339 + x11321;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11780 = x11779 - x11778;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11781 = x11340 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11782 = x11781 * x11322;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11783 = x11340 + x11322;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11784 = x11783 - x11782;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11785 = x11309 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11786 = x11785 * x11323;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11787 = x11309 + x11323;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11788 = x11787 - x11786;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11789 = x11310 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11790 = x11789 * x11324;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11791 = x11310 + x11324;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11792 = x11791 - x11790;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11793 = x11311 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11794 = x11793 * x11325;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11795 = x11311 + x11325;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11796 = x11795 - x11794;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11797 = x11312 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11798 = x11797 * x11326;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11799 = x11312 + x11326;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11800 = x11799 - x11798;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11801 = x11313 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11802 = x11801 * x11327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11803 = x11313 + x11327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11804 = x11803 - x11802;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11805 = x11314 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11806 = x11805 * x11328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11807 = x11314 + x11328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11808 = x11807 - x11806;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11809 = x11315 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11810 = x11809 * x11329;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11811 = x11315 + x11329;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11812 = x11811 - x11810;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11813 = x11316 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11814 = x11813 * x11330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11815 = x11316 + x11330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11816 = x11815 - x11814;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11817 = x11317 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11818 = x11817 * x11331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11819 = x11317 + x11331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11820 = x11819 - x11818;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11821 = x11318 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11822 = x11821 * x11332;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11823 = x11318 + x11332;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11824 = x11823 - x11822;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11825 = x11319 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11826 = x11825 * x11333;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11827 = x11319 + x11333;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11828 = x11827 - x11826;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11829 = x11809 * x11704;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11830 = x11315 + x11704;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11831 = x11830 - x11829;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11832 = x11813 * x11708;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11833 = x11316 + x11708;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11834 = x11833 - x11832;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11835 = x11817 * x11712;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11836 = x11317 + x11712;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11837 = x11836 - x11835;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11838 = x11821 * x11716;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11839 = x11318 + x11716;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11840 = x11839 - x11838;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11841 = x11825 * x11720;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11842 = x11319 + x11720;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11843 = x11842 - x11841;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11844 = x11701 * x11724;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11845 = x11320 + x11724;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11846 = x11845 - x11844;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11847 = x11705 * x11728;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11848 = x11321 + x11728;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11849 = x11848 - x11847;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11850 = x11709 * x11732;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11851 = x11322 + x11732;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11852 = x11851 - x11850;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11853 = x11713 * x11736;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11854 = x11323 + x11736;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11855 = x11854 - x11853;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11856 = x11717 * x11740;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11857 = x11324 + x11740;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11858 = x11857 - x11856;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11859 = x11721 * x11744;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11860 = x11325 + x11744;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11861 = x11860 - x11859;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11862 = x11725 * x11748;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11863 = x11326 + x11748;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11864 = x11863 - x11862;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11865 = x11729 * x11752;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11866 = x11327 + x11752;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11867 = x11866 - x11865;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11868 = x11733 * x11756;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11869 = x11328 + x11756;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11870 = x11869 - x11868;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11871 = x11737 * x11760;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11872 = x11329 + x11760;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11873 = x11872 - x11871;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11874 = x11741 * x11764;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11875 = x11330 + x11764;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11876 = x11875 - x11874;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11877 = x11745 * x11768;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11878 = x11331 + x11768;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11879 = x11878 - x11877;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11880 = x11749 * x11772;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11881 = x11332 + x11772;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11882 = x11881 - x11880;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11883 = x11753 * x11776;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11884 = x11333 + x11776;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11885 = x11884 - x11883;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11886 = x11757 * x11780;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11887 = x11334 + x11780;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11888 = x11887 - x11886;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11889 = x11761 * x11784;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11890 = x11335 + x11784;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11891 = x11890 - x11889;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11892 = x11765 * x11788;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11893 = x11336 + x11788;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11894 = x11893 - x11892;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11895 = x11769 * x11792;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11896 = x11337 + x11792;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11897 = x11896 - x11895;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11898 = x11773 * x11796;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11899 = x11338 + x11796;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11900 = x11899 - x11898;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11901 = x11777 * x11800;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11902 = x11339 + x11800;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11903 = x11902 - x11901;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11904 = x11781 * x11804;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11905 = x11340 + x11804;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11906 = x11905 - x11904;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11907 = x11785 * x11808;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11908 = x11309 + x11808;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11909 = x11908 - x11907;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11910 = x11789 * x11812;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11911 = x11310 + x11812;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11912 = x11911 - x11910;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11913 = x11793 * x11816;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11914 = x11311 + x11816;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11915 = x11914 - x11913;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11916 = x11797 * x11820;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11917 = x11312 + x11820;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11918 = x11917 - x11916;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11919 = x11801 * x11824;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11920 = x11313 + x11824;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11921 = x11920 - x11919;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11922 = x11805 * x11828;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11923 = x11314 + x11828;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:0)
      auto x11924 = x11923 - x11922;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11925 = x11834 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11926 = x11831 + x11925;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11927 = x11837 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11928 = x11926 + x11927;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11929 = x11840 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11930 = x11928 + x11929;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11931 = x11843 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11932 = x11930 + x11931;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11933 = x11846 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11934 = x11932 + x11933;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11935 = x11849 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11936 = x11934 + x11935;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11937 = x11852 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11938 = x11936 + x11937;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11939 = x11855 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11940 = x11938 + x11939;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11941 = x11858 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11942 = x11940 + x11941;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11943 = x11861 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11944 = x11942 + x11943;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11945 = x11864 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11946 = x11944 + x11945;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11947 = x11867 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11948 = x11946 + x11947;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11949 = x11870 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11950 = x11948 + x11949;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11951 = x11873 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11952 = x11950 + x11951;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11953 = x11876 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11954 = x11952 + x11953;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11955 = x11882 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11956 = x11879 + x11955;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11957 = x11885 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11958 = x11956 + x11957;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11959 = x11888 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11960 = x11958 + x11959;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11961 = x11891 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11962 = x11960 + x11961;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11963 = x11894 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11964 = x11962 + x11963;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11965 = x11897 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11966 = x11964 + x11965;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11967 = x11900 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11968 = x11966 + x11967;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11969 = x11903 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11970 = x11968 + x11969;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11971 = x11906 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11972 = x11970 + x11971;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11973 = x11909 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11974 = x11972 + x11973;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11975 = x11912 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11976 = x11974 + x11975;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11977 = x11915 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11978 = x11976 + x11977;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11979 = x11918 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11980 = x11978 + x11979;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11981 = x11921 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11982 = x11980 + x11981;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11983 = x11924 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x11984 = x11982 + x11983;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11985 = x96 - x11309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11986 = x11985 * x11373;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11987 = x11309 * x11341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11988 = x11987 + x11986;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11989 = x96 - x11310;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11990 = x11989 * x11374;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11991 = x11310 * x11342;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11992 = x11991 + x11990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11993 = x96 - x11311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11994 = x11993 * x11375;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11995 = x11311 * x11343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11996 = x11995 + x11994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11997 = x96 - x11312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11998 = x11997 * x11376;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x11999 = x11312 * x11344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12000 = x11999 + x11998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12001 = x96 - x11313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12002 = x12001 * x11377;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12003 = x11313 * x11345;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12004 = x12003 + x12002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12005 = x96 - x11314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12006 = x12005 * x11378;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12007 = x11314 * x11346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12008 = x12007 + x12006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12009 = x96 - x11315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12010 = x12009 * x11379;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12011 = x11315 * x11347;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12012 = x12011 + x12010;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12013 = x96 - x11316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12014 = x12013 * x11380;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12015 = x11316 * x11348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12016 = x12015 + x12014;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12017 = x96 - x11317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12018 = x12017 * x11381;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12019 = x11317 * x11349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12020 = x12019 + x12018;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12021 = x96 - x11318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12022 = x12021 * x11382;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12023 = x11318 * x11350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12024 = x12023 + x12022;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12025 = x96 - x11319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12026 = x12025 * x11383;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12027 = x11319 * x11351;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12028 = x12027 + x12026;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12029 = x96 - x11320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12030 = x12029 * x11384;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12031 = x11320 * x11352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12032 = x12031 + x12030;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12033 = x96 - x11321;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12034 = x12033 * x11385;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12035 = x11321 * x11353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12036 = x12035 + x12034;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12037 = x96 - x11322;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12038 = x12037 * x11386;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12039 = x11322 * x11354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12040 = x12039 + x12038;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12041 = x96 - x11323;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12042 = x12041 * x11387;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12043 = x11323 * x11355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12044 = x12043 + x12042;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12045 = x96 - x11324;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12046 = x12045 * x11388;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12047 = x11324 * x11356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12048 = x12047 + x12046;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12049 = x96 - x11325;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12050 = x12049 * x11389;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12051 = x11325 * x11357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12052 = x12051 + x12050;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12053 = x96 - x11326;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12054 = x12053 * x11390;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12055 = x11326 * x11358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12056 = x12055 + x12054;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12057 = x96 - x11327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12058 = x12057 * x11391;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12059 = x11327 * x11359;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12060 = x12059 + x12058;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12061 = x96 - x11328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12062 = x12061 * x11392;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12063 = x11328 * x11360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12064 = x12063 + x12062;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12065 = x96 - x11329;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12066 = x12065 * x11393;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12067 = x11329 * x11361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12068 = x12067 + x12066;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12069 = x96 - x11330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12070 = x12069 * x11394;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12071 = x11330 * x11362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12072 = x12071 + x12070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12073 = x96 - x11331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12074 = x12073 * x11395;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12075 = x11331 * x11363;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12076 = x12075 + x12074;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12077 = x96 - x11332;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12078 = x12077 * x11396;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12079 = x11332 * x11364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12080 = x12079 + x12078;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12081 = x96 - x11333;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12082 = x12081 * x11397;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12083 = x11333 * x11365;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12084 = x12083 + x12082;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12085 = x96 - x11334;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12086 = x12085 * x11398;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12087 = x11334 * x11366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12088 = x12087 + x12086;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12089 = x96 - x11335;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12090 = x12089 * x11399;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12091 = x11335 * x11367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12092 = x12091 + x12090;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12093 = x96 - x11336;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12094 = x12093 * x11400;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12095 = x11336 * x11368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12096 = x12095 + x12094;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12097 = x96 - x11337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12098 = x12097 * x11401;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12099 = x11337 * x11369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12100 = x12099 + x12098;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12101 = x96 - x11338;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12102 = x12101 * x11402;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12103 = x11338 * x11370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12104 = x12103 + x12102;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12105 = x96 - x11339;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12106 = x12105 * x11403;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12107 = x11339 * x11371;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12108 = x12107 + x12106;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12109 = x96 - x11340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12110 = x12109 * x11404;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12111 = x11340 * x11372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:0)
      auto x12112 = x12111 + x12110;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12113 = x11992 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12114 = x11988 + x12113;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12115 = x11996 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12116 = x12114 + x12115;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12117 = x12000 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12118 = x12116 + x12117;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12119 = x12004 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12120 = x12118 + x12119;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12121 = x12008 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12122 = x12120 + x12121;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12123 = x12012 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12124 = x12122 + x12123;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12125 = x12016 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12126 = x12124 + x12125;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12127 = x12020 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12128 = x12126 + x12127;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12129 = x12024 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12130 = x12128 + x12129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12131 = x12028 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12132 = x12130 + x12131;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12133 = x12032 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12134 = x12132 + x12133;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12135 = x12036 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12136 = x12134 + x12135;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12137 = x12040 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12138 = x12136 + x12137;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12139 = x12044 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12140 = x12138 + x12139;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12141 = x12048 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12142 = x12140 + x12141;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12143 = x12056 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12144 = x12052 + x12143;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12145 = x12060 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12146 = x12144 + x12145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12147 = x12064 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12148 = x12146 + x12147;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12149 = x12068 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12150 = x12148 + x12149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12151 = x12072 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12152 = x12150 + x12151;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12153 = x12076 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12154 = x12152 + x12153;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12155 = x12080 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12156 = x12154 + x12155;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12157 = x12084 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12158 = x12156 + x12157;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12159 = x12088 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12160 = x12158 + x12159;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12161 = x12092 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12162 = x12160 + x12161;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12163 = x12096 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12164 = x12162 + x12163;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12165 = x12100 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12166 = x12164 + x12165;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12167 = x12104 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12168 = x12166 + x12167;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12169 = x12108 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12170 = x12168 + x12169;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12171 = x12112 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12172 = x12170 + x12171;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12173 = x12142 + x11954;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12174 = x12172 + x11984;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12175 = x11406 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12176 = x11405 + x12175;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12177 = x11407 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12178 = x12176 + x12177;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12179 = x11408 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12180 = x12178 + x12179;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12181 = x11409 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12182 = x12180 + x12181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12183 = x11410 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12184 = x12182 + x12183;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12185 = x11411 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12186 = x12184 + x12185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12187 = x11412 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12188 = x12186 + x12187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12189 = x11413 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12190 = x12188 + x12189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12191 = x11414 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12192 = x12190 + x12191;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12193 = x11415 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12194 = x12192 + x12193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12195 = x11416 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12196 = x12194 + x12195;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12197 = x11417 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12198 = x12196 + x12197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12199 = x11418 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12200 = x12198 + x12199;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12201 = x11419 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12202 = x12200 + x12201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12203 = x11420 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12204 = x12202 + x12203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12205 = x11422 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12206 = x11421 + x12205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12207 = x11423 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12208 = x12206 + x12207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12209 = x11424 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12210 = x12208 + x12209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12211 = x11425 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12212 = x12210 + x12211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12213 = x11426 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12214 = x12212 + x12213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12215 = x11427 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12216 = x12214 + x12215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12217 = x11428 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12218 = x12216 + x12217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12219 = x11429 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12220 = x12218 + x12219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12221 = x11430 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12222 = x12220 + x12221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12223 = x11431 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12224 = x12222 + x12223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12225 = x11432 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12226 = x12224 + x12225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12227 = x11433 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12228 = x12226 + x12227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12229 = x11434 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12230 = x12228 + x12229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12231 = x11435 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12232 = x12230 + x12231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12233 = x11436 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12234 = x12232 + x12233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12235 = x12204 + x12173;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12236 = x12234 + x12174;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12237 = x11474 + x12235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12238 = x11476 + x12236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12239 = x11438 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12240 = x11437 + x12239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12241 = x11439 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12242 = x12240 + x12241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12243 = x11440 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12244 = x12242 + x12243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12245 = x11441 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12246 = x12244 + x12245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12247 = x11442 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12248 = x12246 + x12247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12249 = x11443 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12250 = x12248 + x12249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12251 = x11444 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12252 = x12250 + x12251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12253 = x11445 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12254 = x12252 + x12253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12255 = x11446 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12256 = x12254 + x12255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12257 = x11447 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12258 = x12256 + x12257;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12259 = x11448 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12260 = x12258 + x12259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12261 = x11449 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12262 = x12260 + x12261;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12263 = x11450 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12264 = x12262 + x12263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12265 = x11451 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12266 = x12264 + x12265;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12267 = x11452 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12268 = x12266 + x12267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12269 = x11454 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12270 = x11453 + x12269;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12271 = x11455 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12272 = x12270 + x12271;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12273 = x11456 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12274 = x12272 + x12273;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12275 = x11457 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12276 = x12274 + x12275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12277 = x11458 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12278 = x12276 + x12277;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12279 = x11459 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12280 = x12278 + x12279;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12281 = x11460 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12282 = x12280 + x12281;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12283 = x11461 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12284 = x12282 + x12283;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12285 = x11462 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12286 = x12284 + x12285;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12287 = x11463 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12288 = x12286 + x12287;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12289 = x11464 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12290 = x12288 + x12289;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12291 = x11465 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12292 = x12290 + x12291;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12293 = x11466 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12294 = x12292 + x12293;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12295 = x11467 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12296 = x12294 + x12295;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12297 = x11468 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12298 = x12296 + x12297;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12299 = x12268 + x12237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12300 = x12298 + x12238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12301 = x11610 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12302 = x11607 + x12301;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12303 = x11613 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12304 = x12302 + x12303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12305 = x11616 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12306 = x12304 + x12305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12307 = x11619 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12308 = x12306 + x12307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12309 = x11622 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12310 = x12308 + x12309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12311 = x11625 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12312 = x12310 + x12311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12313 = x11628 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12314 = x12312 + x12313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12315 = x11631 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12316 = x12314 + x12315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12317 = x11634 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12318 = x12316 + x12317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12319 = x11637 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12320 = x12318 + x12319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12321 = x11640 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12322 = x12320 + x12321;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12323 = x11643 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12324 = x12322 + x12323;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12325 = x11646 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12326 = x12324 + x12325;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12327 = x11649 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12328 = x12326 + x12327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12329 = x11652 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12330 = x12328 + x12329;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12331 = x11658 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12332 = x11655 + x12331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12333 = x11661 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12334 = x12332 + x12333;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12335 = x11664 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12336 = x12334 + x12335;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12337 = x11667 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12338 = x12336 + x12337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12339 = x11670 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12340 = x12338 + x12339;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12341 = x11673 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12342 = x12340 + x12341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12343 = x11676 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12344 = x12342 + x12343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12345 = x11679 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12346 = x12344 + x12345;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12347 = x11682 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12348 = x12346 + x12347;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12349 = x11685 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12350 = x12348 + x12349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12351 = x11688 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12352 = x12350 + x12351;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12353 = x11691 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12354 = x12352 + x12353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12355 = x11694 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12356 = x12354 + x12355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12357 = x11697 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12358 = x12356 + x12357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12359 = x11700 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12360 = x12358 + x12359;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12361 = x11181 * x11213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12362 = x12361 * x11245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12363 = x96 - x11181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12364 = x12363 * x11213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12365 = x12364 * x11245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12366 = x96 - x11213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12367 = x11181 * x12366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12368 = x12367 * x11245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12369 = x96 - x11245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12370 = x12361 * x12369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12371 = x12370 + x12368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12372 = x12371 + x12365;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12373 = x12372 + x12362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12374 = x11182 * x11214;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12375 = x12374 * x11246;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12376 = x96 - x11182;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12377 = x12376 * x11214;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12378 = x12377 * x11246;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12379 = x96 - x11214;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12380 = x11182 * x12379;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12381 = x12380 * x11246;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12382 = x96 - x11246;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12383 = x12374 * x12382;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12384 = x12383 + x12381;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12385 = x12384 + x12378;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12386 = x12385 + x12375;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12387 = x11183 * x11215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12388 = x12387 * x11247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12389 = x96 - x11183;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12390 = x12389 * x11215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12391 = x12390 * x11247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12392 = x96 - x11215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12393 = x11183 * x12392;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12394 = x12393 * x11247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12395 = x96 - x11247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12396 = x12387 * x12395;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12397 = x12396 + x12394;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12398 = x12397 + x12391;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12399 = x12398 + x12388;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12400 = x11184 * x11216;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12401 = x12400 * x11248;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12402 = x96 - x11184;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12403 = x12402 * x11216;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12404 = x12403 * x11248;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12405 = x96 - x11216;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12406 = x11184 * x12405;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12407 = x12406 * x11248;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12408 = x96 - x11248;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12409 = x12400 * x12408;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12410 = x12409 + x12407;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12411 = x12410 + x12404;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12412 = x12411 + x12401;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12413 = x11185 * x11217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12414 = x12413 * x11249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12415 = x96 - x11185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12416 = x12415 * x11217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12417 = x12416 * x11249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12418 = x96 - x11217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12419 = x11185 * x12418;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12420 = x12419 * x11249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12421 = x96 - x11249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12422 = x12413 * x12421;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12423 = x12422 + x12420;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12424 = x12423 + x12417;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12425 = x12424 + x12414;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12426 = x11186 * x11218;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12427 = x12426 * x11250;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12428 = x96 - x11186;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12429 = x12428 * x11218;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12430 = x12429 * x11250;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12431 = x96 - x11218;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12432 = x11186 * x12431;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12433 = x12432 * x11250;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12434 = x96 - x11250;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12435 = x12426 * x12434;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12436 = x12435 + x12433;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12437 = x12436 + x12430;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12438 = x12437 + x12427;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12439 = x11187 * x11219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12440 = x12439 * x11251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12441 = x96 - x11187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12442 = x12441 * x11219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12443 = x12442 * x11251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12444 = x96 - x11219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12445 = x11187 * x12444;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12446 = x12445 * x11251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12447 = x96 - x11251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12448 = x12439 * x12447;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12449 = x12448 + x12446;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12450 = x12449 + x12443;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12451 = x12450 + x12440;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12452 = x11188 * x11220;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12453 = x12452 * x11252;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12454 = x96 - x11188;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12455 = x12454 * x11220;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12456 = x12455 * x11252;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12457 = x96 - x11220;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12458 = x11188 * x12457;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12459 = x12458 * x11252;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12460 = x96 - x11252;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12461 = x12452 * x12460;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12462 = x12461 + x12459;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12463 = x12462 + x12456;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12464 = x12463 + x12453;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12465 = x11189 * x11221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12466 = x12465 * x11253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12467 = x96 - x11189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12468 = x12467 * x11221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12469 = x12468 * x11253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12470 = x96 - x11221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12471 = x11189 * x12470;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12472 = x12471 * x11253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12473 = x96 - x11253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12474 = x12465 * x12473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12475 = x12474 + x12472;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12476 = x12475 + x12469;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12477 = x12476 + x12466;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12478 = x11190 * x11222;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12479 = x12478 * x11254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12480 = x96 - x11190;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12481 = x12480 * x11222;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12482 = x12481 * x11254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12483 = x96 - x11222;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12484 = x11190 * x12483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12485 = x12484 * x11254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12486 = x96 - x11254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12487 = x12478 * x12486;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12488 = x12487 + x12485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12489 = x12488 + x12482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12490 = x12489 + x12479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12491 = x11191 * x11223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12492 = x12491 * x11255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12493 = x96 - x11191;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12494 = x12493 * x11223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12495 = x12494 * x11255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12496 = x96 - x11223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12497 = x11191 * x12496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12498 = x12497 * x11255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12499 = x96 - x11255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12500 = x12491 * x12499;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12501 = x12500 + x12498;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12502 = x12501 + x12495;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12503 = x12502 + x12492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12504 = x11192 * x11224;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12505 = x12504 * x11256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12506 = x96 - x11192;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12507 = x12506 * x11224;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12508 = x12507 * x11256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12509 = x96 - x11224;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12510 = x11192 * x12509;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12511 = x12510 * x11256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12512 = x96 - x11256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12513 = x12504 * x12512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12514 = x12513 + x12511;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12515 = x12514 + x12508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12516 = x12515 + x12505;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12517 = x11193 * x11225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12518 = x12517 * x11257;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12519 = x96 - x11193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12520 = x12519 * x11225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12521 = x12520 * x11257;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12522 = x96 - x11225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12523 = x11193 * x12522;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12524 = x12523 * x11257;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12525 = x96 - x11257;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12526 = x12517 * x12525;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12527 = x12526 + x12524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12528 = x12527 + x12521;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12529 = x12528 + x12518;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12530 = x11194 * x11226;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12531 = x12530 * x11258;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12532 = x96 - x11194;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12533 = x12532 * x11226;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12534 = x12533 * x11258;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12535 = x96 - x11226;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12536 = x11194 * x12535;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12537 = x12536 * x11258;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12538 = x96 - x11258;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12539 = x12530 * x12538;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12540 = x12539 + x12537;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12541 = x12540 + x12534;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12542 = x12541 + x12531;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12543 = x11195 * x11227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12544 = x12543 * x11259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12545 = x96 - x11195;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12546 = x12545 * x11227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12547 = x12546 * x11259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12548 = x96 - x11227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12549 = x11195 * x12548;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12550 = x12549 * x11259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12551 = x96 - x11259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12552 = x12543 * x12551;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12553 = x12552 + x12550;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12554 = x12553 + x12547;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12555 = x12554 + x12544;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12556 = x11196 * x11228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12557 = x12556 * x11260;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12558 = x96 - x11196;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12559 = x12558 * x11228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12560 = x12559 * x11260;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12561 = x96 - x11228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12562 = x11196 * x12561;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12563 = x12562 * x11260;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12564 = x96 - x11260;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12565 = x12556 * x12564;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12566 = x12565 + x12563;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12567 = x12566 + x12560;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12568 = x12567 + x12557;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12569 = x11197 * x11229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12570 = x12569 * x11261;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12571 = x96 - x11197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12572 = x12571 * x11229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12573 = x12572 * x11261;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12574 = x96 - x11229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12575 = x11197 * x12574;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12576 = x12575 * x11261;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12577 = x96 - x11261;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12578 = x12569 * x12577;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12579 = x12578 + x12576;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12580 = x12579 + x12573;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12581 = x12580 + x12570;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12582 = x11198 * x11230;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12583 = x12582 * x11262;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12584 = x96 - x11198;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12585 = x12584 * x11230;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12586 = x12585 * x11262;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12587 = x96 - x11230;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12588 = x11198 * x12587;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12589 = x12588 * x11262;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12590 = x96 - x11262;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12591 = x12582 * x12590;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12592 = x12591 + x12589;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12593 = x12592 + x12586;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12594 = x12593 + x12583;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12595 = x11199 * x11231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12596 = x12595 * x11263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12597 = x96 - x11199;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12598 = x12597 * x11231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12599 = x12598 * x11263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12600 = x96 - x11231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12601 = x11199 * x12600;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12602 = x12601 * x11263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12603 = x96 - x11263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12604 = x12595 * x12603;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12605 = x12604 + x12602;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12606 = x12605 + x12599;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12607 = x12606 + x12596;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12608 = x11200 * x11232;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12609 = x12608 * x11264;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12610 = x96 - x11200;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12611 = x12610 * x11232;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12612 = x12611 * x11264;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12613 = x96 - x11232;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12614 = x11200 * x12613;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12615 = x12614 * x11264;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12616 = x96 - x11264;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12617 = x12608 * x12616;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12618 = x12617 + x12615;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12619 = x12618 + x12612;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12620 = x12619 + x12609;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12621 = x11201 * x11233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12622 = x12621 * x11265;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12623 = x96 - x11201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12624 = x12623 * x11233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12625 = x12624 * x11265;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12626 = x96 - x11233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12627 = x11201 * x12626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12628 = x12627 * x11265;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12629 = x96 - x11265;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12630 = x12621 * x12629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12631 = x12630 + x12628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12632 = x12631 + x12625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12633 = x12632 + x12622;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12634 = x11202 * x11234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12635 = x12634 * x11266;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12636 = x96 - x11202;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12637 = x12636 * x11234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12638 = x12637 * x11266;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12639 = x96 - x11234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12640 = x11202 * x12639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12641 = x12640 * x11266;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12642 = x96 - x11266;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12643 = x12634 * x12642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12644 = x12643 + x12641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12645 = x12644 + x12638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12646 = x12645 + x12635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12647 = x11203 * x11235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12648 = x12647 * x11267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12649 = x96 - x11203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12650 = x12649 * x11235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12651 = x12650 * x11267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12652 = x96 - x11235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12653 = x11203 * x12652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12654 = x12653 * x11267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12655 = x96 - x11267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12656 = x12647 * x12655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12657 = x12656 + x12654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12658 = x12657 + x12651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12659 = x12658 + x12648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12660 = x11204 * x11236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12661 = x12660 * x11268;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12662 = x96 - x11204;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12663 = x12662 * x11236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12664 = x12663 * x11268;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12665 = x96 - x11236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12666 = x11204 * x12665;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12667 = x12666 * x11268;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12668 = x96 - x11268;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12669 = x12660 * x12668;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12670 = x12669 + x12667;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12671 = x12670 + x12664;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12672 = x12671 + x12661;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12673 = x11205 * x11237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12674 = x12673 * x11269;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12675 = x96 - x11205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12676 = x12675 * x11237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12677 = x12676 * x11269;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12678 = x96 - x11237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12679 = x11205 * x12678;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12680 = x12679 * x11269;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12681 = x96 - x11269;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12682 = x12673 * x12681;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12683 = x12682 + x12680;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12684 = x12683 + x12677;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12685 = x12684 + x12674;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12686 = x11206 * x11238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12687 = x12686 * x11270;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12688 = x96 - x11206;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12689 = x12688 * x11238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12690 = x12689 * x11270;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12691 = x96 - x11238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12692 = x11206 * x12691;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12693 = x12692 * x11270;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12694 = x96 - x11270;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12695 = x12686 * x12694;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12696 = x12695 + x12693;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12697 = x12696 + x12690;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12698 = x12697 + x12687;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12699 = x11207 * x11239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12700 = x12699 * x11271;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12701 = x96 - x11207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12702 = x12701 * x11239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12703 = x12702 * x11271;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12704 = x96 - x11239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12705 = x11207 * x12704;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12706 = x12705 * x11271;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12707 = x96 - x11271;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12708 = x12699 * x12707;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12709 = x12708 + x12706;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12710 = x12709 + x12703;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12711 = x12710 + x12700;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12712 = x11208 * x11240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12713 = x12712 * x11272;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12714 = x96 - x11208;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12715 = x12714 * x11240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12716 = x12715 * x11272;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12717 = x96 - x11240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12718 = x11208 * x12717;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12719 = x12718 * x11272;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12720 = x96 - x11272;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12721 = x12712 * x12720;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12722 = x12721 + x12719;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12723 = x12722 + x12716;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12724 = x12723 + x12713;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12725 = x11209 * x11241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12726 = x12725 * x11273;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12727 = x96 - x11209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12728 = x12727 * x11241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12729 = x12728 * x11273;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12730 = x96 - x11241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12731 = x11209 * x12730;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12732 = x12731 * x11273;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12733 = x96 - x11273;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12734 = x12725 * x12733;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12735 = x12734 + x12732;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12736 = x12735 + x12729;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12737 = x12736 + x12726;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12738 = x11210 * x11242;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12739 = x12738 * x11274;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12740 = x96 - x11210;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12741 = x12740 * x11242;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12742 = x12741 * x11274;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12743 = x96 - x11242;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12744 = x11210 * x12743;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12745 = x12744 * x11274;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12746 = x96 - x11274;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12747 = x12738 * x12746;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12748 = x12747 + x12745;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12749 = x12748 + x12742;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12750 = x12749 + x12739;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12751 = x11211 * x11243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12752 = x12751 * x11275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12753 = x96 - x11211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12754 = x12753 * x11243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12755 = x12754 * x11275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12756 = x96 - x11243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12757 = x11211 * x12756;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12758 = x12757 * x11275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12759 = x96 - x11275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12760 = x12751 * x12759;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12761 = x12760 + x12758;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12762 = x12761 + x12755;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12763 = x12762 + x12752;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12764 = x11212 * x11244;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12765 = x12764 * x11276;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12766 = x96 - x11212;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12767 = x12766 * x11244;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12768 = x12767 * x11276;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12769 = x96 - x11244;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12770 = x11212 * x12769;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12771 = x12770 * x11276;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12772 = x96 - x11276;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12773 = x12764 * x12772;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12774 = x12773 + x12771;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:0)
      auto x12775 = x12774 + x12768;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:0)
      auto x12776 = x12775 + x12765;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12777 = x12386 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12778 = x12373 + x12777;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12779 = x12399 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12780 = x12778 + x12779;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12781 = x12412 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12782 = x12780 + x12781;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12783 = x12425 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12784 = x12782 + x12783;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12785 = x12438 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12786 = x12784 + x12785;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12787 = x12451 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12788 = x12786 + x12787;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12789 = x12464 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12790 = x12788 + x12789;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12791 = x12477 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12792 = x12790 + x12791;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12793 = x12490 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12794 = x12792 + x12793;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12795 = x12503 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12796 = x12794 + x12795;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12797 = x12516 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12798 = x12796 + x12797;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12799 = x12529 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12800 = x12798 + x12799;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12801 = x12542 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12802 = x12800 + x12801;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12803 = x12555 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12804 = x12802 + x12803;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12805 = x12568 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12806 = x12804 + x12805;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12807 = x12594 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12808 = x12581 + x12807;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12809 = x12607 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12810 = x12808 + x12809;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12811 = x12620 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12812 = x12810 + x12811;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12813 = x12633 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12814 = x12812 + x12813;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12815 = x12646 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12816 = x12814 + x12815;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12817 = x12659 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12818 = x12816 + x12817;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12819 = x12672 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12820 = x12818 + x12819;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12821 = x12685 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12822 = x12820 + x12821;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12823 = x12698 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12824 = x12822 + x12823;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12825 = x12711 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12826 = x12824 + x12825;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12827 = x12724 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12828 = x12826 + x12827;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12829 = x12737 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12830 = x12828 + x12829;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12831 = x12750 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12832 = x12830 + x12831;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12833 = x12763 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12834 = x12832 + x12833;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12835 = x12776 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12836 = x12834 + x12835;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12837 = x12806 + x12330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12838 = x12836 + x12360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12839 = x12299 + x12837;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12840 = x12300 + x12838;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12841 = x11278 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12842 = x11277 + x12841;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12843 = x11279 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12844 = x12842 + x12843;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12845 = x11280 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12846 = x12844 + x12845;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12847 = x11281 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12848 = x12846 + x12847;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12849 = x11282 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12850 = x12848 + x12849;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12851 = x11283 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12852 = x12850 + x12851;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12853 = x11284 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12854 = x12852 + x12853;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12855 = x11285 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12856 = x12854 + x12855;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12857 = x11286 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12858 = x12856 + x12857;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12859 = x11287 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12860 = x12858 + x12859;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12861 = x11288 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12862 = x12860 + x12861;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12863 = x11289 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12864 = x12862 + x12863;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12865 = x11290 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12866 = x12864 + x12865;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12867 = x11291 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12868 = x12866 + x12867;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12869 = x11292 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12870 = x12868 + x12869;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12871 = x11294 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12872 = x11293 + x12871;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12873 = x11295 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12874 = x12872 + x12873;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12875 = x11296 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12876 = x12874 + x12875;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12877 = x11297 * x62;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12878 = x12876 + x12877;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12879 = x11298 * x59;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12880 = x12878 + x12879;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12881 = x11299 * x53;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12882 = x12880 + x12881;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12883 = x11300 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12884 = x12882 + x12883;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12885 = x11301 * x91;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12886 = x12884 + x12885;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12887 = x11302 * x22;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12888 = x12886 + x12887;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12889 = x11303 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12890 = x12888 + x12889;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12891 = x11304 * x19;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12892 = x12890 + x12891;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12893 = x11305 * x17;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12894 = x12892 + x12893;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12895 = x11306 * x15;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12896 = x12894 + x12895;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12897 = x11307 * x37;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12898 = x12896 + x12897;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12899 = x11308 * x12;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:0)
      auto x12900 = x12898 + x12899;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12901 = x12299 + x12870;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:0)
      auto x12902 = x12300 + x12900;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":489:0)
      {
        auto& reg = args[2][153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12839);
        reg = x12839;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":490:0)
      {
        auto& reg = args[2][155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12901);
        reg = x12901;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":489:0)
      {
        auto& reg = args[2][154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12840);
        reg = x12840;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":490:0)
      {
        auto& reg = args[2][156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12902);
        reg = x12902;
      }
      if (x8933 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
        auto x12903 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12903 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
        auto x12904 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12904 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12905 = Fp(x12903.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12905);
            reg = x12905;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12906 = Fp(x12903.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12907 = x12906 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12907);
            reg = x12907;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12908 = Fp(x12903.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12909 = x12908 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12909);
            reg = x12909;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12910 = Fp(x12903.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12911 = x12910 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12911);
            reg = x12911;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12912 = Fp(x12903.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12913 = x12912 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12913);
            reg = x12913;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12914 = Fp(x12903.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12915 = x12914 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12915);
            reg = x12915;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12916 = Fp(x12903.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12917 = x12916 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12917);
            reg = x12917;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12918 = Fp(x12903.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12919 = x12918 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12919);
            reg = x12919;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12920 = Fp(x12903.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12921 = x12920 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12921);
            reg = x12921;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12922 = Fp(x12903.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12923 = x12922 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12923);
            reg = x12923;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12924 = Fp(x12903.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12925 = x12924 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12925);
            reg = x12925;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12926 = Fp(x12903.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12927 = x12926 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12927);
            reg = x12927;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12928 = Fp(x12903.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12929 = x12928 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12929);
            reg = x12929;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12930 = Fp(x12903.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12931 = x12930 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12931);
            reg = x12931;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12932 = Fp(x12903.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12933 = x12932 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12933);
            reg = x12933;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12934 = Fp(x12903.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12935 = x12934 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12935);
            reg = x12935;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12936 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12936 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12937 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12937 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12938 = x12937 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12939 = x12936 + x12938;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12940 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12940 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12941 = x12940 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12942 = x12939 + x12941;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12943 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12943 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12944 = x12943 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12945 = x12942 + x12944;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12946 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12946 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12947 = x12946 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12948 = x12945 + x12947;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12949 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12949 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12950 = x12949 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12951 = x12948 + x12950;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12952 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12952 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12953 = x12952 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12954 = x12951 + x12953;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12955 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12955 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12956 = x12955 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12957 = x12954 + x12956;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12958 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12958 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12959 = x12958 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12960 = x12957 + x12959;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12961 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12961 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12962 = x12961 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12963 = x12960 + x12962;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12964 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12964 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12965 = x12964 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12966 = x12963 + x12965;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12967 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12967 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12968 = x12967 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12969 = x12966 + x12968;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12970 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12970 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12971 = x12970 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12972 = x12969 + x12971;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12973 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12973 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12974 = x12973 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12975 = x12972 + x12974;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12976 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12976 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12977 = x12976 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12978 = x12975 + x12977;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12979 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12979 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12980 = x12979 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x12981 = x12978 + x12980;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x12982 = x12903 - x12981;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x12983 = x12982 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:0)
          auto x12984 = Fp(x12983.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12984);
            reg = x12984;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x12985 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x12985 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
        auto x12986 = x12983 - x12985;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
        auto x12987 = x12986 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        auto x12988 = x96 - x12987;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        auto x12989 = x12987 * x12988;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        if (x12989 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:0)
        auto x12990 = x12904 + x12983;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12991 = Fp(x12990.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12991);
            reg = x12991;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12992 = Fp(x12990.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12993 = x12992 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12993);
            reg = x12993;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12994 = Fp(x12990.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12995 = x12994 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12995);
            reg = x12995;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12996 = Fp(x12990.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12997 = x12996 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12997);
            reg = x12997;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12998 = Fp(x12990.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x12999 = x12998 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12999);
            reg = x12999;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13000 = Fp(x12990.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13001 = x13000 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13001);
            reg = x13001;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13002 = Fp(x12990.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13003 = x13002 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13003);
            reg = x13003;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13004 = Fp(x12990.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13005 = x13004 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13005);
            reg = x13005;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13006 = Fp(x12990.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13007 = x13006 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13007);
            reg = x13007;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13008 = Fp(x12990.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13009 = x13008 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13009);
            reg = x13009;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13010 = Fp(x12990.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13011 = x13010 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13011);
            reg = x13011;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13012 = Fp(x12990.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13013 = x13012 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13013);
            reg = x13013;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13014 = Fp(x12990.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13015 = x13014 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13015);
            reg = x13015;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13016 = Fp(x12990.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13017 = x13016 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13017);
            reg = x13017;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13018 = Fp(x12990.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13019 = x13018 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13019);
            reg = x13019;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13020 = Fp(x12990.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13021 = x13020 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13021);
            reg = x13021;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13022 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13022 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13023 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13023 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13024 = x13023 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13025 = x13022 + x13024;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13026 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13026 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13027 = x13026 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13028 = x13025 + x13027;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13029 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x13029 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13030 = x13029 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13031 = x13028 + x13030;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13032 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x13032 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13033 = x13032 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13034 = x13031 + x13033;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13035 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x13035 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13036 = x13035 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13037 = x13034 + x13036;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13038 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x13038 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13039 = x13038 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13040 = x13037 + x13039;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13041 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x13041 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13042 = x13041 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13043 = x13040 + x13042;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13044 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x13044 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13045 = x13044 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13046 = x13043 + x13045;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13047 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x13047 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13048 = x13047 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13049 = x13046 + x13048;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13050 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x13050 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13051 = x13050 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13052 = x13049 + x13051;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13053 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x13053 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13054 = x13053 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13055 = x13052 + x13054;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13056 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x13056 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13057 = x13056 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13058 = x13055 + x13057;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13059 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x13059 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13060 = x13059 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13061 = x13058 + x13060;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13062 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x13062 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13063 = x13062 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13064 = x13061 + x13063;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13065 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x13065 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13066 = x13065 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13067 = x13064 + x13066;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x13068 = x12990 - x13067;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x13069 = x13068 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:0)
          auto x13070 = Fp(x13069.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13070);
            reg = x13070;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13071 = args[2][74 * steps + ((cycle - 0) & mask)];
        assert(x13071 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
        auto x13072 = x13069 - x13071;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
        auto x13073 = x13072 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        auto x13074 = x96 - x13073;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        auto x13075 = x13073 * x13074;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        if (x13075 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
        auto x13076 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x13076 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:0))
        auto x13077 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x13077 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13078 = Fp(x13076.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13078);
            reg = x13078;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13079 = Fp(x13076.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13080 = x13079 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13080);
            reg = x13080;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13081 = Fp(x13076.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13082 = x13081 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13082);
            reg = x13082;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13083 = Fp(x13076.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13084 = x13083 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13084);
            reg = x13084;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13085 = Fp(x13076.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13086 = x13085 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13086);
            reg = x13086;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13087 = Fp(x13076.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13088 = x13087 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13088);
            reg = x13088;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13089 = Fp(x13076.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13090 = x13089 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13090);
            reg = x13090;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13091 = Fp(x13076.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13092 = x13091 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13092);
            reg = x13092;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13093 = Fp(x13076.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13094 = x13093 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13094);
            reg = x13094;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13095 = Fp(x13076.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13096 = x13095 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13096);
            reg = x13096;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13097 = Fp(x13076.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13098 = x13097 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13098);
            reg = x13098;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13099 = Fp(x13076.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13100 = x13099 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13100);
            reg = x13100;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13101 = Fp(x13076.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13102 = x13101 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13102);
            reg = x13102;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13103 = Fp(x13076.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13104 = x13103 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13104);
            reg = x13104;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13105 = Fp(x13076.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13106 = x13105 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13106);
            reg = x13106;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13107 = Fp(x13076.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13108 = x13107 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13108);
            reg = x13108;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13109 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x13109 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13110 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x13110 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13111 = x13110 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13112 = x13109 + x13111;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13113 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x13113 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13114 = x13113 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13115 = x13112 + x13114;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13116 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x13116 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13117 = x13116 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13118 = x13115 + x13117;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13119 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x13119 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13120 = x13119 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13121 = x13118 + x13120;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13122 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x13122 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13123 = x13122 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13124 = x13121 + x13123;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13125 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x13125 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13126 = x13125 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13127 = x13124 + x13126;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13128 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x13128 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13129 = x13128 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13130 = x13127 + x13129;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13131 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x13131 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13132 = x13131 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13133 = x13130 + x13132;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13134 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x13134 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13135 = x13134 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13136 = x13133 + x13135;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13137 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x13137 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13138 = x13137 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13139 = x13136 + x13138;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13140 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x13140 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13141 = x13140 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13142 = x13139 + x13141;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13143 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x13143 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13144 = x13143 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13145 = x13142 + x13144;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13146 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x13146 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13147 = x13146 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13148 = x13145 + x13147;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13149 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x13149 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13150 = x13149 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13151 = x13148 + x13150;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13152 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x13152 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13153 = x13152 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13154 = x13151 + x13153;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x13155 = x13076 - x13154;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x13156 = x13155 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:0)
          auto x13157 = Fp(x13156.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13157);
            reg = x13157;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13158 = args[2][75 * steps + ((cycle - 0) & mask)];
        assert(x13158 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
        auto x13159 = x13156 - x13158;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:0)
        auto x13160 = x13159 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        auto x13161 = x96 - x13160;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        auto x13162 = x13160 * x13161;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:0)
        if (x13162 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:0)
        auto x13163 = x13077 + x13156;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13164 = Fp(x13163.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13164);
            reg = x13164;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13165 = Fp(x13163.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13166 = x13165 * x54;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13166);
            reg = x13166;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13167 = Fp(x13163.asUInt32() & x77.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13168 = x13167 * x75;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13168);
            reg = x13168;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13169 = Fp(x13163.asUInt32() & x69.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13170 = x13169 * x55;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13170);
            reg = x13170;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13171 = Fp(x13163.asUInt32() & x62.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13172 = x13171 * x56;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13172);
            reg = x13172;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13173 = Fp(x13163.asUInt32() & x59.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13174 = x13173 * x57;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13174);
            reg = x13174;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13175 = Fp(x13163.asUInt32() & x53.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13176 = x13175 * x52;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13176);
            reg = x13176;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13177 = Fp(x13163.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13178 = x13177 * x60;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13178);
            reg = x13178;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13179 = Fp(x13163.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13180 = x13179 * x90;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13180);
            reg = x13180;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13181 = Fp(x13163.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13182 = x13181 * x21;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13182);
            reg = x13182;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13183 = Fp(x13163.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13184 = x13183 * x20;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13184);
            reg = x13184;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13185 = Fp(x13163.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13186 = x13185 * x18;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13186);
            reg = x13186;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13187 = Fp(x13163.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13188 = x13187 * x16;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13188);
            reg = x13188;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13189 = Fp(x13163.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13190 = x13189 * x14;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13190);
            reg = x13190;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13191 = Fp(x13163.asUInt32() & x37.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13192 = x13191 * x13;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13192);
            reg = x13192;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13193 = Fp(x13163.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:0)
          auto x13194 = x13193 * x11;
          // loc("./zirgen/components/bits.h":27:0)
          {
            auto& reg = args[2][222 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13194);
            reg = x13194;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13195 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x13195 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13196 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x13196 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13197 = x13196 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13198 = x13195 + x13197;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13199 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x13199 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13200 = x13199 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13201 = x13198 + x13200;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13202 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x13202 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13203 = x13202 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13204 = x13201 + x13203;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13205 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x13205 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13206 = x13205 * x62;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13207 = x13204 + x13206;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13208 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x13208 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13209 = x13208 * x59;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13210 = x13207 + x13209;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13211 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x13211 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13212 = x13211 * x53;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13213 = x13210 + x13212;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13214 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x13214 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13215 = x13214 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13216 = x13213 + x13215;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13217 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x13217 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13218 = x13217 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13219 = x13216 + x13218;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13220 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x13220 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13221 = x13220 * x22;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13222 = x13219 + x13221;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13223 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x13223 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13224 = x13223 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13225 = x13222 + x13224;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13226 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x13226 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13227 = x13226 * x19;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13228 = x13225 + x13227;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13229 = args[2][219 * steps + ((cycle - 0) & mask)];
        assert(x13229 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13230 = x13229 * x17;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13231 = x13228 + x13230;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13232 = args[2][220 * steps + ((cycle - 0) & mask)];
        assert(x13232 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13233 = x13232 * x15;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13234 = x13231 + x13233;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13235 = args[2][221 * steps + ((cycle - 0) & mask)];
        assert(x13235 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13236 = x13235 * x37;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13237 = x13234 + x13236;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13238 = args[2][222 * steps + ((cycle - 0) & mask)];
        assert(x13238 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13239 = x13238 * x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:0)
        auto x13240 = x13237 + x13239;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x13241 = x13163 - x13240;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:0)
        auto x13242 = x13241 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:0)
          auto x13243 = Fp(x13242.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13243);
            reg = x13243;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13244 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x13244 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
        auto x13245 = x13242 - x13244;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:0)
        auto x13246 = x13245 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        auto x13247 = x96 - x13246;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        auto x13248 = x13246 * x13247;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:0)
        if (x13248 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13249 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x13249 != Fp::invalid());
      if (x13249 != 0) {
        if (x8941 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":433:0))
          auto x13250 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x13250 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":433:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13250);
            reg = x13250;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":434:0))
          auto x13251 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x13251 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":434:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13251);
            reg = x13251;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":435:0)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        if (x8942 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":439:0))
          auto x13252 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x13252 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":439:0)
          auto x13253 = x13252 + x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":439:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13253);
            reg = x13253;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":440:0))
          auto x13254 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x13254 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":440:0)
          auto x13255 = x13254 + x62;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":440:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13255);
            reg = x13255;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":441:0)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x67);
            reg = x67;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":444:0)
      auto x13256 = x96 - x13249;
      if (x13256 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":445:0))
        auto x13257 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x13257 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":445:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13257);
          reg = x13257;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":446:0))
        auto x13258 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x13258 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":446:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13258);
          reg = x13258;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":447:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/components/mux.h":49:0))
    auto x13259 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x13259 != Fp::invalid());
    if (x13259 != 0) {
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x13260 = x959 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x13261 = Fp(x13260.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13261);
          reg = x13261;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x13262 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x13262 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x13263 = x13260 - x13262;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x13264 = x13263 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x13265 = Fp(x13264.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13265);
          reg = x13265;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x13266 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x13266 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x13267 = x13264 - x13266;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x13268 = x13267 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x13269 = Fp(x13268.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13269);
          reg = x13269;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x13270 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x13270 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x13271 = x13268 - x13270;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x13272 = x13271 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x13273 = Fp(x13272.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13273);
          reg = x13273;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13274 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x13274 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x13275 = x13272 - x13274;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x13276 = x13275 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13276);
        reg = x13276;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13277 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x13277 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x13278 = x96 - x13277;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x13279 = x13277 * x13278;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13279);
        reg = x13279;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x13280 = x93 - x13277;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x13281 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x13281 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x13282 = x13281 * x13280;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x13282 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      extern_log(ctx, cycle, "  PageFault: PC = %10x", {x959});
      {
        auto [x13283, x13284, x13285] = extern_pageInfo(ctx, cycle, "", {x959});
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13283);
          reg = x13283;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":43:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13284);
          reg = x13284;
        }
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13285);
          reg = x13285;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x13286 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13286 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":49:0)
      auto x13287 = x13286 - x5;
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x13288 = (x13287 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13288);
          reg = x13288;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x13289 = inv(x13287);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13289);
          reg = x13289;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13290 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13290 != Fp::invalid());
      if (x13290 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x13287 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x13291 = x96 - x13290;
      if (x13291 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13292 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13292 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x13293 = x13287 * x13292;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x13294 = x13293 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x13294 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x13290 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":51:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":52:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      if (x13291 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":55:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":56:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x13295 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13295 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":59:0)
      auto x13296 = x13286 + x13295;
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":60:0)
      auto x13297 = x13296 * x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":60:0)
      auto x13298 = x13297 + x4;
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":61:0)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13298);
        reg = x13298;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":62:0)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3);
        reg = x3;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13299 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13299 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":64:0)
      auto x13300 = x96 - x13299;
      if (x13300 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":74:0)
        auto x13301 = x13286 - x96;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13302 = Fp(x13301.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13302);
            reg = x13302;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13303 = args[2][9 * steps + ((cycle - 0) & mask)];
        assert(x13303 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13304 = x13301 - x13303;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13305 = x13304 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13306 = Fp(x13305.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13306);
            reg = x13306;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13307 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13307 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13308 = x13305 - x13307;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13309 = x13308 * x90;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13309);
          reg = x13309;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":75:0)
        auto x13310 = x5 - x13286;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13311 = Fp(x13310.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13311);
            reg = x13311;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13312 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13312 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13313 = x13310 - x13312;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13314 = x13313 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13315 = Fp(x13314.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13315);
            reg = x13315;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13316 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13316 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13317 = x13314 - x13316;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13318 = x13317 * x90;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13318);
          reg = x13318;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":77:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
      if (x13299 != 0) {
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13319 = args[2][9 * steps + ((cycle - 0) & mask)];
        assert(x13319 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13320 = x95 - x13319;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13321 = x13320 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13322 = Fp(x13321.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13322);
            reg = x13322;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13323 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13323 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13324 = x13321 - x13323;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13325 = x13324 * x90;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13325);
          reg = x13325;
        }
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13326 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13326 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13327 = x95 - x13326;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13328 = x13327 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13329 = Fp(x13328.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13329);
            reg = x13329;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13330 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13330 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13331 = x13328 - x13330;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13332 = x13331 * x90;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13332);
          reg = x13332;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":83:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/components/mux.h":49:0))
    auto x13333 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x13333 != Fp::invalid());
    if (x13333 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":167:0))
      auto x13334 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x13334 != Fp::invalid());
      if (x13334 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13335 = args[2][76 * steps + ((cycle - 1) & mask)];
        assert(x13335 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":175:0)
        auto x13336 = x13335 + x96;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13337 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x13337 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13338 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x13338 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13339 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x13339 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13340 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x13340 != Fp::invalid());
        // loc("./zirgen/components/u32.h":27:0)
        auto x13341 = x13340 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13342 = x13339 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13343 = x13338 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13344 = x13337 + x13343;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13345 = x13344 + x13342;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13346 = x13345 + x13341;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":175:0)
        auto x13347 = x13346 * x75;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":175:0)
        auto x13348 = x13347 + x13336;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":175:0)
        auto x13349 = x13348 - x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":175:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13349);
          reg = x13349;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Reg"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":178:0))
        auto x13350 = args[2][192 * steps + ((cycle - 1) & mask)];
        assert(x13350 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":178:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13350);
          reg = x13350;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":181:0)
      auto x13351 = x96 - x13334;
      if (x13351 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":182:0))
        auto x13352 = args[2][171 * steps + ((cycle - 1) & mask)];
        assert(x13352 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":182:0)
        auto x13353 = x13352 - x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":182:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13353);
          reg = x13353;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":183:0))
        auto x13354 = args[2][172 * steps + ((cycle - 1) & mask)];
        assert(x13354 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":183:0)
        auto x13355 = x13354 + x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":183:0)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13355);
          reg = x13355;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13356 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x13356 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:0)
        auto x13357 = (x13356 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13357);
          reg = x13357;
        }
        // loc("zirgen/components/iszero.cpp":12:0)
        auto x13358 = inv(x13356);
        // loc("zirgen/components/iszero.cpp":12:0)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13358);
          reg = x13358;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13359 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13359 != Fp::invalid());
      if (x13359 != 0) {
        // loc("zirgen/components/iszero.cpp":16:0)
        if (x13356 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:0)
      auto x13360 = x96 - x13359;
      if (x13360 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13361 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x13361 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x13362 = x13356 * x13361;
        // loc("zirgen/components/iszero.cpp":18:0)
        auto x13363 = x13362 - x96;
        // loc("zirgen/components/iszero.cpp":18:0)
        if (x13363 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x13334 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13364 = args[2][76 * steps + ((cycle - 1) & mask)];
        assert(x13364 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":191:0)
        auto x13365 = x13364 + x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":192:0)
        auto x13366 = x13365 * x13360;
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13367 = (x13366 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13367);
            reg = x13367;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13368 = x13366 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13369 = (x13368 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13369);
            reg = x13369;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13370 = x13366 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13371 = (x13370 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13371);
            reg = x13371;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13372 = x13366 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13373 = (x13372 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13373);
            reg = x13373;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13374 = x13366 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13375 = (x13374 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13375);
            reg = x13375;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13376 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13376 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13377 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13377 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13378 = x13377 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13379 = x13376 + x13378;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13380 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13380 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13381 = x13380 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13382 = x13379 + x13381;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13383 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13383 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13384 = x13383 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13385 = x13382 + x13384;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x13386 = x13385 - x13366;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x13386 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13387 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13387 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":194:0)
        auto x13388 = x13387 * x77;
        extern_log(ctx, cycle, "  COPYIN INIT: dest=%x, remaining=%u first chunk words=%u", {x13388, x13356, x13385});
      }
      if (x13351 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":199:0)
        auto x13389 = x13360 * x77;
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13390 = (x13389 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13390);
            reg = x13390;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13391 = x13389 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13392 = (x13391 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13392);
            reg = x13392;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13393 = x13389 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13394 = (x13393 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13394);
            reg = x13394;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13395 = x13389 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13396 = (x13395 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13396);
            reg = x13396;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13397 = x13389 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13398 = (x13397 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13398);
            reg = x13398;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13399 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13399 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13400 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13400 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13401 = x13400 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13402 = x13399 + x13401;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13403 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13403 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13404 = x13403 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13405 = x13402 + x13404;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13406 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13406 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13407 = x13406 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13408 = x13405 + x13407;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x13409 = x13408 - x13389;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x13409 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":201:0))
      auto x13410 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x13410 != Fp::invalid());
      if (x13410 != 0) {
        {
          auto [x13411, x13412, x13413, x13414, x13415, x13416, x13417, x13418] = extern_syscallFini(ctx, cycle, "", {});
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13411);
            reg = x13411;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13412);
            reg = x13412;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13413);
            reg = x13413;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13414);
            reg = x13414;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x27, x13411, x13412, x13413, x13414, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13419 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13419 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13420 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13420 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13421 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13421 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13422 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13422 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x27);
            reg = x27;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13419);
            reg = x13419;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13420);
            reg = x13420;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13421);
            reg = x13421;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13422);
            reg = x13422;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13415);
            reg = x13415;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13416);
            reg = x13416;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13417);
            reg = x13417;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13418);
            reg = x13418;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x28, x13415, x13416, x13417, x13418, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13423 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13423 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13424 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13424 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13425 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13425 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13426 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13426 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x28);
            reg = x28;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13423);
            reg = x13423;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13424);
            reg = x13424;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13425);
            reg = x13425;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13426);
            reg = x13426;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:0))
        auto x13427 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13427 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":210:0)
        auto x13428 = x13427 - x945;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":210:0)
        if (x13428 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:210");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:0))
        auto x13429 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13429 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":211:0)
        auto x13430 = x13429 - x945;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":211:0)
        if (x13430 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:211");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:0))
        auto x13431 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13431 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":213:0)
        auto x13432 = x13431 - x27;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":213:0)
        if (x13432 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:213");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:0))
        auto x13433 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13433 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":214:0)
        auto x13434 = x13433 - x28;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":214:0)
        if (x13434 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:214");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13435 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13435 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13436 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13436 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13437 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13437 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13438 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13438 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13439 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13439 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13440 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13440 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13441 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13441 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13442 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13442 != Fp::invalid());
        extern_log(ctx, cycle, "  COPYIN FINI: a0=%w a1=%w", {x13439, x13440, x13441, x13442, x13435, x13436, x13437, x13438});
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":221:0)
        auto x13443 = x959 + x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x13444 = x13443 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13445 = Fp(x13444.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13445);
            reg = x13445;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13446 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x13446 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13447 = x13444 - x13446;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13448 = x13447 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13449 = Fp(x13448.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13449);
            reg = x13449;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13450 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x13450 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13451 = x13448 - x13450;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13452 = x13451 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13453 = Fp(x13452.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13453);
            reg = x13453;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13454 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x13454 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13455 = x13452 - x13454;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13456 = x13455 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x13457 = Fp(x13456.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13457);
            reg = x13457;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13458 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x13458 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x13459 = x13456 - x13458;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x13460 = x13459 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13460);
          reg = x13460;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13461 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x13461 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x13462 = x96 - x13461;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x13463 = x13461 * x13462;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13463);
          reg = x13463;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x13464 = x93 - x13461;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13465 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x13465 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x13466 = x13465 * x13464;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x13466 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":222:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":224:0)
      auto x13467 = x96 - x13410;
      if (x13467 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x13468 = x959 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13469 = Fp(x13468.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13469);
            reg = x13469;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13470 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x13470 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13471 = x13468 - x13470;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13472 = x13471 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13473 = Fp(x13472.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13473);
            reg = x13473;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13474 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x13474 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13475 = x13472 - x13474;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13476 = x13475 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x13477 = Fp(x13476.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13477);
            reg = x13477;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x13478 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x13478 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13479 = x13476 - x13478;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x13480 = x13479 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x13481 = Fp(x13480.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13481);
            reg = x13481;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13482 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x13482 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x13483 = x13480 - x13482;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x13484 = x13483 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13484);
          reg = x13484;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13485 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x13485 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x13486 = x96 - x13485;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x13487 = x13485 * x13486;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13487);
          reg = x13487;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x13488 = x93 - x13485;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13489 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x13489 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x13490 = x13489 * x13488;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x13490 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":226:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":236:0))
      auto x13491 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x13491 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":236:0))
      auto x13492 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13492 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":236:0)
      auto x13493 = x13491 + x13492;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":236:0))
      auto x13494 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13494 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":236:0)
      auto x13495 = x13493 + x13494;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":234:0))
      auto x13496 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13496 != Fp::invalid());
      if (x13496 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13497 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13497 != Fp::invalid());
        {
          auto [x13498, x13499, x13500, x13501] = extern_syscallBody(ctx, cycle, "", {});
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13498);
            reg = x13498;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13499);
            reg = x13499;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13500);
            reg = x13500;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13501);
            reg = x13501;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x13497, x13498, x13499, x13500, x13501, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13502 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13502 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13503 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13503 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13504 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13504 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13505 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13505 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13497);
            reg = x13497;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13502);
            reg = x13502;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13503);
            reg = x13503;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13504);
            reg = x13504;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13505);
            reg = x13505;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":245:0)
          auto x13506 = x13497 * x77;
          extern_log(ctx, cycle, "  COPYIN BODY: %x <- %w", {x13506, x13502, x13503, x13504, x13505});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:0))
        auto x13507 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13507 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":248:0)
        auto x13508 = x13507 - x945;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":248:0)
        if (x13508 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:248");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:0))
        auto x13509 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13509 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:0)
        auto x13510 = x13509 - x13497;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:0)
        if (x13510 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:249");
      }
      if (x13495 != 0) {
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":234:0)
      auto x13511 = x13494 + x13496;
      if (x13511 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13512 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13512 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":241:0)
        auto x13513 = x13512 + x96;
        {
          auto [x13514, x13515, x13516, x13517] = extern_syscallBody(ctx, cycle, "", {});
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13514);
            reg = x13514;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13515);
            reg = x13515;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13516);
            reg = x13516;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13517);
            reg = x13517;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x13513, x13514, x13515, x13516, x13517, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13518 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13518 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13519 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13519 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13520 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13520 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13521 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13521 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13513);
            reg = x13513;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13518);
            reg = x13518;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13519);
            reg = x13519;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13520);
            reg = x13520;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13521);
            reg = x13521;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":245:0)
          auto x13522 = x13513 * x77;
          extern_log(ctx, cycle, "  COPYIN BODY: %x <- %w", {x13522, x13518, x13519, x13520, x13521});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:0))
        auto x13523 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13523 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":248:0)
        auto x13524 = x13523 - x945;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":248:0)
        if (x13524 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:248");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:0))
        auto x13525 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13525 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:0)
        auto x13526 = x13525 - x13513;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:0)
        if (x13526 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:249");
      }
      if (x13493 != 0) {
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":234:0)
      auto x13527 = x13492 + x13494;
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":234:0)
      auto x13528 = x13527 + x13496;
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13529 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13529 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":241:0)
        auto x13530 = x13529 + x93;
        {
          auto [x13531, x13532, x13533, x13534] = extern_syscallBody(ctx, cycle, "", {});
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13531);
            reg = x13531;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13532);
            reg = x13532;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13533);
            reg = x13533;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13534);
            reg = x13534;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x13530, x13531, x13532, x13533, x13534, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13535 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13535 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13536 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13536 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13537 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13537 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13538 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x13538 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13530);
            reg = x13530;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13535);
            reg = x13535;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13536);
            reg = x13536;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13537);
            reg = x13537;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13538);
            reg = x13538;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":245:0)
          auto x13539 = x13530 * x77;
          extern_log(ctx, cycle, "  COPYIN BODY: %x <- %w", {x13539, x13535, x13536, x13537, x13538});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:0))
        auto x13540 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13540 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":248:0)
        auto x13541 = x13540 - x945;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":248:0)
        if (x13541 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:248");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:0))
        auto x13542 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13542 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:0)
        auto x13543 = x13542 - x13530;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:0)
        if (x13543 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:249");
      }
      if (x13491 != 0) {
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":234:0)
      auto x13544 = x13495 + x13496;
      if (x13544 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13545 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13545 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":241:0)
        auto x13546 = x13545 + x76;
        {
          auto [x13547, x13548, x13549, x13550] = extern_syscallBody(ctx, cycle, "", {});
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13547);
            reg = x13547;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13548);
            reg = x13548;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13549);
            reg = x13549;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13550);
            reg = x13550;
          }
          {
            extern_ramWrite(ctx, cycle, "", {x13546, x13547, x13548, x13549, x13550, x93});
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13551 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x13551 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13552 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x13552 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13553 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x13553 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13554 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x13554 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13546);
            reg = x13546;
          }
          // loc("zirgen/components/ram.cpp":169:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x945);
            reg = x945;
          }
          // loc("zirgen/components/ram.cpp":170:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13551);
            reg = x13551;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13552);
            reg = x13552;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13553);
            reg = x13553;
          }
          // loc("zirgen/components/u32.cpp":34:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13554);
            reg = x13554;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":245:0)
          auto x13555 = x13546 * x77;
          extern_log(ctx, cycle, "  COPYIN BODY: %x <- %w", {x13555, x13551, x13552, x13553, x13554});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:0))
        auto x13556 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13556 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":248:0)
        auto x13557 = x13556 - x945;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":248:0)
        if (x13557 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:248");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:0))
        auto x13558 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13558 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:0)
        auto x13559 = x13558 - x13546;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:0)
        if (x13559 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:249");
      }
      if (x95 != 0) {
        // loc("zirgen/components/ram.cpp":43:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/components/mux.h":49:0))
    auto x13560 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x13560 != Fp::invalid());
    if (x13560 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":179:0))
      auto x13561 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x13561 != Fp::invalid());
      if (x13561 != 0) {
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        {
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13562 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13562 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13563 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13563 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13564 = x13563 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13565 = x13562 + x13564;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13566 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13566 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13567 = x13566 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13568 = x13565 + x13567;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13569 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13569 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13570 = x13569 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13571 = x13568 + x13570;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x13571 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13572 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x13572 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13573 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x13573 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13574 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x13574 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13575 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x13575 != Fp::invalid());
        // loc("./zirgen/components/u32.h":27:0)
        auto x13576 = x13575 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13577 = x13574 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13578 = x13573 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13579 = x13572 + x13578;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13580 = x13579 + x13577;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13581 = x13580 + x13576;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":189:0)
        if (x13581 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:189");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":191:0)
      auto x13582 = x96 - x13561;
      if (x13582 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13583 = args[2][177 * steps + ((cycle - 1) & mask)];
        assert(x13583 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":192:0))
        auto x13584 = args[2][172 * steps + ((cycle - 1) & mask)];
        assert(x13584 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":192:0)
        auto x13585 = x96 - x13584;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":192:0)
        auto x13586 = x13585 - x13583;
        // loc("./zirgen/components/bits.h":27:0)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13586);
          reg = x13586;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13587 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13587 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":193:0)
        auto x13588 = x96 - x13587;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13589 = args[2][173 * steps + ((cycle - 1) & mask)];
        assert(x13589 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13590 = args[2][174 * steps + ((cycle - 1) & mask)];
        assert(x13590 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13591 = x13590 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13592 = x13589 + x13591;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13593 = args[2][175 * steps + ((cycle - 1) & mask)];
        assert(x13593 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13594 = x13593 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13595 = x13592 + x13594;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13596 = args[2][176 * steps + ((cycle - 1) & mask)];
        assert(x13596 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13597 = x13596 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13598 = x13595 + x13597;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":193:0)
        auto x13599 = x13598 + x13588;
        {
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13600 = (x13599 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13600);
            reg = x13600;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13601 = x13599 - x96;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13602 = (x13601 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13602);
            reg = x13602;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13603 = x13599 - x93;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13604 = (x13603 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13604);
            reg = x13604;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13605 = x13599 - x76;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13606 = (x13605 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13606);
            reg = x13606;
          }
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13607 = x13599 - x77;
          // loc("./zirgen/components/onehot.h":37:0)
          auto x13608 = (x13607 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:0)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13608);
            reg = x13608;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13609 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13609 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13610 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13610 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13611 = x13610 * x93;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13612 = x13609 + x13611;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13613 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13613 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13614 = x13613 * x76;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13615 = x13612 + x13614;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13616 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13616 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13617 = x13616 * x77;
        // loc("./zirgen/components/onehot.h":46:0)
        auto x13618 = x13615 + x13617;
        // loc("./zirgen/components/onehot.h":40:0)
        auto x13619 = x13618 - x13599;
        // loc("./zirgen/components/onehot.h":40:0)
        if (x13619 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13620 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13620 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":195:0))
      auto x13621 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13621 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":195:0))
      auto x13622 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x13622 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":195:0)
      auto x13623 = x13622 + x13621;
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":195:0)
      auto x13624 = x13623 * x13620;
      // loc("./zirgen/components/bits.h":27:0)
      {
        auto& reg = args[2][178 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13624);
        reg = x13624;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":196:0)
      auto x13625 = x13621 * x13620;
      // loc("./zirgen/components/bits.h":27:0)
      {
        auto& reg = args[2][179 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13625);
        reg = x13625;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x13626 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x13626 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x13627 = x13622 * x93;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x13628 = x13626 + x13627;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x13629 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13629 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:0)
      auto x13630 = x13629 * x76;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x13631 = x13628 + x13630;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x13632 = x13621 * x77;
      // loc("./zirgen/components/onehot.h":46:0)
      auto x13633 = x13631 + x13632;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13634 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13634 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x13635 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13635 != Fp::invalid());
      extern_log(ctx, cycle, "BIGINT: stage = %u, stageOffset = %u, mulActive = %u, finalize = %u", {x13633, x13620, x13634, x13635});
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":204:0))
      auto x13636 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x13636 != Fp::invalid());
      if (x13636 != 0) {
        {
          auto [x13637, x13638, x13639, x13640] = extern_ramRead(ctx, cycle, "", {x27, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13637);
            reg = x13637;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13638);
            reg = x13638;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13639);
            reg = x13639;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13640);
            reg = x13640;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13641 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13641 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13642 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13642 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13643 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13643 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13644 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13644 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13641);
          reg = x13641;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13642);
          reg = x13642;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13643);
          reg = x13643;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13644);
          reg = x13644;
        }
        {
          auto [x13645, x13646, x13647, x13648] = extern_ramRead(ctx, cycle, "", {x25, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13645);
            reg = x13645;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13646);
            reg = x13646;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13647);
            reg = x13647;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13648);
            reg = x13648;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13649 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13649 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13650 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13650 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13651 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13651 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13652 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13652 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13649);
          reg = x13649;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13650);
          reg = x13650;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13651);
          reg = x13651;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13652);
          reg = x13652;
        }
        {
          auto [x13653, x13654, x13655, x13656] = extern_ramRead(ctx, cycle, "", {x24, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13653);
            reg = x13653;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13654);
            reg = x13654;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13655);
            reg = x13655;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13656);
            reg = x13656;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13657 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13657 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13658 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13658 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13659 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13659 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13660 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13660 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13657);
          reg = x13657;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13658);
          reg = x13658;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13659);
          reg = x13659;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13660);
          reg = x13660;
        }
        {
          auto [x13661, x13662, x13663, x13664] = extern_ramRead(ctx, cycle, "", {x26, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13661);
            reg = x13661;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13662);
            reg = x13662;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13663);
            reg = x13663;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13664);
            reg = x13664;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13665 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13665 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13666 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13666 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13667 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13667 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13668 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x13668 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13665);
          reg = x13665;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13666);
          reg = x13666;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13667);
          reg = x13667;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13668);
          reg = x13668;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":212:0)
      auto x13669 = x96 - x13620;
      if (x13669 != 0) {
        if (x13626 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13670 = args[2][140 * steps + ((cycle - 1) & mask)];
          assert(x13670 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13671 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x13671 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13672 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x13672 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13673 = args[2][143 * steps + ((cycle - 1) & mask)];
          assert(x13673 != Fp::invalid());
          // loc("./zirgen/components/u32.h":27:0)
          auto x13674 = x13673 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x13675 = x13672 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x13676 = x13671 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x13677 = x13670 + x13676;
          // loc("./zirgen/components/u32.h":26:0)
          auto x13678 = x13677 + x13675;
          // loc("./zirgen/components/u32.h":27:0)
          auto x13679 = x13678 + x13674;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":238:0)
          auto x13680 = x13679 * x75;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":238:0)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13680);
            reg = x13680;
          }
        }
        if (x13622 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13681 = args[2][126 * steps + ((cycle - 3) & mask)];
          assert(x13681 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13682 = args[2][127 * steps + ((cycle - 3) & mask)];
          assert(x13682 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13683 = args[2][128 * steps + ((cycle - 3) & mask)];
          assert(x13683 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13684 = args[2][129 * steps + ((cycle - 3) & mask)];
          assert(x13684 != Fp::invalid());
          // loc("./zirgen/components/u32.h":27:0)
          auto x13685 = x13684 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x13686 = x13683 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x13687 = x13682 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x13688 = x13681 + x13687;
          // loc("./zirgen/components/u32.h":26:0)
          auto x13689 = x13688 + x13686;
          // loc("./zirgen/components/u32.h":27:0)
          auto x13690 = x13689 + x13685;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":238:0)
          auto x13691 = x13690 * x75;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":238:0)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13691);
            reg = x13691;
          }
        }
        if (x13629 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13692 = args[2][133 * steps + ((cycle - 5) & mask)];
          assert(x13692 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13693 = args[2][134 * steps + ((cycle - 5) & mask)];
          assert(x13693 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13694 = args[2][135 * steps + ((cycle - 5) & mask)];
          assert(x13694 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13695 = args[2][136 * steps + ((cycle - 5) & mask)];
          assert(x13695 != Fp::invalid());
          // loc("./zirgen/components/u32.h":27:0)
          auto x13696 = x13695 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x13697 = x13694 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x13698 = x13693 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x13699 = x13692 + x13698;
          // loc("./zirgen/components/u32.h":26:0)
          auto x13700 = x13699 + x13697;
          // loc("./zirgen/components/u32.h":27:0)
          auto x13701 = x13700 + x13696;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":238:0)
          auto x13702 = x13701 * x75;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":238:0)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13702);
            reg = x13702;
          }
        }
        if (x13621 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13703 = args[2][119 * steps + ((cycle - 7) & mask)];
          assert(x13703 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13704 = args[2][120 * steps + ((cycle - 7) & mask)];
          assert(x13704 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13705 = args[2][121 * steps + ((cycle - 7) & mask)];
          assert(x13705 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
          auto x13706 = args[2][122 * steps + ((cycle - 7) & mask)];
          assert(x13706 != Fp::invalid());
          // loc("./zirgen/components/u32.h":27:0)
          auto x13707 = x13706 * x79;
          // loc("./zirgen/components/u32.h":26:0)
          auto x13708 = x13705 * x78;
          // loc("./zirgen/components/u32.h":25:0)
          auto x13709 = x13704 * x91;
          // loc("./zirgen/components/u32.h":25:0)
          auto x13710 = x13703 + x13709;
          // loc("./zirgen/components/u32.h":26:0)
          auto x13711 = x13710 + x13708;
          // loc("./zirgen/components/u32.h":27:0)
          auto x13712 = x13711 + x13707;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":238:0)
          auto x13713 = x13712 * x75;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":238:0)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13713);
            reg = x13713;
          }
        }
      }
      if (x13620 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":242:0))
        auto x13714 = args[2][171 * steps + ((cycle - 1) & mask)];
        assert(x13714 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":242:0)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13714);
          reg = x13714;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":246:0)
      auto x13715 = x13626 + x13622;
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":246:0)
      auto x13716 = x13715 + x13629;
      if (x13716 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":248:0)
        auto x13717 = x13620 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x13718 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13718 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":248:0)
        auto x13719 = x13718 + x13717;
        {
          auto [x13720, x13721, x13722, x13723] = extern_ramRead(ctx, cycle, "", {x13719, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13720);
            reg = x13720;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13721);
            reg = x13721;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13722);
            reg = x13722;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13723);
            reg = x13723;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13724 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13724 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13725 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13725 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13726 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13726 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13727 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13727 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13719);
          reg = x13719;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13724);
          reg = x13724;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13725);
          reg = x13725;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13726);
          reg = x13726;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13727);
          reg = x13727;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":248:0)
        auto x13728 = x13719 + x96;
        {
          auto [x13729, x13730, x13731, x13732] = extern_ramRead(ctx, cycle, "", {x13728, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13729);
            reg = x13729;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13730);
            reg = x13730;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13731);
            reg = x13731;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13732);
            reg = x13732;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13733 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13733 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13734 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13734 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13735 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13735 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13736 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13736 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13728);
          reg = x13728;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13733);
          reg = x13733;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13734);
          reg = x13734;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13735);
          reg = x13735;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13736);
          reg = x13736;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":248:0)
        auto x13737 = x13719 + x93;
        {
          auto [x13738, x13739, x13740, x13741] = extern_ramRead(ctx, cycle, "", {x13737, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13738);
            reg = x13738;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13739);
            reg = x13739;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13740);
            reg = x13740;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13741);
            reg = x13741;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13742 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13742 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13743 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13743 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13744 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13744 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13745 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13745 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13737);
          reg = x13737;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13742);
          reg = x13742;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13743);
          reg = x13743;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13744);
          reg = x13744;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13745);
          reg = x13745;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":248:0)
        auto x13746 = x13719 + x76;
        {
          auto [x13747, x13748, x13749, x13750] = extern_ramRead(ctx, cycle, "", {x13746, x96});
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13747);
            reg = x13747;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13748);
            reg = x13748;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13749);
            reg = x13749;
          }
          // loc("zirgen/components/u32.cpp":88:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13750);
            reg = x13750;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13751 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13751 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13752 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13752 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13753 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13753 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x13754 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x13754 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13746);
          reg = x13746;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13751);
          reg = x13751;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13752);
          reg = x13752;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13753);
          reg = x13753;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13754);
          reg = x13754;
        }
        // loc("./zirgen/components/u32.h":27:0)
        auto x13755 = x13754 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13756 = x13753 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13757 = x13752 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13758 = x13751 + x13757;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13759 = x13758 + x13756;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13760 = x13759 + x13755;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13761 = x13745 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13762 = x13744 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13763 = x13743 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13764 = x13742 + x13763;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13765 = x13764 + x13762;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13766 = x13765 + x13761;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13767 = x13736 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13768 = x13735 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13769 = x13734 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13770 = x13733 + x13769;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13771 = x13770 + x13768;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13772 = x13771 + x13767;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13773 = x13727 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13774 = x13726 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13775 = x13725 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13776 = x13724 + x13775;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13777 = x13776 + x13774;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13778 = x13777 + x13773;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":251:0)
        auto x13779 = x13718 * x77;
        extern_log(ctx, cycle, "  Reading: ioAddr = 0x%x, data = { %u, %u, %u, %u }", {x13779, x13778, x13772, x13766, x13760});
      }
      {
        auto [x13780, x13781, x13782, x13783] = extern_ramRead(ctx, cycle, "", {x25, x96});
        // loc("./zirgen/components/u32.h":27:0)
        auto x13784 = x13783 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13785 = x13782 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13786 = x13781 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13787 = x13780 + x13786;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13788 = x13787 + x13785;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13789 = x13788 + x13784;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":13:0)
        auto x13790 = x13789 * x75;
        auto [x13791, x13792, x13793, x13794] = extern_ramRead(ctx, cycle, "", {x13790, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13795 = x13790 + x96;
        auto [x13796, x13797, x13798, x13799] = extern_ramRead(ctx, cycle, "", {x13795, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13800 = x13790 + x93;
        auto [x13801, x13802, x13803, x13804] = extern_ramRead(ctx, cycle, "", {x13800, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13805 = x13790 + x76;
        auto [x13806, x13807, x13808, x13809] = extern_ramRead(ctx, cycle, "", {x13805, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13810 = x13790 + x77;
        auto [x13811, x13812, x13813, x13814] = extern_ramRead(ctx, cycle, "", {x13810, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13815 = x13790 + x72;
        auto [x13816, x13817, x13818, x13819] = extern_ramRead(ctx, cycle, "", {x13815, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13820 = x13790 + x71;
        auto [x13821, x13822, x13823, x13824] = extern_ramRead(ctx, cycle, "", {x13820, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13825 = x13790 + x70;
        auto [x13826, x13827, x13828, x13829] = extern_ramRead(ctx, cycle, "", {x13825, x96});
        auto [x13830, x13831, x13832, x13833] = extern_ramRead(ctx, cycle, "", {x24, x96});
        // loc("./zirgen/components/u32.h":27:0)
        auto x13834 = x13833 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13835 = x13832 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13836 = x13831 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13837 = x13830 + x13836;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13838 = x13837 + x13835;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13839 = x13838 + x13834;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":13:0)
        auto x13840 = x13839 * x75;
        auto [x13841, x13842, x13843, x13844] = extern_ramRead(ctx, cycle, "", {x13840, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13845 = x13840 + x96;
        auto [x13846, x13847, x13848, x13849] = extern_ramRead(ctx, cycle, "", {x13845, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13850 = x13840 + x93;
        auto [x13851, x13852, x13853, x13854] = extern_ramRead(ctx, cycle, "", {x13850, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13855 = x13840 + x76;
        auto [x13856, x13857, x13858, x13859] = extern_ramRead(ctx, cycle, "", {x13855, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13860 = x13840 + x77;
        auto [x13861, x13862, x13863, x13864] = extern_ramRead(ctx, cycle, "", {x13860, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13865 = x13840 + x72;
        auto [x13866, x13867, x13868, x13869] = extern_ramRead(ctx, cycle, "", {x13865, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13870 = x13840 + x71;
        auto [x13871, x13872, x13873, x13874] = extern_ramRead(ctx, cycle, "", {x13870, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13875 = x13840 + x70;
        auto [x13876, x13877, x13878, x13879] = extern_ramRead(ctx, cycle, "", {x13875, x96});
        auto [x13880, x13881, x13882, x13883] = extern_ramRead(ctx, cycle, "", {x26, x96});
        // loc("./zirgen/components/u32.h":27:0)
        auto x13884 = x13883 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13885 = x13882 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13886 = x13881 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x13887 = x13880 + x13886;
        // loc("./zirgen/components/u32.h":26:0)
        auto x13888 = x13887 + x13885;
        // loc("./zirgen/components/u32.h":27:0)
        auto x13889 = x13888 + x13884;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":13:0)
        auto x13890 = x13889 * x75;
        auto [x13891, x13892, x13893, x13894] = extern_ramRead(ctx, cycle, "", {x13890, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13895 = x13890 + x96;
        auto [x13896, x13897, x13898, x13899] = extern_ramRead(ctx, cycle, "", {x13895, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13900 = x13890 + x93;
        auto [x13901, x13902, x13903, x13904] = extern_ramRead(ctx, cycle, "", {x13900, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13905 = x13890 + x76;
        auto [x13906, x13907, x13908, x13909] = extern_ramRead(ctx, cycle, "", {x13905, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13910 = x13890 + x77;
        auto [x13911, x13912, x13913, x13914] = extern_ramRead(ctx, cycle, "", {x13910, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13915 = x13890 + x72;
        auto [x13916, x13917, x13918, x13919] = extern_ramRead(ctx, cycle, "", {x13915, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13920 = x13890 + x71;
        auto [x13921, x13922, x13923, x13924] = extern_ramRead(ctx, cycle, "", {x13920, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:0)
        auto x13925 = x13890 + x70;
        auto [x13926, x13927, x13928, x13929] = extern_ramRead(ctx, cycle, "", {x13925, x96});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13930 = x13791 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13931 = x13791 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13932 = x13792 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13933 = x13931 + x13932;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13934 = x13791 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13935 = x13792 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13936 = x13934 + x13935;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13937 = x13793 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13938 = x13936 + x13937;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13939 = x13791 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13940 = x13792 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13941 = x13939 + x13940;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13942 = x13793 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13943 = x13941 + x13942;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13944 = x13794 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13945 = x13943 + x13944;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13946 = x13791 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13947 = x13792 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13948 = x13946 + x13947;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13949 = x13793 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13950 = x13948 + x13949;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13951 = x13794 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13952 = x13950 + x13951;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13953 = x13796 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13954 = x13952 + x13953;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13955 = x13791 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13956 = x13792 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13957 = x13955 + x13956;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13958 = x13793 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13959 = x13957 + x13958;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13960 = x13794 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13961 = x13959 + x13960;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13962 = x13796 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13963 = x13961 + x13962;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13964 = x13797 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13965 = x13963 + x13964;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13966 = x13791 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13967 = x13792 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13968 = x13966 + x13967;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13969 = x13793 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13970 = x13968 + x13969;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13971 = x13794 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13972 = x13970 + x13971;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13973 = x13796 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13974 = x13972 + x13973;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13975 = x13797 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13976 = x13974 + x13975;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13977 = x13798 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13978 = x13976 + x13977;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13979 = x13791 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13980 = x13792 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13981 = x13979 + x13980;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13982 = x13793 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13983 = x13981 + x13982;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13984 = x13794 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13985 = x13983 + x13984;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13986 = x13796 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13987 = x13985 + x13986;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13988 = x13797 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13989 = x13987 + x13988;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13990 = x13798 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13991 = x13989 + x13990;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13992 = x13799 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13993 = x13991 + x13992;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13994 = x13791 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13995 = x13792 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13996 = x13994 + x13995;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13997 = x13793 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13998 = x13996 + x13997;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x13999 = x13794 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14000 = x13998 + x13999;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14001 = x13796 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14002 = x14000 + x14001;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14003 = x13797 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14004 = x14002 + x14003;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14005 = x13798 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14006 = x14004 + x14005;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14007 = x13799 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14008 = x14006 + x14007;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14009 = x13801 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14010 = x14008 + x14009;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14011 = x13791 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14012 = x13792 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14013 = x14011 + x14012;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14014 = x13793 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14015 = x14013 + x14014;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14016 = x13794 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14017 = x14015 + x14016;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14018 = x13796 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14019 = x14017 + x14018;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14020 = x13797 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14021 = x14019 + x14020;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14022 = x13798 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14023 = x14021 + x14022;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14024 = x13799 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14025 = x14023 + x14024;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14026 = x13801 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14027 = x14025 + x14026;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14028 = x13802 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14029 = x14027 + x14028;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14030 = x13791 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14031 = x13792 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14032 = x14030 + x14031;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14033 = x13793 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14034 = x14032 + x14033;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14035 = x13794 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14036 = x14034 + x14035;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14037 = x13796 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14038 = x14036 + x14037;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14039 = x13797 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14040 = x14038 + x14039;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14041 = x13798 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14042 = x14040 + x14041;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14043 = x13799 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14044 = x14042 + x14043;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14045 = x13801 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14046 = x14044 + x14045;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14047 = x13802 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14048 = x14046 + x14047;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14049 = x13803 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14050 = x14048 + x14049;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14051 = x13791 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14052 = x13792 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14053 = x14051 + x14052;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14054 = x13793 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14055 = x14053 + x14054;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14056 = x13794 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14057 = x14055 + x14056;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14058 = x13796 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14059 = x14057 + x14058;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14060 = x13797 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14061 = x14059 + x14060;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14062 = x13798 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14063 = x14061 + x14062;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14064 = x13799 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14065 = x14063 + x14064;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14066 = x13801 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14067 = x14065 + x14066;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14068 = x13802 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14069 = x14067 + x14068;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14070 = x13803 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14071 = x14069 + x14070;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14072 = x13804 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14073 = x14071 + x14072;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14074 = x13791 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14075 = x13792 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14076 = x14074 + x14075;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14077 = x13793 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14078 = x14076 + x14077;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14079 = x13794 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14080 = x14078 + x14079;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14081 = x13796 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14082 = x14080 + x14081;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14083 = x13797 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14084 = x14082 + x14083;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14085 = x13798 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14086 = x14084 + x14085;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14087 = x13799 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14088 = x14086 + x14087;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14089 = x13801 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14090 = x14088 + x14089;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14091 = x13802 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14092 = x14090 + x14091;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14093 = x13803 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14094 = x14092 + x14093;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14095 = x13804 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14096 = x14094 + x14095;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14097 = x13806 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14098 = x14096 + x14097;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14099 = x13791 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14100 = x13792 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14101 = x14099 + x14100;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14102 = x13793 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14103 = x14101 + x14102;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14104 = x13794 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14105 = x14103 + x14104;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14106 = x13796 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14107 = x14105 + x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14108 = x13797 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14109 = x14107 + x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14110 = x13798 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14111 = x14109 + x14110;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14112 = x13799 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14113 = x14111 + x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14114 = x13801 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14115 = x14113 + x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14116 = x13802 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14117 = x14115 + x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14118 = x13803 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14119 = x14117 + x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14120 = x13804 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14121 = x14119 + x14120;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14122 = x13806 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14123 = x14121 + x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14124 = x13807 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14125 = x14123 + x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14126 = x13791 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14127 = x13792 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14128 = x14126 + x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14129 = x13793 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14130 = x14128 + x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14131 = x13794 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14132 = x14130 + x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14133 = x13796 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14134 = x14132 + x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14135 = x13797 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14136 = x14134 + x14135;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14137 = x13798 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14138 = x14136 + x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14139 = x13799 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14140 = x14138 + x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14141 = x13801 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14142 = x14140 + x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14143 = x13802 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14144 = x14142 + x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14145 = x13803 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14146 = x14144 + x14145;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14147 = x13804 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14148 = x14146 + x14147;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14149 = x13806 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14150 = x14148 + x14149;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14151 = x13807 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14152 = x14150 + x14151;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14153 = x13808 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14154 = x14152 + x14153;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14155 = x13791 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14156 = x13792 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14157 = x14155 + x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14158 = x13793 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14159 = x14157 + x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14160 = x13794 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14161 = x14159 + x14160;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14162 = x13796 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14163 = x14161 + x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14164 = x13797 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14165 = x14163 + x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14166 = x13798 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14167 = x14165 + x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14168 = x13799 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14169 = x14167 + x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14170 = x13801 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14171 = x14169 + x14170;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14172 = x13802 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14173 = x14171 + x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14174 = x13803 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14175 = x14173 + x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14176 = x13804 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14177 = x14175 + x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14178 = x13806 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14179 = x14177 + x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14180 = x13807 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14181 = x14179 + x14180;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14182 = x13808 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14183 = x14181 + x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14184 = x13809 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14185 = x14183 + x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14186 = x13791 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14187 = x13792 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14188 = x14186 + x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14189 = x13793 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14190 = x14188 + x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14191 = x13794 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14192 = x14190 + x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14193 = x13796 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14194 = x14192 + x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14195 = x13797 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14196 = x14194 + x14195;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14197 = x13798 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14198 = x14196 + x14197;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14199 = x13799 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14200 = x14198 + x14199;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14201 = x13801 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14202 = x14200 + x14201;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14203 = x13802 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14204 = x14202 + x14203;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14205 = x13803 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14206 = x14204 + x14205;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14207 = x13804 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14208 = x14206 + x14207;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14209 = x13806 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14210 = x14208 + x14209;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14211 = x13807 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14212 = x14210 + x14211;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14213 = x13808 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14214 = x14212 + x14213;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14215 = x13809 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14216 = x14214 + x14215;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14217 = x13811 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14218 = x14216 + x14217;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14219 = x13791 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14220 = x13792 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14221 = x14219 + x14220;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14222 = x13793 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14223 = x14221 + x14222;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14224 = x13794 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14225 = x14223 + x14224;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14226 = x13796 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14227 = x14225 + x14226;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14228 = x13797 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14229 = x14227 + x14228;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14230 = x13798 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14231 = x14229 + x14230;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14232 = x13799 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14233 = x14231 + x14232;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14234 = x13801 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14235 = x14233 + x14234;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14236 = x13802 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14237 = x14235 + x14236;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14238 = x13803 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14239 = x14237 + x14238;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14240 = x13804 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14241 = x14239 + x14240;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14242 = x13806 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14243 = x14241 + x14242;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14244 = x13807 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14245 = x14243 + x14244;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14246 = x13808 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14247 = x14245 + x14246;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14248 = x13809 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14249 = x14247 + x14248;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14250 = x13811 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14251 = x14249 + x14250;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14252 = x13812 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14253 = x14251 + x14252;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14254 = x13791 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14255 = x13792 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14256 = x14254 + x14255;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14257 = x13793 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14258 = x14256 + x14257;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14259 = x13794 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14260 = x14258 + x14259;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14261 = x13796 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14262 = x14260 + x14261;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14263 = x13797 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14264 = x14262 + x14263;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14265 = x13798 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14266 = x14264 + x14265;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14267 = x13799 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14268 = x14266 + x14267;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14269 = x13801 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14270 = x14268 + x14269;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14271 = x13802 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14272 = x14270 + x14271;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14273 = x13803 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14274 = x14272 + x14273;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14275 = x13804 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14276 = x14274 + x14275;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14277 = x13806 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14278 = x14276 + x14277;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14279 = x13807 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14280 = x14278 + x14279;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14281 = x13808 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14282 = x14280 + x14281;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14283 = x13809 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14284 = x14282 + x14283;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14285 = x13811 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14286 = x14284 + x14285;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14287 = x13812 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14288 = x14286 + x14287;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14289 = x13813 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14290 = x14288 + x14289;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14291 = x13791 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14292 = x13792 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14293 = x14291 + x14292;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14294 = x13793 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14295 = x14293 + x14294;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14296 = x13794 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14297 = x14295 + x14296;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14298 = x13796 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14299 = x14297 + x14298;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14300 = x13797 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14301 = x14299 + x14300;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14302 = x13798 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14303 = x14301 + x14302;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14304 = x13799 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14305 = x14303 + x14304;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14306 = x13801 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14307 = x14305 + x14306;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14308 = x13802 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14309 = x14307 + x14308;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14310 = x13803 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14311 = x14309 + x14310;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14312 = x13804 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14313 = x14311 + x14312;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14314 = x13806 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14315 = x14313 + x14314;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14316 = x13807 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14317 = x14315 + x14316;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14318 = x13808 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14319 = x14317 + x14318;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14320 = x13809 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14321 = x14319 + x14320;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14322 = x13811 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14323 = x14321 + x14322;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14324 = x13812 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14325 = x14323 + x14324;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14326 = x13813 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14327 = x14325 + x14326;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14328 = x13814 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14329 = x14327 + x14328;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14330 = x13791 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14331 = x13792 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14332 = x14330 + x14331;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14333 = x13793 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14334 = x14332 + x14333;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14335 = x13794 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14336 = x14334 + x14335;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14337 = x13796 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14338 = x14336 + x14337;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14339 = x13797 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14340 = x14338 + x14339;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14341 = x13798 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14342 = x14340 + x14341;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14343 = x13799 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14344 = x14342 + x14343;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14345 = x13801 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14346 = x14344 + x14345;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14347 = x13802 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14348 = x14346 + x14347;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14349 = x13803 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14350 = x14348 + x14349;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14351 = x13804 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14352 = x14350 + x14351;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14353 = x13806 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14354 = x14352 + x14353;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14355 = x13807 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14356 = x14354 + x14355;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14357 = x13808 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14358 = x14356 + x14357;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14359 = x13809 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14360 = x14358 + x14359;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14361 = x13811 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14362 = x14360 + x14361;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14363 = x13812 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14364 = x14362 + x14363;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14365 = x13813 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14366 = x14364 + x14365;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14367 = x13814 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14368 = x14366 + x14367;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14369 = x13816 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14370 = x14368 + x14369;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14371 = x13791 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14372 = x13792 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14373 = x14371 + x14372;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14374 = x13793 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14375 = x14373 + x14374;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14376 = x13794 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14377 = x14375 + x14376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14378 = x13796 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14379 = x14377 + x14378;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14380 = x13797 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14381 = x14379 + x14380;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14382 = x13798 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14383 = x14381 + x14382;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14384 = x13799 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14385 = x14383 + x14384;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14386 = x13801 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14387 = x14385 + x14386;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14388 = x13802 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14389 = x14387 + x14388;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14390 = x13803 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14391 = x14389 + x14390;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14392 = x13804 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14393 = x14391 + x14392;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14394 = x13806 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14395 = x14393 + x14394;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14396 = x13807 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14397 = x14395 + x14396;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14398 = x13808 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14399 = x14397 + x14398;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14400 = x13809 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14401 = x14399 + x14400;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14402 = x13811 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14403 = x14401 + x14402;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14404 = x13812 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14405 = x14403 + x14404;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14406 = x13813 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14407 = x14405 + x14406;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14408 = x13814 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14409 = x14407 + x14408;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14410 = x13816 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14411 = x14409 + x14410;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14412 = x13817 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14413 = x14411 + x14412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14414 = x13791 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14415 = x13792 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14416 = x14414 + x14415;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14417 = x13793 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14418 = x14416 + x14417;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14419 = x13794 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14420 = x14418 + x14419;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14421 = x13796 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14422 = x14420 + x14421;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14423 = x13797 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14424 = x14422 + x14423;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14425 = x13798 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14426 = x14424 + x14425;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14427 = x13799 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14428 = x14426 + x14427;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14429 = x13801 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14430 = x14428 + x14429;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14431 = x13802 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14432 = x14430 + x14431;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14433 = x13803 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14434 = x14432 + x14433;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14435 = x13804 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14436 = x14434 + x14435;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14437 = x13806 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14438 = x14436 + x14437;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14439 = x13807 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14440 = x14438 + x14439;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14441 = x13808 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14442 = x14440 + x14441;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14443 = x13809 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14444 = x14442 + x14443;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14445 = x13811 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14446 = x14444 + x14445;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14447 = x13812 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14448 = x14446 + x14447;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14449 = x13813 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14450 = x14448 + x14449;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14451 = x13814 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14452 = x14450 + x14451;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14453 = x13816 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14454 = x14452 + x14453;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14455 = x13817 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14456 = x14454 + x14455;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14457 = x13818 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14458 = x14456 + x14457;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14459 = x13791 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14460 = x13792 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14461 = x14459 + x14460;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14462 = x13793 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14463 = x14461 + x14462;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14464 = x13794 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14465 = x14463 + x14464;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14466 = x13796 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14467 = x14465 + x14466;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14468 = x13797 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14469 = x14467 + x14468;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14470 = x13798 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14471 = x14469 + x14470;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14472 = x13799 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14473 = x14471 + x14472;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14474 = x13801 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14475 = x14473 + x14474;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14476 = x13802 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14477 = x14475 + x14476;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14478 = x13803 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14479 = x14477 + x14478;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14480 = x13804 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14481 = x14479 + x14480;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14482 = x13806 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14483 = x14481 + x14482;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14484 = x13807 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14485 = x14483 + x14484;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14486 = x13808 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14487 = x14485 + x14486;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14488 = x13809 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14489 = x14487 + x14488;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14490 = x13811 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14491 = x14489 + x14490;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14492 = x13812 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14493 = x14491 + x14492;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14494 = x13813 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14495 = x14493 + x14494;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14496 = x13814 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14497 = x14495 + x14496;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14498 = x13816 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14499 = x14497 + x14498;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14500 = x13817 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14501 = x14499 + x14500;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14502 = x13818 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14503 = x14501 + x14502;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14504 = x13819 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14505 = x14503 + x14504;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14506 = x13791 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14507 = x13792 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14508 = x14506 + x14507;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14509 = x13793 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14510 = x14508 + x14509;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14511 = x13794 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14512 = x14510 + x14511;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14513 = x13796 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14514 = x14512 + x14513;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14515 = x13797 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14516 = x14514 + x14515;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14517 = x13798 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14518 = x14516 + x14517;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14519 = x13799 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14520 = x14518 + x14519;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14521 = x13801 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14522 = x14520 + x14521;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14523 = x13802 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14524 = x14522 + x14523;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14525 = x13803 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14526 = x14524 + x14525;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14527 = x13804 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14528 = x14526 + x14527;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14529 = x13806 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14530 = x14528 + x14529;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14531 = x13807 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14532 = x14530 + x14531;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14533 = x13808 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14534 = x14532 + x14533;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14535 = x13809 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14536 = x14534 + x14535;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14537 = x13811 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14538 = x14536 + x14537;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14539 = x13812 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14540 = x14538 + x14539;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14541 = x13813 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14542 = x14540 + x14541;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14543 = x13814 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14544 = x14542 + x14543;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14545 = x13816 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14546 = x14544 + x14545;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14547 = x13817 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14548 = x14546 + x14547;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14549 = x13818 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14550 = x14548 + x14549;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14551 = x13819 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14552 = x14550 + x14551;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14553 = x13821 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14554 = x14552 + x14553;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14555 = x13791 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14556 = x13792 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14557 = x14555 + x14556;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14558 = x13793 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14559 = x14557 + x14558;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14560 = x13794 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14561 = x14559 + x14560;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14562 = x13796 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14563 = x14561 + x14562;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14564 = x13797 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14565 = x14563 + x14564;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14566 = x13798 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14567 = x14565 + x14566;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14568 = x13799 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14569 = x14567 + x14568;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14570 = x13801 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14571 = x14569 + x14570;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14572 = x13802 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14573 = x14571 + x14572;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14574 = x13803 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14575 = x14573 + x14574;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14576 = x13804 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14577 = x14575 + x14576;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14578 = x13806 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14579 = x14577 + x14578;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14580 = x13807 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14581 = x14579 + x14580;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14582 = x13808 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14583 = x14581 + x14582;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14584 = x13809 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14585 = x14583 + x14584;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14586 = x13811 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14587 = x14585 + x14586;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14588 = x13812 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14589 = x14587 + x14588;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14590 = x13813 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14591 = x14589 + x14590;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14592 = x13814 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14593 = x14591 + x14592;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14594 = x13816 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14595 = x14593 + x14594;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14596 = x13817 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14597 = x14595 + x14596;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14598 = x13818 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14599 = x14597 + x14598;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14600 = x13819 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14601 = x14599 + x14600;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14602 = x13821 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14603 = x14601 + x14602;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14604 = x13822 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14605 = x14603 + x14604;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14606 = x13791 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14607 = x13792 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14608 = x14606 + x14607;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14609 = x13793 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14610 = x14608 + x14609;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14611 = x13794 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14612 = x14610 + x14611;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14613 = x13796 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14614 = x14612 + x14613;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14615 = x13797 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14616 = x14614 + x14615;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14617 = x13798 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14618 = x14616 + x14617;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14619 = x13799 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14620 = x14618 + x14619;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14621 = x13801 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14622 = x14620 + x14621;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14623 = x13802 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14624 = x14622 + x14623;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14625 = x13803 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14626 = x14624 + x14625;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14627 = x13804 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14628 = x14626 + x14627;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14629 = x13806 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14630 = x14628 + x14629;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14631 = x13807 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14632 = x14630 + x14631;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14633 = x13808 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14634 = x14632 + x14633;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14635 = x13809 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14636 = x14634 + x14635;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14637 = x13811 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14638 = x14636 + x14637;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14639 = x13812 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14640 = x14638 + x14639;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14641 = x13813 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14642 = x14640 + x14641;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14643 = x13814 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14644 = x14642 + x14643;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14645 = x13816 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14646 = x14644 + x14645;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14647 = x13817 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14648 = x14646 + x14647;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14649 = x13818 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14650 = x14648 + x14649;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14651 = x13819 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14652 = x14650 + x14651;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14653 = x13821 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14654 = x14652 + x14653;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14655 = x13822 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14656 = x14654 + x14655;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14657 = x13823 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14658 = x14656 + x14657;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14659 = x13791 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14660 = x13792 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14661 = x14659 + x14660;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14662 = x13793 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14663 = x14661 + x14662;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14664 = x13794 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14665 = x14663 + x14664;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14666 = x13796 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14667 = x14665 + x14666;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14668 = x13797 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14669 = x14667 + x14668;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14670 = x13798 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14671 = x14669 + x14670;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14672 = x13799 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14673 = x14671 + x14672;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14674 = x13801 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14675 = x14673 + x14674;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14676 = x13802 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14677 = x14675 + x14676;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14678 = x13803 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14679 = x14677 + x14678;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14680 = x13804 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14681 = x14679 + x14680;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14682 = x13806 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14683 = x14681 + x14682;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14684 = x13807 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14685 = x14683 + x14684;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14686 = x13808 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14687 = x14685 + x14686;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14688 = x13809 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14689 = x14687 + x14688;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14690 = x13811 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14691 = x14689 + x14690;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14692 = x13812 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14693 = x14691 + x14692;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14694 = x13813 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14695 = x14693 + x14694;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14696 = x13814 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14697 = x14695 + x14696;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14698 = x13816 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14699 = x14697 + x14698;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14700 = x13817 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14701 = x14699 + x14700;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14702 = x13818 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14703 = x14701 + x14702;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14704 = x13819 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14705 = x14703 + x14704;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14706 = x13821 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14707 = x14705 + x14706;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14708 = x13822 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14709 = x14707 + x14708;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14710 = x13823 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14711 = x14709 + x14710;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14712 = x13824 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14713 = x14711 + x14712;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14714 = x13791 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14715 = x13792 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14716 = x14714 + x14715;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14717 = x13793 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14718 = x14716 + x14717;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14719 = x13794 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14720 = x14718 + x14719;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14721 = x13796 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14722 = x14720 + x14721;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14723 = x13797 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14724 = x14722 + x14723;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14725 = x13798 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14726 = x14724 + x14725;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14727 = x13799 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14728 = x14726 + x14727;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14729 = x13801 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14730 = x14728 + x14729;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14731 = x13802 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14732 = x14730 + x14731;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14733 = x13803 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14734 = x14732 + x14733;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14735 = x13804 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14736 = x14734 + x14735;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14737 = x13806 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14738 = x14736 + x14737;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14739 = x13807 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14740 = x14738 + x14739;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14741 = x13808 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14742 = x14740 + x14741;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14743 = x13809 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14744 = x14742 + x14743;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14745 = x13811 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14746 = x14744 + x14745;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14747 = x13812 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14748 = x14746 + x14747;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14749 = x13813 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14750 = x14748 + x14749;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14751 = x13814 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14752 = x14750 + x14751;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14753 = x13816 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14754 = x14752 + x14753;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14755 = x13817 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14756 = x14754 + x14755;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14757 = x13818 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14758 = x14756 + x14757;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14759 = x13819 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14760 = x14758 + x14759;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14761 = x13821 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14762 = x14760 + x14761;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14763 = x13822 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14764 = x14762 + x14763;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14765 = x13823 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14766 = x14764 + x14765;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14767 = x13824 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14768 = x14766 + x14767;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14769 = x13826 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14770 = x14768 + x14769;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14771 = x13791 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14772 = x13792 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14773 = x14771 + x14772;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14774 = x13793 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14775 = x14773 + x14774;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14776 = x13794 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14777 = x14775 + x14776;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14778 = x13796 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14779 = x14777 + x14778;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14780 = x13797 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14781 = x14779 + x14780;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14782 = x13798 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14783 = x14781 + x14782;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14784 = x13799 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14785 = x14783 + x14784;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14786 = x13801 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14787 = x14785 + x14786;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14788 = x13802 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14789 = x14787 + x14788;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14790 = x13803 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14791 = x14789 + x14790;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14792 = x13804 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14793 = x14791 + x14792;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14794 = x13806 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14795 = x14793 + x14794;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14796 = x13807 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14797 = x14795 + x14796;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14798 = x13808 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14799 = x14797 + x14798;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14800 = x13809 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14801 = x14799 + x14800;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14802 = x13811 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14803 = x14801 + x14802;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14804 = x13812 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14805 = x14803 + x14804;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14806 = x13813 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14807 = x14805 + x14806;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14808 = x13814 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14809 = x14807 + x14808;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14810 = x13816 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14811 = x14809 + x14810;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14812 = x13817 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14813 = x14811 + x14812;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14814 = x13818 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14815 = x14813 + x14814;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14816 = x13819 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14817 = x14815 + x14816;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14818 = x13821 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14819 = x14817 + x14818;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14820 = x13822 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14821 = x14819 + x14820;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14822 = x13823 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14823 = x14821 + x14822;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14824 = x13824 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14825 = x14823 + x14824;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14826 = x13826 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14827 = x14825 + x14826;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14828 = x13827 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14829 = x14827 + x14828;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14830 = x13791 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14831 = x13792 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14832 = x14830 + x14831;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14833 = x13793 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14834 = x14832 + x14833;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14835 = x13794 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14836 = x14834 + x14835;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14837 = x13796 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14838 = x14836 + x14837;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14839 = x13797 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14840 = x14838 + x14839;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14841 = x13798 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14842 = x14840 + x14841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14843 = x13799 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14844 = x14842 + x14843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14845 = x13801 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14846 = x14844 + x14845;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14847 = x13802 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14848 = x14846 + x14847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14849 = x13803 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14850 = x14848 + x14849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14851 = x13804 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14852 = x14850 + x14851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14853 = x13806 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14854 = x14852 + x14853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14855 = x13807 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14856 = x14854 + x14855;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14857 = x13808 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14858 = x14856 + x14857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14859 = x13809 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14860 = x14858 + x14859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14861 = x13811 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14862 = x14860 + x14861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14863 = x13812 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14864 = x14862 + x14863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14865 = x13813 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14866 = x14864 + x14865;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14867 = x13814 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14868 = x14866 + x14867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14869 = x13816 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14870 = x14868 + x14869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14871 = x13817 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14872 = x14870 + x14871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14873 = x13818 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14874 = x14872 + x14873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14875 = x13819 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14876 = x14874 + x14875;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14877 = x13821 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14878 = x14876 + x14877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14879 = x13822 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14880 = x14878 + x14879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14881 = x13823 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14882 = x14880 + x14881;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14883 = x13824 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14884 = x14882 + x14883;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14885 = x13826 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14886 = x14884 + x14885;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14887 = x13827 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14888 = x14886 + x14887;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14889 = x13828 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14890 = x14888 + x14889;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14891 = x13791 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14892 = x13792 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14893 = x14891 + x14892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14894 = x13793 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14895 = x14893 + x14894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14896 = x13794 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14897 = x14895 + x14896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14898 = x13796 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14899 = x14897 + x14898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14900 = x13797 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14901 = x14899 + x14900;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14902 = x13798 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14903 = x14901 + x14902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14904 = x13799 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14905 = x14903 + x14904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14906 = x13801 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14907 = x14905 + x14906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14908 = x13802 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14909 = x14907 + x14908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14910 = x13803 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14911 = x14909 + x14910;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14912 = x13804 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14913 = x14911 + x14912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14914 = x13806 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14915 = x14913 + x14914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14916 = x13807 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14917 = x14915 + x14916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14918 = x13808 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14919 = x14917 + x14918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14920 = x13809 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14921 = x14919 + x14920;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14922 = x13811 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14923 = x14921 + x14922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14924 = x13812 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14925 = x14923 + x14924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14926 = x13813 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14927 = x14925 + x14926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14928 = x13814 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14929 = x14927 + x14928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14930 = x13816 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14931 = x14929 + x14930;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14932 = x13817 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14933 = x14931 + x14932;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14934 = x13818 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14935 = x14933 + x14934;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14936 = x13819 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14937 = x14935 + x14936;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14938 = x13821 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14939 = x14937 + x14938;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14940 = x13822 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14941 = x14939 + x14940;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14942 = x13823 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14943 = x14941 + x14942;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14944 = x13824 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14945 = x14943 + x14944;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14946 = x13826 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14947 = x14945 + x14946;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14948 = x13827 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14949 = x14947 + x14948;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14950 = x13828 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14951 = x14949 + x14950;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14952 = x13829 * x13841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14953 = x14951 + x14952;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14954 = x13792 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14955 = x13793 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14956 = x14954 + x14955;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14957 = x13794 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14958 = x14956 + x14957;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14959 = x13796 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14960 = x14958 + x14959;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14961 = x13797 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14962 = x14960 + x14961;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14963 = x13798 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14964 = x14962 + x14963;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14965 = x13799 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14966 = x14964 + x14965;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14967 = x13801 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14968 = x14966 + x14967;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14969 = x13802 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14970 = x14968 + x14969;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14971 = x13803 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14972 = x14970 + x14971;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14973 = x13804 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14974 = x14972 + x14973;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14975 = x13806 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14976 = x14974 + x14975;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14977 = x13807 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14978 = x14976 + x14977;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14979 = x13808 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14980 = x14978 + x14979;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14981 = x13809 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14982 = x14980 + x14981;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14983 = x13811 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14984 = x14982 + x14983;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14985 = x13812 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14986 = x14984 + x14985;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14987 = x13813 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14988 = x14986 + x14987;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14989 = x13814 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14990 = x14988 + x14989;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14991 = x13816 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14992 = x14990 + x14991;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14993 = x13817 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14994 = x14992 + x14993;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14995 = x13818 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14996 = x14994 + x14995;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14997 = x13819 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14998 = x14996 + x14997;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x14999 = x13821 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15000 = x14998 + x14999;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15001 = x13822 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15002 = x15000 + x15001;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15003 = x13823 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15004 = x15002 + x15003;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15005 = x13824 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15006 = x15004 + x15005;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15007 = x13826 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15008 = x15006 + x15007;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15009 = x13827 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15010 = x15008 + x15009;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15011 = x13828 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15012 = x15010 + x15011;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15013 = x13829 * x13842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15014 = x15012 + x15013;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15015 = x13793 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15016 = x13794 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15017 = x15015 + x15016;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15018 = x13796 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15019 = x15017 + x15018;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15020 = x13797 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15021 = x15019 + x15020;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15022 = x13798 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15023 = x15021 + x15022;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15024 = x13799 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15025 = x15023 + x15024;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15026 = x13801 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15027 = x15025 + x15026;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15028 = x13802 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15029 = x15027 + x15028;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15030 = x13803 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15031 = x15029 + x15030;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15032 = x13804 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15033 = x15031 + x15032;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15034 = x13806 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15035 = x15033 + x15034;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15036 = x13807 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15037 = x15035 + x15036;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15038 = x13808 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15039 = x15037 + x15038;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15040 = x13809 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15041 = x15039 + x15040;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15042 = x13811 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15043 = x15041 + x15042;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15044 = x13812 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15045 = x15043 + x15044;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15046 = x13813 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15047 = x15045 + x15046;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15048 = x13814 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15049 = x15047 + x15048;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15050 = x13816 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15051 = x15049 + x15050;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15052 = x13817 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15053 = x15051 + x15052;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15054 = x13818 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15055 = x15053 + x15054;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15056 = x13819 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15057 = x15055 + x15056;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15058 = x13821 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15059 = x15057 + x15058;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15060 = x13822 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15061 = x15059 + x15060;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15062 = x13823 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15063 = x15061 + x15062;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15064 = x13824 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15065 = x15063 + x15064;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15066 = x13826 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15067 = x15065 + x15066;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15068 = x13827 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15069 = x15067 + x15068;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15070 = x13828 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15071 = x15069 + x15070;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15072 = x13829 * x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15073 = x15071 + x15072;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15074 = x13794 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15075 = x13796 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15076 = x15074 + x15075;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15077 = x13797 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15078 = x15076 + x15077;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15079 = x13798 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15080 = x15078 + x15079;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15081 = x13799 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15082 = x15080 + x15081;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15083 = x13801 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15084 = x15082 + x15083;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15085 = x13802 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15086 = x15084 + x15085;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15087 = x13803 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15088 = x15086 + x15087;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15089 = x13804 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15090 = x15088 + x15089;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15091 = x13806 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15092 = x15090 + x15091;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15093 = x13807 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15094 = x15092 + x15093;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15095 = x13808 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15096 = x15094 + x15095;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15097 = x13809 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15098 = x15096 + x15097;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15099 = x13811 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15100 = x15098 + x15099;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15101 = x13812 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15102 = x15100 + x15101;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15103 = x13813 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15104 = x15102 + x15103;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15105 = x13814 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15106 = x15104 + x15105;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15107 = x13816 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15108 = x15106 + x15107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15109 = x13817 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15110 = x15108 + x15109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15111 = x13818 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15112 = x15110 + x15111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15113 = x13819 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15114 = x15112 + x15113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15115 = x13821 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15116 = x15114 + x15115;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15117 = x13822 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15118 = x15116 + x15117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15119 = x13823 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15120 = x15118 + x15119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15121 = x13824 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15122 = x15120 + x15121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15123 = x13826 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15124 = x15122 + x15123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15125 = x13827 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15126 = x15124 + x15125;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15127 = x13828 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15128 = x15126 + x15127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15129 = x13829 * x13844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15130 = x15128 + x15129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15131 = x13796 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15132 = x13797 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15133 = x15131 + x15132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15134 = x13798 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15135 = x15133 + x15134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15136 = x13799 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15137 = x15135 + x15136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15138 = x13801 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15139 = x15137 + x15138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15140 = x13802 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15141 = x15139 + x15140;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15142 = x13803 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15143 = x15141 + x15142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15144 = x13804 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15145 = x15143 + x15144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15146 = x13806 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15147 = x15145 + x15146;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15148 = x13807 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15149 = x15147 + x15148;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15150 = x13808 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15151 = x15149 + x15150;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15152 = x13809 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15153 = x15151 + x15152;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15154 = x13811 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15155 = x15153 + x15154;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15156 = x13812 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15157 = x15155 + x15156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15158 = x13813 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15159 = x15157 + x15158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15160 = x13814 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15161 = x15159 + x15160;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15162 = x13816 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15163 = x15161 + x15162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15164 = x13817 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15165 = x15163 + x15164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15166 = x13818 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15167 = x15165 + x15166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15168 = x13819 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15169 = x15167 + x15168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15170 = x13821 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15171 = x15169 + x15170;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15172 = x13822 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15173 = x15171 + x15172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15174 = x13823 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15175 = x15173 + x15174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15176 = x13824 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15177 = x15175 + x15176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15178 = x13826 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15179 = x15177 + x15178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15180 = x13827 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15181 = x15179 + x15180;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15182 = x13828 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15183 = x15181 + x15182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15184 = x13829 * x13846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15185 = x15183 + x15184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15186 = x13797 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15187 = x13798 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15188 = x15186 + x15187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15189 = x13799 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15190 = x15188 + x15189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15191 = x13801 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15192 = x15190 + x15191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15193 = x13802 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15194 = x15192 + x15193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15195 = x13803 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15196 = x15194 + x15195;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15197 = x13804 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15198 = x15196 + x15197;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15199 = x13806 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15200 = x15198 + x15199;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15201 = x13807 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15202 = x15200 + x15201;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15203 = x13808 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15204 = x15202 + x15203;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15205 = x13809 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15206 = x15204 + x15205;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15207 = x13811 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15208 = x15206 + x15207;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15209 = x13812 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15210 = x15208 + x15209;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15211 = x13813 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15212 = x15210 + x15211;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15213 = x13814 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15214 = x15212 + x15213;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15215 = x13816 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15216 = x15214 + x15215;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15217 = x13817 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15218 = x15216 + x15217;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15219 = x13818 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15220 = x15218 + x15219;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15221 = x13819 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15222 = x15220 + x15221;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15223 = x13821 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15224 = x15222 + x15223;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15225 = x13822 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15226 = x15224 + x15225;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15227 = x13823 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15228 = x15226 + x15227;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15229 = x13824 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15230 = x15228 + x15229;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15231 = x13826 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15232 = x15230 + x15231;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15233 = x13827 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15234 = x15232 + x15233;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15235 = x13828 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15236 = x15234 + x15235;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15237 = x13829 * x13847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15238 = x15236 + x15237;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15239 = x13798 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15240 = x13799 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15241 = x15239 + x15240;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15242 = x13801 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15243 = x15241 + x15242;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15244 = x13802 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15245 = x15243 + x15244;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15246 = x13803 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15247 = x15245 + x15246;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15248 = x13804 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15249 = x15247 + x15248;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15250 = x13806 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15251 = x15249 + x15250;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15252 = x13807 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15253 = x15251 + x15252;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15254 = x13808 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15255 = x15253 + x15254;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15256 = x13809 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15257 = x15255 + x15256;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15258 = x13811 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15259 = x15257 + x15258;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15260 = x13812 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15261 = x15259 + x15260;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15262 = x13813 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15263 = x15261 + x15262;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15264 = x13814 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15265 = x15263 + x15264;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15266 = x13816 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15267 = x15265 + x15266;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15268 = x13817 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15269 = x15267 + x15268;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15270 = x13818 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15271 = x15269 + x15270;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15272 = x13819 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15273 = x15271 + x15272;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15274 = x13821 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15275 = x15273 + x15274;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15276 = x13822 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15277 = x15275 + x15276;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15278 = x13823 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15279 = x15277 + x15278;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15280 = x13824 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15281 = x15279 + x15280;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15282 = x13826 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15283 = x15281 + x15282;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15284 = x13827 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15285 = x15283 + x15284;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15286 = x13828 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15287 = x15285 + x15286;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15288 = x13829 * x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15289 = x15287 + x15288;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15290 = x13799 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15291 = x13801 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15292 = x15290 + x15291;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15293 = x13802 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15294 = x15292 + x15293;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15295 = x13803 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15296 = x15294 + x15295;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15297 = x13804 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15298 = x15296 + x15297;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15299 = x13806 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15300 = x15298 + x15299;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15301 = x13807 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15302 = x15300 + x15301;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15303 = x13808 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15304 = x15302 + x15303;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15305 = x13809 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15306 = x15304 + x15305;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15307 = x13811 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15308 = x15306 + x15307;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15309 = x13812 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15310 = x15308 + x15309;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15311 = x13813 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15312 = x15310 + x15311;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15313 = x13814 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15314 = x15312 + x15313;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15315 = x13816 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15316 = x15314 + x15315;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15317 = x13817 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15318 = x15316 + x15317;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15319 = x13818 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15320 = x15318 + x15319;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15321 = x13819 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15322 = x15320 + x15321;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15323 = x13821 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15324 = x15322 + x15323;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15325 = x13822 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15326 = x15324 + x15325;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15327 = x13823 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15328 = x15326 + x15327;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15329 = x13824 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15330 = x15328 + x15329;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15331 = x13826 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15332 = x15330 + x15331;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15333 = x13827 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15334 = x15332 + x15333;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15335 = x13828 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15336 = x15334 + x15335;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15337 = x13829 * x13849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15338 = x15336 + x15337;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15339 = x13801 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15340 = x13802 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15341 = x15339 + x15340;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15342 = x13803 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15343 = x15341 + x15342;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15344 = x13804 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15345 = x15343 + x15344;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15346 = x13806 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15347 = x15345 + x15346;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15348 = x13807 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15349 = x15347 + x15348;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15350 = x13808 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15351 = x15349 + x15350;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15352 = x13809 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15353 = x15351 + x15352;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15354 = x13811 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15355 = x15353 + x15354;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15356 = x13812 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15357 = x15355 + x15356;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15358 = x13813 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15359 = x15357 + x15358;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15360 = x13814 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15361 = x15359 + x15360;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15362 = x13816 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15363 = x15361 + x15362;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15364 = x13817 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15365 = x15363 + x15364;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15366 = x13818 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15367 = x15365 + x15366;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15368 = x13819 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15369 = x15367 + x15368;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15370 = x13821 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15371 = x15369 + x15370;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15372 = x13822 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15373 = x15371 + x15372;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15374 = x13823 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15375 = x15373 + x15374;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15376 = x13824 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15377 = x15375 + x15376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15378 = x13826 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15379 = x15377 + x15378;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15380 = x13827 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15381 = x15379 + x15380;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15382 = x13828 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15383 = x15381 + x15382;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15384 = x13829 * x13851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15385 = x15383 + x15384;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15386 = x13802 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15387 = x13803 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15388 = x15386 + x15387;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15389 = x13804 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15390 = x15388 + x15389;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15391 = x13806 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15392 = x15390 + x15391;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15393 = x13807 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15394 = x15392 + x15393;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15395 = x13808 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15396 = x15394 + x15395;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15397 = x13809 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15398 = x15396 + x15397;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15399 = x13811 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15400 = x15398 + x15399;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15401 = x13812 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15402 = x15400 + x15401;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15403 = x13813 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15404 = x15402 + x15403;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15405 = x13814 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15406 = x15404 + x15405;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15407 = x13816 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15408 = x15406 + x15407;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15409 = x13817 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15410 = x15408 + x15409;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15411 = x13818 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15412 = x15410 + x15411;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15413 = x13819 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15414 = x15412 + x15413;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15415 = x13821 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15416 = x15414 + x15415;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15417 = x13822 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15418 = x15416 + x15417;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15419 = x13823 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15420 = x15418 + x15419;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15421 = x13824 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15422 = x15420 + x15421;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15423 = x13826 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15424 = x15422 + x15423;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15425 = x13827 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15426 = x15424 + x15425;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15427 = x13828 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15428 = x15426 + x15427;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15429 = x13829 * x13852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15430 = x15428 + x15429;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15431 = x13803 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15432 = x13804 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15433 = x15431 + x15432;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15434 = x13806 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15435 = x15433 + x15434;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15436 = x13807 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15437 = x15435 + x15436;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15438 = x13808 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15439 = x15437 + x15438;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15440 = x13809 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15441 = x15439 + x15440;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15442 = x13811 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15443 = x15441 + x15442;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15444 = x13812 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15445 = x15443 + x15444;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15446 = x13813 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15447 = x15445 + x15446;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15448 = x13814 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15449 = x15447 + x15448;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15450 = x13816 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15451 = x15449 + x15450;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15452 = x13817 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15453 = x15451 + x15452;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15454 = x13818 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15455 = x15453 + x15454;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15456 = x13819 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15457 = x15455 + x15456;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15458 = x13821 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15459 = x15457 + x15458;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15460 = x13822 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15461 = x15459 + x15460;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15462 = x13823 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15463 = x15461 + x15462;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15464 = x13824 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15465 = x15463 + x15464;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15466 = x13826 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15467 = x15465 + x15466;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15468 = x13827 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15469 = x15467 + x15468;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15470 = x13828 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15471 = x15469 + x15470;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15472 = x13829 * x13853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15473 = x15471 + x15472;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15474 = x13804 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15475 = x13806 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15476 = x15474 + x15475;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15477 = x13807 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15478 = x15476 + x15477;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15479 = x13808 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15480 = x15478 + x15479;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15481 = x13809 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15482 = x15480 + x15481;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15483 = x13811 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15484 = x15482 + x15483;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15485 = x13812 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15486 = x15484 + x15485;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15487 = x13813 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15488 = x15486 + x15487;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15489 = x13814 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15490 = x15488 + x15489;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15491 = x13816 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15492 = x15490 + x15491;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15493 = x13817 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15494 = x15492 + x15493;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15495 = x13818 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15496 = x15494 + x15495;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15497 = x13819 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15498 = x15496 + x15497;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15499 = x13821 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15500 = x15498 + x15499;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15501 = x13822 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15502 = x15500 + x15501;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15503 = x13823 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15504 = x15502 + x15503;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15505 = x13824 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15506 = x15504 + x15505;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15507 = x13826 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15508 = x15506 + x15507;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15509 = x13827 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15510 = x15508 + x15509;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15511 = x13828 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15512 = x15510 + x15511;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15513 = x13829 * x13854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15514 = x15512 + x15513;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15515 = x13806 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15516 = x13807 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15517 = x15515 + x15516;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15518 = x13808 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15519 = x15517 + x15518;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15520 = x13809 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15521 = x15519 + x15520;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15522 = x13811 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15523 = x15521 + x15522;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15524 = x13812 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15525 = x15523 + x15524;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15526 = x13813 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15527 = x15525 + x15526;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15528 = x13814 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15529 = x15527 + x15528;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15530 = x13816 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15531 = x15529 + x15530;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15532 = x13817 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15533 = x15531 + x15532;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15534 = x13818 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15535 = x15533 + x15534;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15536 = x13819 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15537 = x15535 + x15536;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15538 = x13821 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15539 = x15537 + x15538;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15540 = x13822 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15541 = x15539 + x15540;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15542 = x13823 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15543 = x15541 + x15542;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15544 = x13824 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15545 = x15543 + x15544;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15546 = x13826 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15547 = x15545 + x15546;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15548 = x13827 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15549 = x15547 + x15548;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15550 = x13828 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15551 = x15549 + x15550;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15552 = x13829 * x13856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15553 = x15551 + x15552;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15554 = x13807 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15555 = x13808 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15556 = x15554 + x15555;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15557 = x13809 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15558 = x15556 + x15557;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15559 = x13811 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15560 = x15558 + x15559;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15561 = x13812 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15562 = x15560 + x15561;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15563 = x13813 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15564 = x15562 + x15563;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15565 = x13814 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15566 = x15564 + x15565;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15567 = x13816 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15568 = x15566 + x15567;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15569 = x13817 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15570 = x15568 + x15569;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15571 = x13818 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15572 = x15570 + x15571;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15573 = x13819 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15574 = x15572 + x15573;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15575 = x13821 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15576 = x15574 + x15575;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15577 = x13822 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15578 = x15576 + x15577;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15579 = x13823 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15580 = x15578 + x15579;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15581 = x13824 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15582 = x15580 + x15581;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15583 = x13826 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15584 = x15582 + x15583;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15585 = x13827 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15586 = x15584 + x15585;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15587 = x13828 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15588 = x15586 + x15587;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15589 = x13829 * x13857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15590 = x15588 + x15589;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15591 = x13808 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15592 = x13809 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15593 = x15591 + x15592;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15594 = x13811 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15595 = x15593 + x15594;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15596 = x13812 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15597 = x15595 + x15596;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15598 = x13813 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15599 = x15597 + x15598;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15600 = x13814 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15601 = x15599 + x15600;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15602 = x13816 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15603 = x15601 + x15602;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15604 = x13817 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15605 = x15603 + x15604;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15606 = x13818 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15607 = x15605 + x15606;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15608 = x13819 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15609 = x15607 + x15608;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15610 = x13821 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15611 = x15609 + x15610;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15612 = x13822 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15613 = x15611 + x15612;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15614 = x13823 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15615 = x15613 + x15614;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15616 = x13824 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15617 = x15615 + x15616;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15618 = x13826 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15619 = x15617 + x15618;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15620 = x13827 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15621 = x15619 + x15620;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15622 = x13828 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15623 = x15621 + x15622;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15624 = x13829 * x13858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15625 = x15623 + x15624;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15626 = x13809 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15627 = x13811 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15628 = x15626 + x15627;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15629 = x13812 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15630 = x15628 + x15629;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15631 = x13813 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15632 = x15630 + x15631;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15633 = x13814 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15634 = x15632 + x15633;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15635 = x13816 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15636 = x15634 + x15635;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15637 = x13817 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15638 = x15636 + x15637;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15639 = x13818 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15640 = x15638 + x15639;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15641 = x13819 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15642 = x15640 + x15641;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15643 = x13821 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15644 = x15642 + x15643;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15645 = x13822 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15646 = x15644 + x15645;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15647 = x13823 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15648 = x15646 + x15647;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15649 = x13824 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15650 = x15648 + x15649;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15651 = x13826 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15652 = x15650 + x15651;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15653 = x13827 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15654 = x15652 + x15653;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15655 = x13828 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15656 = x15654 + x15655;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15657 = x13829 * x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15658 = x15656 + x15657;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15659 = x13811 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15660 = x13812 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15661 = x15659 + x15660;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15662 = x13813 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15663 = x15661 + x15662;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15664 = x13814 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15665 = x15663 + x15664;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15666 = x13816 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15667 = x15665 + x15666;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15668 = x13817 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15669 = x15667 + x15668;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15670 = x13818 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15671 = x15669 + x15670;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15672 = x13819 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15673 = x15671 + x15672;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15674 = x13821 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15675 = x15673 + x15674;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15676 = x13822 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15677 = x15675 + x15676;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15678 = x13823 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15679 = x15677 + x15678;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15680 = x13824 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15681 = x15679 + x15680;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15682 = x13826 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15683 = x15681 + x15682;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15684 = x13827 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15685 = x15683 + x15684;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15686 = x13828 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15687 = x15685 + x15686;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15688 = x13829 * x13861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15689 = x15687 + x15688;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15690 = x13812 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15691 = x13813 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15692 = x15690 + x15691;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15693 = x13814 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15694 = x15692 + x15693;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15695 = x13816 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15696 = x15694 + x15695;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15697 = x13817 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15698 = x15696 + x15697;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15699 = x13818 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15700 = x15698 + x15699;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15701 = x13819 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15702 = x15700 + x15701;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15703 = x13821 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15704 = x15702 + x15703;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15705 = x13822 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15706 = x15704 + x15705;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15707 = x13823 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15708 = x15706 + x15707;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15709 = x13824 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15710 = x15708 + x15709;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15711 = x13826 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15712 = x15710 + x15711;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15713 = x13827 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15714 = x15712 + x15713;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15715 = x13828 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15716 = x15714 + x15715;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15717 = x13829 * x13862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15718 = x15716 + x15717;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15719 = x13813 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15720 = x13814 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15721 = x15719 + x15720;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15722 = x13816 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15723 = x15721 + x15722;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15724 = x13817 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15725 = x15723 + x15724;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15726 = x13818 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15727 = x15725 + x15726;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15728 = x13819 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15729 = x15727 + x15728;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15730 = x13821 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15731 = x15729 + x15730;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15732 = x13822 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15733 = x15731 + x15732;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15734 = x13823 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15735 = x15733 + x15734;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15736 = x13824 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15737 = x15735 + x15736;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15738 = x13826 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15739 = x15737 + x15738;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15740 = x13827 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15741 = x15739 + x15740;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15742 = x13828 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15743 = x15741 + x15742;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15744 = x13829 * x13863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15745 = x15743 + x15744;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15746 = x13814 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15747 = x13816 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15748 = x15746 + x15747;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15749 = x13817 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15750 = x15748 + x15749;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15751 = x13818 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15752 = x15750 + x15751;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15753 = x13819 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15754 = x15752 + x15753;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15755 = x13821 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15756 = x15754 + x15755;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15757 = x13822 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15758 = x15756 + x15757;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15759 = x13823 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15760 = x15758 + x15759;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15761 = x13824 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15762 = x15760 + x15761;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15763 = x13826 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15764 = x15762 + x15763;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15765 = x13827 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15766 = x15764 + x15765;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15767 = x13828 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15768 = x15766 + x15767;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15769 = x13829 * x13864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15770 = x15768 + x15769;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15771 = x13816 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15772 = x13817 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15773 = x15771 + x15772;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15774 = x13818 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15775 = x15773 + x15774;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15776 = x13819 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15777 = x15775 + x15776;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15778 = x13821 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15779 = x15777 + x15778;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15780 = x13822 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15781 = x15779 + x15780;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15782 = x13823 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15783 = x15781 + x15782;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15784 = x13824 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15785 = x15783 + x15784;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15786 = x13826 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15787 = x15785 + x15786;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15788 = x13827 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15789 = x15787 + x15788;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15790 = x13828 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15791 = x15789 + x15790;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15792 = x13829 * x13866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15793 = x15791 + x15792;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15794 = x13817 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15795 = x13818 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15796 = x15794 + x15795;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15797 = x13819 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15798 = x15796 + x15797;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15799 = x13821 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15800 = x15798 + x15799;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15801 = x13822 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15802 = x15800 + x15801;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15803 = x13823 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15804 = x15802 + x15803;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15805 = x13824 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15806 = x15804 + x15805;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15807 = x13826 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15808 = x15806 + x15807;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15809 = x13827 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15810 = x15808 + x15809;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15811 = x13828 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15812 = x15810 + x15811;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15813 = x13829 * x13867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15814 = x15812 + x15813;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15815 = x13818 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15816 = x13819 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15817 = x15815 + x15816;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15818 = x13821 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15819 = x15817 + x15818;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15820 = x13822 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15821 = x15819 + x15820;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15822 = x13823 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15823 = x15821 + x15822;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15824 = x13824 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15825 = x15823 + x15824;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15826 = x13826 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15827 = x15825 + x15826;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15828 = x13827 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15829 = x15827 + x15828;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15830 = x13828 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15831 = x15829 + x15830;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15832 = x13829 * x13868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15833 = x15831 + x15832;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15834 = x13819 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15835 = x13821 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15836 = x15834 + x15835;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15837 = x13822 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15838 = x15836 + x15837;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15839 = x13823 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15840 = x15838 + x15839;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15841 = x13824 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15842 = x15840 + x15841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15843 = x13826 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15844 = x15842 + x15843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15845 = x13827 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15846 = x15844 + x15845;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15847 = x13828 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15848 = x15846 + x15847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15849 = x13829 * x13869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15850 = x15848 + x15849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15851 = x13821 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15852 = x13822 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15853 = x15851 + x15852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15854 = x13823 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15855 = x15853 + x15854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15856 = x13824 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15857 = x15855 + x15856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15858 = x13826 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15859 = x15857 + x15858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15860 = x13827 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15861 = x15859 + x15860;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15862 = x13828 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15863 = x15861 + x15862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15864 = x13829 * x13871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15865 = x15863 + x15864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15866 = x13822 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15867 = x13823 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15868 = x15866 + x15867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15869 = x13824 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15870 = x15868 + x15869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15871 = x13826 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15872 = x15870 + x15871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15873 = x13827 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15874 = x15872 + x15873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15875 = x13828 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15876 = x15874 + x15875;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15877 = x13829 * x13872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15878 = x15876 + x15877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15879 = x13823 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15880 = x13824 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15881 = x15879 + x15880;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15882 = x13826 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15883 = x15881 + x15882;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15884 = x13827 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15885 = x15883 + x15884;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15886 = x13828 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15887 = x15885 + x15886;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15888 = x13829 * x13873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15889 = x15887 + x15888;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15890 = x13824 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15891 = x13826 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15892 = x15890 + x15891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15893 = x13827 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15894 = x15892 + x15893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15895 = x13828 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15896 = x15894 + x15895;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15897 = x13829 * x13874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15898 = x15896 + x15897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15899 = x13826 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15900 = x13827 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15901 = x15899 + x15900;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15902 = x13828 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15903 = x15901 + x15902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15904 = x13829 * x13876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15905 = x15903 + x15904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15906 = x13827 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15907 = x13828 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15908 = x15906 + x15907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15909 = x13829 * x13877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15910 = x15908 + x15909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15911 = x13828 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15912 = x13829 * x13878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15913 = x15911 + x15912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x15914 = x13829 * x13879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15915 = x13930 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15916 = Fp(x15915.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15917 = x15915 - x15916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15918 = x15917 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15919 = x15918 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15920 = x13933 + x15919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15921 = x15920 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15922 = Fp(x15921.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15923 = x15921 - x15922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15924 = x15923 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15925 = x15924 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15926 = x13938 + x15925;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15927 = x15926 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15928 = Fp(x15927.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15929 = x15927 - x15928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15930 = x15929 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15931 = x15930 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15932 = x13945 + x15931;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15933 = x15932 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15934 = Fp(x15933.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15935 = x15933 - x15934;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15936 = x15935 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15937 = x15936 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15938 = x13954 + x15937;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15939 = x15938 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15940 = Fp(x15939.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15941 = x15939 - x15940;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15942 = x15941 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15943 = x15942 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15944 = x13965 + x15943;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15945 = x15944 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15946 = Fp(x15945.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15947 = x15945 - x15946;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15948 = x15947 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15949 = x15948 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15950 = x13978 + x15949;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15951 = x15950 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15952 = Fp(x15951.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15953 = x15951 - x15952;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15954 = x15953 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15955 = x15954 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15956 = x13993 + x15955;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15957 = x15956 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15958 = Fp(x15957.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15959 = x15957 - x15958;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15960 = x15959 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15961 = x15960 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15962 = x14010 + x15961;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15963 = x15962 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15964 = Fp(x15963.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15965 = x15963 - x15964;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15966 = x15965 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15967 = x15966 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15968 = x14029 + x15967;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15969 = x15968 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15970 = Fp(x15969.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15971 = x15969 - x15970;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15972 = x15971 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15973 = x15972 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15974 = x14050 + x15973;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15975 = x15974 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15976 = Fp(x15975.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15977 = x15975 - x15976;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15978 = x15977 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15979 = x15978 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15980 = x14073 + x15979;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15981 = x15980 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15982 = Fp(x15981.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15983 = x15981 - x15982;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15984 = x15983 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15985 = x15984 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15986 = x14098 + x15985;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15987 = x15986 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15988 = Fp(x15987.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15989 = x15987 - x15988;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15990 = x15989 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15991 = x15990 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15992 = x14125 + x15991;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15993 = x15992 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x15994 = Fp(x15993.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15995 = x15993 - x15994;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15996 = x15995 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x15997 = x15996 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15998 = x14154 + x15997;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x15999 = x15998 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16000 = Fp(x15999.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16001 = x15999 - x16000;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16002 = x16001 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16003 = x16002 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16004 = x14185 + x16003;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16005 = x16004 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16006 = Fp(x16005.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16007 = x16005 - x16006;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16008 = x16007 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16009 = x16008 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16010 = x14218 + x16009;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16011 = x16010 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16012 = Fp(x16011.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16013 = x16011 - x16012;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16014 = x16013 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16015 = x16014 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16016 = x14253 + x16015;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16017 = x16016 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16018 = Fp(x16017.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16019 = x16017 - x16018;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16020 = x16019 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16021 = x16020 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16022 = x14290 + x16021;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16023 = x16022 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16024 = Fp(x16023.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16025 = x16023 - x16024;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16026 = x16025 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16027 = x16026 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16028 = x14329 + x16027;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16029 = x16028 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16030 = Fp(x16029.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16031 = x16029 - x16030;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16032 = x16031 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16033 = x16032 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16034 = x14370 + x16033;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16035 = x16034 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16036 = Fp(x16035.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16037 = x16035 - x16036;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16038 = x16037 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16039 = x16038 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16040 = x14413 + x16039;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16041 = x16040 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16042 = Fp(x16041.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16043 = x16041 - x16042;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16044 = x16043 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16045 = x16044 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16046 = x14458 + x16045;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16047 = x16046 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16048 = Fp(x16047.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16049 = x16047 - x16048;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16050 = x16049 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16051 = x16050 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16052 = x14505 + x16051;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16053 = x16052 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16054 = Fp(x16053.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16055 = x16053 - x16054;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16056 = x16055 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16057 = x16056 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16058 = x14554 + x16057;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16059 = x16058 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16060 = Fp(x16059.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16061 = x16059 - x16060;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16062 = x16061 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16063 = x16062 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16064 = x14605 + x16063;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16065 = x16064 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16066 = Fp(x16065.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16067 = x16065 - x16066;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16068 = x16067 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16069 = x16068 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16070 = x14658 + x16069;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16071 = x16070 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16072 = Fp(x16071.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16073 = x16071 - x16072;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16074 = x16073 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16075 = x16074 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16076 = x14713 + x16075;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16077 = x16076 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16078 = Fp(x16077.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16079 = x16077 - x16078;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16080 = x16079 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16081 = x16080 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16082 = x14770 + x16081;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16083 = x16082 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16084 = Fp(x16083.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16085 = x16083 - x16084;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16086 = x16085 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16087 = x16086 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16088 = x14829 + x16087;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16089 = x16088 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16090 = Fp(x16089.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16091 = x16089 - x16090;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16092 = x16091 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16093 = x16092 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16094 = x14890 + x16093;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16095 = x16094 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16096 = Fp(x16095.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16097 = x16095 - x16096;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16098 = x16097 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16099 = x16098 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16100 = x14953 + x16099;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16101 = x16100 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16102 = Fp(x16101.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16103 = x16101 - x16102;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16104 = x16103 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16105 = x16104 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16106 = x15014 + x16105;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16107 = x16106 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16108 = Fp(x16107.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16109 = x16107 - x16108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16110 = x16109 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16111 = x16110 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16112 = x15073 + x16111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16113 = x16112 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16114 = Fp(x16113.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16115 = x16113 - x16114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16116 = x16115 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16117 = x16116 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16118 = x15130 + x16117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16119 = x16118 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16120 = Fp(x16119.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16121 = x16119 - x16120;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16122 = x16121 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16123 = x16122 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16124 = x15185 + x16123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16125 = x16124 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16126 = Fp(x16125.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16127 = x16125 - x16126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16128 = x16127 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16129 = x16128 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16130 = x15238 + x16129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16131 = x16130 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16132 = Fp(x16131.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16133 = x16131 - x16132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16134 = x16133 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16135 = x16134 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16136 = x15289 + x16135;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16137 = x16136 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16138 = Fp(x16137.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16139 = x16137 - x16138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16140 = x16139 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16141 = x16140 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16142 = x15338 + x16141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16143 = x16142 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16144 = Fp(x16143.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16145 = x16143 - x16144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16146 = x16145 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16147 = x16146 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16148 = x15385 + x16147;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16149 = x16148 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16150 = Fp(x16149.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16151 = x16149 - x16150;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16152 = x16151 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16153 = x16152 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16154 = x15430 + x16153;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16155 = x16154 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16156 = Fp(x16155.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16157 = x16155 - x16156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16158 = x16157 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16159 = x16158 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16160 = x15473 + x16159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16161 = x16160 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16162 = Fp(x16161.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16163 = x16161 - x16162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16164 = x16163 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16165 = x16164 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16166 = x15514 + x16165;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16167 = x16166 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16168 = Fp(x16167.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16169 = x16167 - x16168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16170 = x16169 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16171 = x16170 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16172 = x15553 + x16171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16173 = x16172 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16174 = Fp(x16173.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16175 = x16173 - x16174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16176 = x16175 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16177 = x16176 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16178 = x15590 + x16177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16179 = x16178 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16180 = Fp(x16179.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16181 = x16179 - x16180;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16182 = x16181 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16183 = x16182 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16184 = x15625 + x16183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16185 = x16184 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16186 = Fp(x16185.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16187 = x16185 - x16186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16188 = x16187 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16189 = x16188 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16190 = x15658 + x16189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16191 = x16190 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16192 = Fp(x16191.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16193 = x16191 - x16192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16194 = x16193 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16195 = x16194 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16196 = x15689 + x16195;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16197 = x16196 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16198 = Fp(x16197.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16199 = x16197 - x16198;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16200 = x16199 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16201 = x16200 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16202 = x15718 + x16201;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16203 = x16202 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16204 = Fp(x16203.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16205 = x16203 - x16204;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16206 = x16205 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16207 = x16206 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16208 = x15745 + x16207;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16209 = x16208 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16210 = Fp(x16209.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16211 = x16209 - x16210;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16212 = x16211 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16213 = x16212 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16214 = x15770 + x16213;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16215 = x16214 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16216 = Fp(x16215.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16217 = x16215 - x16216;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16218 = x16217 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16219 = x16218 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16220 = x15793 + x16219;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16221 = x16220 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16222 = Fp(x16221.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16223 = x16221 - x16222;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16224 = x16223 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16225 = x16224 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16226 = x15814 + x16225;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16227 = x16226 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16228 = Fp(x16227.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16229 = x16227 - x16228;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16230 = x16229 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16231 = x16230 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16232 = x15833 + x16231;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16233 = x16232 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16234 = Fp(x16233.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16235 = x16233 - x16234;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16236 = x16235 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16237 = x16236 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16238 = x15850 + x16237;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16239 = x16238 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16240 = Fp(x16239.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16241 = x16239 - x16240;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16242 = x16241 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16243 = x16242 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16244 = x15865 + x16243;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16245 = x16244 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16246 = Fp(x16245.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16247 = x16245 - x16246;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16248 = x16247 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16249 = x16248 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16250 = x15878 + x16249;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16251 = x16250 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16252 = Fp(x16251.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16253 = x16251 - x16252;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16254 = x16253 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16255 = x16254 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16256 = x15889 + x16255;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16257 = x16256 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16258 = Fp(x16257.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16259 = x16257 - x16258;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16260 = x16259 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16261 = x16260 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16262 = x15898 + x16261;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16263 = x16262 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16264 = Fp(x16263.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16265 = x16263 - x16264;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16266 = x16265 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16267 = x16266 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16268 = x15905 + x16267;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16269 = x16268 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16270 = Fp(x16269.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16271 = x16269 - x16270;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16272 = x16271 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16273 = x16272 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16274 = x15910 + x16273;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16275 = x16274 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16276 = Fp(x16275.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16277 = x16275 - x16276;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16278 = x16277 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16279 = x16278 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16280 = x15913 + x16279;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16281 = x16280 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16282 = Fp(x16281.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16283 = x16281 - x16282;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16284 = x16283 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16285 = x16284 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16286 = x15914 + x16285;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x16287 = x16286 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x16288 = Fp(x16287.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16289 = x16287 - x16288;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16290 = x16289 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x16291 = x16290 - x12;
        auto [x16292, x16293, x16294, x16295, x16296, x16297, x16298, x16299, x16300, x16301, x16302, x16303, x16304, x16305, x16306, x16307, x16308, x16309, x16310, x16311, x16312, x16313, x16314, x16315, x16316, x16317, x16318, x16319, x16320, x16321, x16322, x16323] = extern_bigintQuotient(ctx, cycle, "", {x15916, x15922, x15928, x15934, x15940, x15946, x15952, x15958, x15964, x15970, x15976, x15982, x15988, x15994, x16000, x16006, x16012, x16018, x16024, x16030, x16036, x16042, x16048, x16054, x16060, x16066, x16072, x16078, x16084, x16090, x16096, x16102, x16108, x16114, x16120, x16126, x16132, x16138, x16144, x16150, x16156, x16162, x16168, x16174, x16180, x16186, x16192, x16198, x16204, x16210, x16216, x16222, x16228, x16234, x16240, x16246, x16252, x16258, x16264, x16270, x16276, x16282, x16288, x16291, x13891, x13892, x13893, x13894, x13896, x13897, x13898, x13899, x13901, x13902, x13903, x13904, x13906, x13907, x13908, x13909, x13911, x13912, x13913, x13914, x13916, x13917, x13918, x13919, x13921, x13922, x13923, x13924, x13926, x13927, x13928, x13929});
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16324 = x16292 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16325 = x16292 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16326 = x16293 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16327 = x16325 + x16326;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16328 = x16292 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16329 = x16293 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16330 = x16328 + x16329;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16331 = x16294 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16332 = x16330 + x16331;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16333 = x16292 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16334 = x16293 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16335 = x16333 + x16334;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16336 = x16294 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16337 = x16335 + x16336;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16338 = x16295 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16339 = x16337 + x16338;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16340 = x16292 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16341 = x16293 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16342 = x16340 + x16341;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16343 = x16294 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16344 = x16342 + x16343;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16345 = x16295 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16346 = x16344 + x16345;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16347 = x16296 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16348 = x16346 + x16347;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16349 = x16292 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16350 = x16293 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16351 = x16349 + x16350;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16352 = x16294 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16353 = x16351 + x16352;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16354 = x16295 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16355 = x16353 + x16354;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16356 = x16296 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16357 = x16355 + x16356;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16358 = x16297 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16359 = x16357 + x16358;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16360 = x16292 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16361 = x16293 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16362 = x16360 + x16361;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16363 = x16294 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16364 = x16362 + x16363;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16365 = x16295 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16366 = x16364 + x16365;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16367 = x16296 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16368 = x16366 + x16367;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16369 = x16297 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16370 = x16368 + x16369;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16371 = x16298 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16372 = x16370 + x16371;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16373 = x16292 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16374 = x16293 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16375 = x16373 + x16374;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16376 = x16294 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16377 = x16375 + x16376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16378 = x16295 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16379 = x16377 + x16378;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16380 = x16296 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16381 = x16379 + x16380;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16382 = x16297 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16383 = x16381 + x16382;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16384 = x16298 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16385 = x16383 + x16384;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16386 = x16299 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16387 = x16385 + x16386;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16388 = x16292 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16389 = x16293 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16390 = x16388 + x16389;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16391 = x16294 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16392 = x16390 + x16391;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16393 = x16295 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16394 = x16392 + x16393;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16395 = x16296 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16396 = x16394 + x16395;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16397 = x16297 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16398 = x16396 + x16397;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16399 = x16298 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16400 = x16398 + x16399;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16401 = x16299 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16402 = x16400 + x16401;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16403 = x16300 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16404 = x16402 + x16403;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16405 = x16292 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16406 = x16293 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16407 = x16405 + x16406;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16408 = x16294 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16409 = x16407 + x16408;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16410 = x16295 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16411 = x16409 + x16410;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16412 = x16296 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16413 = x16411 + x16412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16414 = x16297 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16415 = x16413 + x16414;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16416 = x16298 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16417 = x16415 + x16416;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16418 = x16299 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16419 = x16417 + x16418;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16420 = x16300 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16421 = x16419 + x16420;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16422 = x16301 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16423 = x16421 + x16422;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16424 = x16292 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16425 = x16293 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16426 = x16424 + x16425;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16427 = x16294 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16428 = x16426 + x16427;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16429 = x16295 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16430 = x16428 + x16429;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16431 = x16296 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16432 = x16430 + x16431;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16433 = x16297 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16434 = x16432 + x16433;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16435 = x16298 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16436 = x16434 + x16435;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16437 = x16299 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16438 = x16436 + x16437;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16439 = x16300 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16440 = x16438 + x16439;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16441 = x16301 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16442 = x16440 + x16441;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16443 = x16302 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16444 = x16442 + x16443;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16445 = x16292 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16446 = x16293 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16447 = x16445 + x16446;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16448 = x16294 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16449 = x16447 + x16448;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16450 = x16295 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16451 = x16449 + x16450;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16452 = x16296 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16453 = x16451 + x16452;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16454 = x16297 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16455 = x16453 + x16454;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16456 = x16298 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16457 = x16455 + x16456;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16458 = x16299 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16459 = x16457 + x16458;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16460 = x16300 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16461 = x16459 + x16460;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16462 = x16301 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16463 = x16461 + x16462;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16464 = x16302 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16465 = x16463 + x16464;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16466 = x16303 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16467 = x16465 + x16466;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16468 = x16292 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16469 = x16293 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16470 = x16468 + x16469;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16471 = x16294 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16472 = x16470 + x16471;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16473 = x16295 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16474 = x16472 + x16473;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16475 = x16296 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16476 = x16474 + x16475;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16477 = x16297 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16478 = x16476 + x16477;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16479 = x16298 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16480 = x16478 + x16479;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16481 = x16299 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16482 = x16480 + x16481;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16483 = x16300 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16484 = x16482 + x16483;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16485 = x16301 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16486 = x16484 + x16485;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16487 = x16302 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16488 = x16486 + x16487;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16489 = x16303 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16490 = x16488 + x16489;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16491 = x16304 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16492 = x16490 + x16491;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16493 = x16292 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16494 = x16293 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16495 = x16493 + x16494;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16496 = x16294 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16497 = x16495 + x16496;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16498 = x16295 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16499 = x16497 + x16498;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16500 = x16296 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16501 = x16499 + x16500;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16502 = x16297 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16503 = x16501 + x16502;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16504 = x16298 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16505 = x16503 + x16504;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16506 = x16299 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16507 = x16505 + x16506;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16508 = x16300 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16509 = x16507 + x16508;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16510 = x16301 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16511 = x16509 + x16510;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16512 = x16302 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16513 = x16511 + x16512;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16514 = x16303 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16515 = x16513 + x16514;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16516 = x16304 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16517 = x16515 + x16516;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16518 = x16305 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16519 = x16517 + x16518;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16520 = x16292 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16521 = x16293 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16522 = x16520 + x16521;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16523 = x16294 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16524 = x16522 + x16523;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16525 = x16295 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16526 = x16524 + x16525;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16527 = x16296 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16528 = x16526 + x16527;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16529 = x16297 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16530 = x16528 + x16529;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16531 = x16298 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16532 = x16530 + x16531;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16533 = x16299 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16534 = x16532 + x16533;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16535 = x16300 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16536 = x16534 + x16535;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16537 = x16301 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16538 = x16536 + x16537;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16539 = x16302 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16540 = x16538 + x16539;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16541 = x16303 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16542 = x16540 + x16541;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16543 = x16304 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16544 = x16542 + x16543;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16545 = x16305 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16546 = x16544 + x16545;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16547 = x16306 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16548 = x16546 + x16547;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16549 = x16292 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16550 = x16293 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16551 = x16549 + x16550;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16552 = x16294 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16553 = x16551 + x16552;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16554 = x16295 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16555 = x16553 + x16554;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16556 = x16296 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16557 = x16555 + x16556;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16558 = x16297 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16559 = x16557 + x16558;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16560 = x16298 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16561 = x16559 + x16560;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16562 = x16299 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16563 = x16561 + x16562;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16564 = x16300 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16565 = x16563 + x16564;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16566 = x16301 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16567 = x16565 + x16566;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16568 = x16302 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16569 = x16567 + x16568;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16570 = x16303 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16571 = x16569 + x16570;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16572 = x16304 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16573 = x16571 + x16572;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16574 = x16305 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16575 = x16573 + x16574;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16576 = x16306 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16577 = x16575 + x16576;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16578 = x16307 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16579 = x16577 + x16578;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16580 = x16292 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16581 = x16293 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16582 = x16580 + x16581;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16583 = x16294 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16584 = x16582 + x16583;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16585 = x16295 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16586 = x16584 + x16585;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16587 = x16296 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16588 = x16586 + x16587;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16589 = x16297 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16590 = x16588 + x16589;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16591 = x16298 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16592 = x16590 + x16591;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16593 = x16299 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16594 = x16592 + x16593;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16595 = x16300 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16596 = x16594 + x16595;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16597 = x16301 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16598 = x16596 + x16597;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16599 = x16302 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16600 = x16598 + x16599;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16601 = x16303 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16602 = x16600 + x16601;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16603 = x16304 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16604 = x16602 + x16603;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16605 = x16305 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16606 = x16604 + x16605;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16607 = x16306 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16608 = x16606 + x16607;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16609 = x16307 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16610 = x16608 + x16609;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16611 = x16308 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16612 = x16610 + x16611;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16613 = x16292 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16614 = x16293 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16615 = x16613 + x16614;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16616 = x16294 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16617 = x16615 + x16616;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16618 = x16295 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16619 = x16617 + x16618;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16620 = x16296 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16621 = x16619 + x16620;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16622 = x16297 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16623 = x16621 + x16622;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16624 = x16298 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16625 = x16623 + x16624;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16626 = x16299 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16627 = x16625 + x16626;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16628 = x16300 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16629 = x16627 + x16628;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16630 = x16301 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16631 = x16629 + x16630;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16632 = x16302 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16633 = x16631 + x16632;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16634 = x16303 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16635 = x16633 + x16634;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16636 = x16304 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16637 = x16635 + x16636;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16638 = x16305 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16639 = x16637 + x16638;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16640 = x16306 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16641 = x16639 + x16640;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16642 = x16307 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16643 = x16641 + x16642;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16644 = x16308 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16645 = x16643 + x16644;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16646 = x16309 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16647 = x16645 + x16646;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16648 = x16292 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16649 = x16293 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16650 = x16648 + x16649;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16651 = x16294 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16652 = x16650 + x16651;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16653 = x16295 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16654 = x16652 + x16653;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16655 = x16296 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16656 = x16654 + x16655;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16657 = x16297 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16658 = x16656 + x16657;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16659 = x16298 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16660 = x16658 + x16659;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16661 = x16299 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16662 = x16660 + x16661;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16663 = x16300 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16664 = x16662 + x16663;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16665 = x16301 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16666 = x16664 + x16665;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16667 = x16302 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16668 = x16666 + x16667;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16669 = x16303 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16670 = x16668 + x16669;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16671 = x16304 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16672 = x16670 + x16671;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16673 = x16305 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16674 = x16672 + x16673;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16675 = x16306 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16676 = x16674 + x16675;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16677 = x16307 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16678 = x16676 + x16677;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16679 = x16308 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16680 = x16678 + x16679;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16681 = x16309 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16682 = x16680 + x16681;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16683 = x16310 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16684 = x16682 + x16683;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16685 = x16292 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16686 = x16293 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16687 = x16685 + x16686;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16688 = x16294 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16689 = x16687 + x16688;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16690 = x16295 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16691 = x16689 + x16690;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16692 = x16296 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16693 = x16691 + x16692;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16694 = x16297 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16695 = x16693 + x16694;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16696 = x16298 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16697 = x16695 + x16696;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16698 = x16299 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16699 = x16697 + x16698;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16700 = x16300 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16701 = x16699 + x16700;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16702 = x16301 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16703 = x16701 + x16702;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16704 = x16302 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16705 = x16703 + x16704;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16706 = x16303 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16707 = x16705 + x16706;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16708 = x16304 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16709 = x16707 + x16708;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16710 = x16305 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16711 = x16709 + x16710;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16712 = x16306 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16713 = x16711 + x16712;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16714 = x16307 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16715 = x16713 + x16714;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16716 = x16308 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16717 = x16715 + x16716;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16718 = x16309 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16719 = x16717 + x16718;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16720 = x16310 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16721 = x16719 + x16720;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16722 = x16311 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16723 = x16721 + x16722;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16724 = x16292 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16725 = x16293 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16726 = x16724 + x16725;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16727 = x16294 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16728 = x16726 + x16727;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16729 = x16295 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16730 = x16728 + x16729;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16731 = x16296 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16732 = x16730 + x16731;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16733 = x16297 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16734 = x16732 + x16733;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16735 = x16298 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16736 = x16734 + x16735;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16737 = x16299 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16738 = x16736 + x16737;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16739 = x16300 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16740 = x16738 + x16739;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16741 = x16301 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16742 = x16740 + x16741;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16743 = x16302 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16744 = x16742 + x16743;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16745 = x16303 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16746 = x16744 + x16745;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16747 = x16304 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16748 = x16746 + x16747;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16749 = x16305 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16750 = x16748 + x16749;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16751 = x16306 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16752 = x16750 + x16751;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16753 = x16307 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16754 = x16752 + x16753;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16755 = x16308 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16756 = x16754 + x16755;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16757 = x16309 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16758 = x16756 + x16757;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16759 = x16310 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16760 = x16758 + x16759;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16761 = x16311 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16762 = x16760 + x16761;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16763 = x16312 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16764 = x16762 + x16763;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16765 = x16292 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16766 = x16293 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16767 = x16765 + x16766;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16768 = x16294 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16769 = x16767 + x16768;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16770 = x16295 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16771 = x16769 + x16770;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16772 = x16296 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16773 = x16771 + x16772;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16774 = x16297 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16775 = x16773 + x16774;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16776 = x16298 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16777 = x16775 + x16776;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16778 = x16299 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16779 = x16777 + x16778;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16780 = x16300 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16781 = x16779 + x16780;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16782 = x16301 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16783 = x16781 + x16782;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16784 = x16302 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16785 = x16783 + x16784;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16786 = x16303 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16787 = x16785 + x16786;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16788 = x16304 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16789 = x16787 + x16788;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16790 = x16305 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16791 = x16789 + x16790;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16792 = x16306 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16793 = x16791 + x16792;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16794 = x16307 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16795 = x16793 + x16794;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16796 = x16308 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16797 = x16795 + x16796;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16798 = x16309 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16799 = x16797 + x16798;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16800 = x16310 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16801 = x16799 + x16800;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16802 = x16311 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16803 = x16801 + x16802;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16804 = x16312 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16805 = x16803 + x16804;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16806 = x16313 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16807 = x16805 + x16806;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16808 = x16292 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16809 = x16293 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16810 = x16808 + x16809;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16811 = x16294 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16812 = x16810 + x16811;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16813 = x16295 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16814 = x16812 + x16813;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16815 = x16296 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16816 = x16814 + x16815;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16817 = x16297 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16818 = x16816 + x16817;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16819 = x16298 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16820 = x16818 + x16819;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16821 = x16299 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16822 = x16820 + x16821;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16823 = x16300 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16824 = x16822 + x16823;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16825 = x16301 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16826 = x16824 + x16825;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16827 = x16302 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16828 = x16826 + x16827;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16829 = x16303 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16830 = x16828 + x16829;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16831 = x16304 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16832 = x16830 + x16831;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16833 = x16305 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16834 = x16832 + x16833;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16835 = x16306 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16836 = x16834 + x16835;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16837 = x16307 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16838 = x16836 + x16837;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16839 = x16308 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16840 = x16838 + x16839;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16841 = x16309 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16842 = x16840 + x16841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16843 = x16310 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16844 = x16842 + x16843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16845 = x16311 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16846 = x16844 + x16845;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16847 = x16312 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16848 = x16846 + x16847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16849 = x16313 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16850 = x16848 + x16849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16851 = x16314 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16852 = x16850 + x16851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16853 = x16292 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16854 = x16293 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16855 = x16853 + x16854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16856 = x16294 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16857 = x16855 + x16856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16858 = x16295 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16859 = x16857 + x16858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16860 = x16296 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16861 = x16859 + x16860;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16862 = x16297 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16863 = x16861 + x16862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16864 = x16298 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16865 = x16863 + x16864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16866 = x16299 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16867 = x16865 + x16866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16868 = x16300 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16869 = x16867 + x16868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16870 = x16301 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16871 = x16869 + x16870;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16872 = x16302 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16873 = x16871 + x16872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16874 = x16303 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16875 = x16873 + x16874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16876 = x16304 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16877 = x16875 + x16876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16878 = x16305 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16879 = x16877 + x16878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16880 = x16306 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16881 = x16879 + x16880;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16882 = x16307 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16883 = x16881 + x16882;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16884 = x16308 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16885 = x16883 + x16884;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16886 = x16309 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16887 = x16885 + x16886;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16888 = x16310 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16889 = x16887 + x16888;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16890 = x16311 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16891 = x16889 + x16890;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16892 = x16312 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16893 = x16891 + x16892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16894 = x16313 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16895 = x16893 + x16894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16896 = x16314 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16897 = x16895 + x16896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16898 = x16315 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16899 = x16897 + x16898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16900 = x16292 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16901 = x16293 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16902 = x16900 + x16901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16903 = x16294 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16904 = x16902 + x16903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16905 = x16295 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16906 = x16904 + x16905;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16907 = x16296 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16908 = x16906 + x16907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16909 = x16297 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16910 = x16908 + x16909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16911 = x16298 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16912 = x16910 + x16911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16913 = x16299 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16914 = x16912 + x16913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16915 = x16300 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16916 = x16914 + x16915;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16917 = x16301 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16918 = x16916 + x16917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16919 = x16302 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16920 = x16918 + x16919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16921 = x16303 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16922 = x16920 + x16921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16923 = x16304 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16924 = x16922 + x16923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16925 = x16305 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16926 = x16924 + x16925;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16927 = x16306 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16928 = x16926 + x16927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16929 = x16307 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16930 = x16928 + x16929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16931 = x16308 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16932 = x16930 + x16931;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16933 = x16309 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16934 = x16932 + x16933;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16935 = x16310 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16936 = x16934 + x16935;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16937 = x16311 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16938 = x16936 + x16937;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16939 = x16312 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16940 = x16938 + x16939;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16941 = x16313 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16942 = x16940 + x16941;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16943 = x16314 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16944 = x16942 + x16943;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16945 = x16315 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16946 = x16944 + x16945;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16947 = x16316 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16948 = x16946 + x16947;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16949 = x16292 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16950 = x16293 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16951 = x16949 + x16950;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16952 = x16294 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16953 = x16951 + x16952;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16954 = x16295 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16955 = x16953 + x16954;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16956 = x16296 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16957 = x16955 + x16956;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16958 = x16297 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16959 = x16957 + x16958;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16960 = x16298 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16961 = x16959 + x16960;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16962 = x16299 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16963 = x16961 + x16962;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16964 = x16300 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16965 = x16963 + x16964;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16966 = x16301 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16967 = x16965 + x16966;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16968 = x16302 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16969 = x16967 + x16968;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16970 = x16303 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16971 = x16969 + x16970;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16972 = x16304 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16973 = x16971 + x16972;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16974 = x16305 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16975 = x16973 + x16974;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16976 = x16306 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16977 = x16975 + x16976;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16978 = x16307 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16979 = x16977 + x16978;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16980 = x16308 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16981 = x16979 + x16980;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16982 = x16309 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16983 = x16981 + x16982;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16984 = x16310 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16985 = x16983 + x16984;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16986 = x16311 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16987 = x16985 + x16986;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16988 = x16312 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16989 = x16987 + x16988;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16990 = x16313 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16991 = x16989 + x16990;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16992 = x16314 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16993 = x16991 + x16992;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16994 = x16315 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16995 = x16993 + x16994;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16996 = x16316 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16997 = x16995 + x16996;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16998 = x16317 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x16999 = x16997 + x16998;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17000 = x16292 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17001 = x16293 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17002 = x17000 + x17001;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17003 = x16294 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17004 = x17002 + x17003;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17005 = x16295 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17006 = x17004 + x17005;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17007 = x16296 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17008 = x17006 + x17007;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17009 = x16297 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17010 = x17008 + x17009;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17011 = x16298 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17012 = x17010 + x17011;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17013 = x16299 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17014 = x17012 + x17013;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17015 = x16300 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17016 = x17014 + x17015;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17017 = x16301 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17018 = x17016 + x17017;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17019 = x16302 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17020 = x17018 + x17019;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17021 = x16303 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17022 = x17020 + x17021;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17023 = x16304 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17024 = x17022 + x17023;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17025 = x16305 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17026 = x17024 + x17025;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17027 = x16306 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17028 = x17026 + x17027;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17029 = x16307 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17030 = x17028 + x17029;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17031 = x16308 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17032 = x17030 + x17031;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17033 = x16309 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17034 = x17032 + x17033;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17035 = x16310 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17036 = x17034 + x17035;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17037 = x16311 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17038 = x17036 + x17037;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17039 = x16312 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17040 = x17038 + x17039;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17041 = x16313 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17042 = x17040 + x17041;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17043 = x16314 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17044 = x17042 + x17043;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17045 = x16315 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17046 = x17044 + x17045;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17047 = x16316 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17048 = x17046 + x17047;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17049 = x16317 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17050 = x17048 + x17049;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17051 = x16318 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17052 = x17050 + x17051;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17053 = x16292 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17054 = x16293 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17055 = x17053 + x17054;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17056 = x16294 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17057 = x17055 + x17056;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17058 = x16295 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17059 = x17057 + x17058;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17060 = x16296 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17061 = x17059 + x17060;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17062 = x16297 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17063 = x17061 + x17062;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17064 = x16298 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17065 = x17063 + x17064;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17066 = x16299 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17067 = x17065 + x17066;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17068 = x16300 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17069 = x17067 + x17068;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17070 = x16301 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17071 = x17069 + x17070;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17072 = x16302 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17073 = x17071 + x17072;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17074 = x16303 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17075 = x17073 + x17074;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17076 = x16304 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17077 = x17075 + x17076;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17078 = x16305 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17079 = x17077 + x17078;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17080 = x16306 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17081 = x17079 + x17080;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17082 = x16307 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17083 = x17081 + x17082;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17084 = x16308 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17085 = x17083 + x17084;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17086 = x16309 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17087 = x17085 + x17086;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17088 = x16310 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17089 = x17087 + x17088;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17090 = x16311 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17091 = x17089 + x17090;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17092 = x16312 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17093 = x17091 + x17092;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17094 = x16313 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17095 = x17093 + x17094;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17096 = x16314 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17097 = x17095 + x17096;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17098 = x16315 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17099 = x17097 + x17098;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17100 = x16316 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17101 = x17099 + x17100;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17102 = x16317 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17103 = x17101 + x17102;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17104 = x16318 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17105 = x17103 + x17104;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17106 = x16319 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17107 = x17105 + x17106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17108 = x16292 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17109 = x16293 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17110 = x17108 + x17109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17111 = x16294 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17112 = x17110 + x17111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17113 = x16295 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17114 = x17112 + x17113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17115 = x16296 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17116 = x17114 + x17115;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17117 = x16297 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17118 = x17116 + x17117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17119 = x16298 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17120 = x17118 + x17119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17121 = x16299 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17122 = x17120 + x17121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17123 = x16300 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17124 = x17122 + x17123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17125 = x16301 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17126 = x17124 + x17125;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17127 = x16302 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17128 = x17126 + x17127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17129 = x16303 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17130 = x17128 + x17129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17131 = x16304 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17132 = x17130 + x17131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17133 = x16305 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17134 = x17132 + x17133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17135 = x16306 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17136 = x17134 + x17135;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17137 = x16307 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17138 = x17136 + x17137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17139 = x16308 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17140 = x17138 + x17139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17141 = x16309 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17142 = x17140 + x17141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17143 = x16310 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17144 = x17142 + x17143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17145 = x16311 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17146 = x17144 + x17145;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17147 = x16312 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17148 = x17146 + x17147;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17149 = x16313 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17150 = x17148 + x17149;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17151 = x16314 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17152 = x17150 + x17151;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17153 = x16315 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17154 = x17152 + x17153;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17155 = x16316 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17156 = x17154 + x17155;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17157 = x16317 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17158 = x17156 + x17157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17159 = x16318 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17160 = x17158 + x17159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17161 = x16319 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17162 = x17160 + x17161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17163 = x16320 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17164 = x17162 + x17163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17165 = x16292 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17166 = x16293 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17167 = x17165 + x17166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17168 = x16294 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17169 = x17167 + x17168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17170 = x16295 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17171 = x17169 + x17170;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17172 = x16296 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17173 = x17171 + x17172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17174 = x16297 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17175 = x17173 + x17174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17176 = x16298 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17177 = x17175 + x17176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17178 = x16299 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17179 = x17177 + x17178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17180 = x16300 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17181 = x17179 + x17180;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17182 = x16301 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17183 = x17181 + x17182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17184 = x16302 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17185 = x17183 + x17184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17186 = x16303 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17187 = x17185 + x17186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17188 = x16304 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17189 = x17187 + x17188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17190 = x16305 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17191 = x17189 + x17190;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17192 = x16306 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17193 = x17191 + x17192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17194 = x16307 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17195 = x17193 + x17194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17196 = x16308 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17197 = x17195 + x17196;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17198 = x16309 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17199 = x17197 + x17198;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17200 = x16310 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17201 = x17199 + x17200;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17202 = x16311 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17203 = x17201 + x17202;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17204 = x16312 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17205 = x17203 + x17204;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17206 = x16313 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17207 = x17205 + x17206;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17208 = x16314 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17209 = x17207 + x17208;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17210 = x16315 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17211 = x17209 + x17210;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17212 = x16316 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17213 = x17211 + x17212;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17214 = x16317 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17215 = x17213 + x17214;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17216 = x16318 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17217 = x17215 + x17216;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17218 = x16319 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17219 = x17217 + x17218;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17220 = x16320 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17221 = x17219 + x17220;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17222 = x16321 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17223 = x17221 + x17222;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17224 = x16292 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17225 = x16293 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17226 = x17224 + x17225;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17227 = x16294 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17228 = x17226 + x17227;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17229 = x16295 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17230 = x17228 + x17229;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17231 = x16296 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17232 = x17230 + x17231;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17233 = x16297 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17234 = x17232 + x17233;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17235 = x16298 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17236 = x17234 + x17235;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17237 = x16299 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17238 = x17236 + x17237;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17239 = x16300 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17240 = x17238 + x17239;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17241 = x16301 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17242 = x17240 + x17241;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17243 = x16302 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17244 = x17242 + x17243;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17245 = x16303 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17246 = x17244 + x17245;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17247 = x16304 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17248 = x17246 + x17247;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17249 = x16305 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17250 = x17248 + x17249;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17251 = x16306 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17252 = x17250 + x17251;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17253 = x16307 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17254 = x17252 + x17253;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17255 = x16308 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17256 = x17254 + x17255;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17257 = x16309 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17258 = x17256 + x17257;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17259 = x16310 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17260 = x17258 + x17259;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17261 = x16311 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17262 = x17260 + x17261;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17263 = x16312 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17264 = x17262 + x17263;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17265 = x16313 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17266 = x17264 + x17265;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17267 = x16314 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17268 = x17266 + x17267;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17269 = x16315 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17270 = x17268 + x17269;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17271 = x16316 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17272 = x17270 + x17271;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17273 = x16317 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17274 = x17272 + x17273;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17275 = x16318 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17276 = x17274 + x17275;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17277 = x16319 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17278 = x17276 + x17277;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17279 = x16320 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17280 = x17278 + x17279;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17281 = x16321 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17282 = x17280 + x17281;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17283 = x16322 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17284 = x17282 + x17283;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17285 = x16292 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17286 = x16293 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17287 = x17285 + x17286;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17288 = x16294 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17289 = x17287 + x17288;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17290 = x16295 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17291 = x17289 + x17290;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17292 = x16296 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17293 = x17291 + x17292;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17294 = x16297 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17295 = x17293 + x17294;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17296 = x16298 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17297 = x17295 + x17296;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17298 = x16299 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17299 = x17297 + x17298;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17300 = x16300 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17301 = x17299 + x17300;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17302 = x16301 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17303 = x17301 + x17302;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17304 = x16302 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17305 = x17303 + x17304;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17306 = x16303 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17307 = x17305 + x17306;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17308 = x16304 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17309 = x17307 + x17308;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17310 = x16305 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17311 = x17309 + x17310;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17312 = x16306 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17313 = x17311 + x17312;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17314 = x16307 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17315 = x17313 + x17314;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17316 = x16308 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17317 = x17315 + x17316;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17318 = x16309 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17319 = x17317 + x17318;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17320 = x16310 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17321 = x17319 + x17320;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17322 = x16311 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17323 = x17321 + x17322;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17324 = x16312 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17325 = x17323 + x17324;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17326 = x16313 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17327 = x17325 + x17326;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17328 = x16314 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17329 = x17327 + x17328;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17330 = x16315 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17331 = x17329 + x17330;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17332 = x16316 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17333 = x17331 + x17332;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17334 = x16317 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17335 = x17333 + x17334;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17336 = x16318 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17337 = x17335 + x17336;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17338 = x16319 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17339 = x17337 + x17338;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17340 = x16320 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17341 = x17339 + x17340;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17342 = x16321 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17343 = x17341 + x17342;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17344 = x16322 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17345 = x17343 + x17344;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17346 = x16323 * x13891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17347 = x17345 + x17346;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17348 = x16293 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17349 = x16294 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17350 = x17348 + x17349;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17351 = x16295 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17352 = x17350 + x17351;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17353 = x16296 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17354 = x17352 + x17353;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17355 = x16297 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17356 = x17354 + x17355;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17357 = x16298 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17358 = x17356 + x17357;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17359 = x16299 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17360 = x17358 + x17359;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17361 = x16300 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17362 = x17360 + x17361;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17363 = x16301 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17364 = x17362 + x17363;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17365 = x16302 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17366 = x17364 + x17365;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17367 = x16303 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17368 = x17366 + x17367;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17369 = x16304 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17370 = x17368 + x17369;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17371 = x16305 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17372 = x17370 + x17371;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17373 = x16306 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17374 = x17372 + x17373;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17375 = x16307 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17376 = x17374 + x17375;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17377 = x16308 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17378 = x17376 + x17377;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17379 = x16309 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17380 = x17378 + x17379;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17381 = x16310 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17382 = x17380 + x17381;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17383 = x16311 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17384 = x17382 + x17383;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17385 = x16312 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17386 = x17384 + x17385;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17387 = x16313 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17388 = x17386 + x17387;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17389 = x16314 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17390 = x17388 + x17389;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17391 = x16315 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17392 = x17390 + x17391;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17393 = x16316 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17394 = x17392 + x17393;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17395 = x16317 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17396 = x17394 + x17395;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17397 = x16318 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17398 = x17396 + x17397;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17399 = x16319 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17400 = x17398 + x17399;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17401 = x16320 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17402 = x17400 + x17401;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17403 = x16321 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17404 = x17402 + x17403;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17405 = x16322 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17406 = x17404 + x17405;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17407 = x16323 * x13892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17408 = x17406 + x17407;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17409 = x16294 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17410 = x16295 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17411 = x17409 + x17410;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17412 = x16296 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17413 = x17411 + x17412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17414 = x16297 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17415 = x17413 + x17414;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17416 = x16298 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17417 = x17415 + x17416;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17418 = x16299 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17419 = x17417 + x17418;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17420 = x16300 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17421 = x17419 + x17420;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17422 = x16301 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17423 = x17421 + x17422;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17424 = x16302 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17425 = x17423 + x17424;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17426 = x16303 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17427 = x17425 + x17426;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17428 = x16304 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17429 = x17427 + x17428;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17430 = x16305 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17431 = x17429 + x17430;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17432 = x16306 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17433 = x17431 + x17432;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17434 = x16307 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17435 = x17433 + x17434;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17436 = x16308 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17437 = x17435 + x17436;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17438 = x16309 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17439 = x17437 + x17438;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17440 = x16310 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17441 = x17439 + x17440;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17442 = x16311 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17443 = x17441 + x17442;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17444 = x16312 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17445 = x17443 + x17444;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17446 = x16313 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17447 = x17445 + x17446;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17448 = x16314 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17449 = x17447 + x17448;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17450 = x16315 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17451 = x17449 + x17450;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17452 = x16316 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17453 = x17451 + x17452;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17454 = x16317 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17455 = x17453 + x17454;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17456 = x16318 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17457 = x17455 + x17456;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17458 = x16319 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17459 = x17457 + x17458;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17460 = x16320 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17461 = x17459 + x17460;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17462 = x16321 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17463 = x17461 + x17462;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17464 = x16322 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17465 = x17463 + x17464;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17466 = x16323 * x13893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17467 = x17465 + x17466;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17468 = x16295 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17469 = x16296 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17470 = x17468 + x17469;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17471 = x16297 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17472 = x17470 + x17471;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17473 = x16298 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17474 = x17472 + x17473;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17475 = x16299 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17476 = x17474 + x17475;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17477 = x16300 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17478 = x17476 + x17477;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17479 = x16301 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17480 = x17478 + x17479;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17481 = x16302 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17482 = x17480 + x17481;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17483 = x16303 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17484 = x17482 + x17483;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17485 = x16304 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17486 = x17484 + x17485;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17487 = x16305 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17488 = x17486 + x17487;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17489 = x16306 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17490 = x17488 + x17489;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17491 = x16307 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17492 = x17490 + x17491;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17493 = x16308 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17494 = x17492 + x17493;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17495 = x16309 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17496 = x17494 + x17495;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17497 = x16310 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17498 = x17496 + x17497;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17499 = x16311 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17500 = x17498 + x17499;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17501 = x16312 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17502 = x17500 + x17501;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17503 = x16313 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17504 = x17502 + x17503;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17505 = x16314 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17506 = x17504 + x17505;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17507 = x16315 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17508 = x17506 + x17507;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17509 = x16316 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17510 = x17508 + x17509;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17511 = x16317 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17512 = x17510 + x17511;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17513 = x16318 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17514 = x17512 + x17513;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17515 = x16319 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17516 = x17514 + x17515;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17517 = x16320 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17518 = x17516 + x17517;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17519 = x16321 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17520 = x17518 + x17519;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17521 = x16322 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17522 = x17520 + x17521;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17523 = x16323 * x13894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17524 = x17522 + x17523;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17525 = x16296 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17526 = x16297 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17527 = x17525 + x17526;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17528 = x16298 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17529 = x17527 + x17528;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17530 = x16299 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17531 = x17529 + x17530;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17532 = x16300 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17533 = x17531 + x17532;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17534 = x16301 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17535 = x17533 + x17534;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17536 = x16302 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17537 = x17535 + x17536;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17538 = x16303 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17539 = x17537 + x17538;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17540 = x16304 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17541 = x17539 + x17540;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17542 = x16305 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17543 = x17541 + x17542;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17544 = x16306 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17545 = x17543 + x17544;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17546 = x16307 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17547 = x17545 + x17546;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17548 = x16308 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17549 = x17547 + x17548;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17550 = x16309 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17551 = x17549 + x17550;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17552 = x16310 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17553 = x17551 + x17552;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17554 = x16311 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17555 = x17553 + x17554;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17556 = x16312 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17557 = x17555 + x17556;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17558 = x16313 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17559 = x17557 + x17558;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17560 = x16314 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17561 = x17559 + x17560;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17562 = x16315 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17563 = x17561 + x17562;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17564 = x16316 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17565 = x17563 + x17564;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17566 = x16317 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17567 = x17565 + x17566;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17568 = x16318 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17569 = x17567 + x17568;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17570 = x16319 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17571 = x17569 + x17570;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17572 = x16320 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17573 = x17571 + x17572;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17574 = x16321 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17575 = x17573 + x17574;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17576 = x16322 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17577 = x17575 + x17576;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17578 = x16323 * x13896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17579 = x17577 + x17578;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17580 = x16297 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17581 = x16298 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17582 = x17580 + x17581;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17583 = x16299 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17584 = x17582 + x17583;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17585 = x16300 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17586 = x17584 + x17585;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17587 = x16301 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17588 = x17586 + x17587;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17589 = x16302 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17590 = x17588 + x17589;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17591 = x16303 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17592 = x17590 + x17591;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17593 = x16304 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17594 = x17592 + x17593;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17595 = x16305 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17596 = x17594 + x17595;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17597 = x16306 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17598 = x17596 + x17597;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17599 = x16307 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17600 = x17598 + x17599;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17601 = x16308 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17602 = x17600 + x17601;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17603 = x16309 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17604 = x17602 + x17603;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17605 = x16310 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17606 = x17604 + x17605;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17607 = x16311 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17608 = x17606 + x17607;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17609 = x16312 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17610 = x17608 + x17609;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17611 = x16313 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17612 = x17610 + x17611;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17613 = x16314 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17614 = x17612 + x17613;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17615 = x16315 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17616 = x17614 + x17615;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17617 = x16316 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17618 = x17616 + x17617;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17619 = x16317 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17620 = x17618 + x17619;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17621 = x16318 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17622 = x17620 + x17621;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17623 = x16319 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17624 = x17622 + x17623;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17625 = x16320 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17626 = x17624 + x17625;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17627 = x16321 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17628 = x17626 + x17627;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17629 = x16322 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17630 = x17628 + x17629;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17631 = x16323 * x13897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17632 = x17630 + x17631;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17633 = x16298 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17634 = x16299 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17635 = x17633 + x17634;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17636 = x16300 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17637 = x17635 + x17636;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17638 = x16301 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17639 = x17637 + x17638;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17640 = x16302 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17641 = x17639 + x17640;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17642 = x16303 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17643 = x17641 + x17642;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17644 = x16304 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17645 = x17643 + x17644;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17646 = x16305 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17647 = x17645 + x17646;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17648 = x16306 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17649 = x17647 + x17648;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17650 = x16307 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17651 = x17649 + x17650;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17652 = x16308 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17653 = x17651 + x17652;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17654 = x16309 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17655 = x17653 + x17654;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17656 = x16310 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17657 = x17655 + x17656;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17658 = x16311 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17659 = x17657 + x17658;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17660 = x16312 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17661 = x17659 + x17660;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17662 = x16313 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17663 = x17661 + x17662;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17664 = x16314 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17665 = x17663 + x17664;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17666 = x16315 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17667 = x17665 + x17666;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17668 = x16316 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17669 = x17667 + x17668;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17670 = x16317 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17671 = x17669 + x17670;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17672 = x16318 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17673 = x17671 + x17672;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17674 = x16319 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17675 = x17673 + x17674;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17676 = x16320 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17677 = x17675 + x17676;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17678 = x16321 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17679 = x17677 + x17678;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17680 = x16322 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17681 = x17679 + x17680;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17682 = x16323 * x13898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17683 = x17681 + x17682;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17684 = x16299 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17685 = x16300 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17686 = x17684 + x17685;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17687 = x16301 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17688 = x17686 + x17687;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17689 = x16302 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17690 = x17688 + x17689;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17691 = x16303 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17692 = x17690 + x17691;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17693 = x16304 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17694 = x17692 + x17693;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17695 = x16305 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17696 = x17694 + x17695;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17697 = x16306 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17698 = x17696 + x17697;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17699 = x16307 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17700 = x17698 + x17699;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17701 = x16308 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17702 = x17700 + x17701;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17703 = x16309 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17704 = x17702 + x17703;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17705 = x16310 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17706 = x17704 + x17705;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17707 = x16311 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17708 = x17706 + x17707;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17709 = x16312 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17710 = x17708 + x17709;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17711 = x16313 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17712 = x17710 + x17711;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17713 = x16314 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17714 = x17712 + x17713;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17715 = x16315 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17716 = x17714 + x17715;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17717 = x16316 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17718 = x17716 + x17717;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17719 = x16317 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17720 = x17718 + x17719;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17721 = x16318 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17722 = x17720 + x17721;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17723 = x16319 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17724 = x17722 + x17723;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17725 = x16320 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17726 = x17724 + x17725;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17727 = x16321 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17728 = x17726 + x17727;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17729 = x16322 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17730 = x17728 + x17729;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17731 = x16323 * x13899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17732 = x17730 + x17731;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17733 = x16300 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17734 = x16301 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17735 = x17733 + x17734;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17736 = x16302 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17737 = x17735 + x17736;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17738 = x16303 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17739 = x17737 + x17738;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17740 = x16304 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17741 = x17739 + x17740;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17742 = x16305 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17743 = x17741 + x17742;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17744 = x16306 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17745 = x17743 + x17744;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17746 = x16307 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17747 = x17745 + x17746;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17748 = x16308 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17749 = x17747 + x17748;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17750 = x16309 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17751 = x17749 + x17750;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17752 = x16310 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17753 = x17751 + x17752;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17754 = x16311 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17755 = x17753 + x17754;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17756 = x16312 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17757 = x17755 + x17756;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17758 = x16313 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17759 = x17757 + x17758;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17760 = x16314 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17761 = x17759 + x17760;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17762 = x16315 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17763 = x17761 + x17762;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17764 = x16316 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17765 = x17763 + x17764;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17766 = x16317 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17767 = x17765 + x17766;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17768 = x16318 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17769 = x17767 + x17768;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17770 = x16319 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17771 = x17769 + x17770;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17772 = x16320 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17773 = x17771 + x17772;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17774 = x16321 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17775 = x17773 + x17774;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17776 = x16322 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17777 = x17775 + x17776;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17778 = x16323 * x13901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17779 = x17777 + x17778;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17780 = x16301 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17781 = x16302 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17782 = x17780 + x17781;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17783 = x16303 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17784 = x17782 + x17783;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17785 = x16304 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17786 = x17784 + x17785;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17787 = x16305 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17788 = x17786 + x17787;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17789 = x16306 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17790 = x17788 + x17789;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17791 = x16307 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17792 = x17790 + x17791;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17793 = x16308 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17794 = x17792 + x17793;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17795 = x16309 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17796 = x17794 + x17795;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17797 = x16310 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17798 = x17796 + x17797;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17799 = x16311 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17800 = x17798 + x17799;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17801 = x16312 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17802 = x17800 + x17801;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17803 = x16313 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17804 = x17802 + x17803;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17805 = x16314 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17806 = x17804 + x17805;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17807 = x16315 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17808 = x17806 + x17807;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17809 = x16316 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17810 = x17808 + x17809;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17811 = x16317 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17812 = x17810 + x17811;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17813 = x16318 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17814 = x17812 + x17813;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17815 = x16319 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17816 = x17814 + x17815;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17817 = x16320 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17818 = x17816 + x17817;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17819 = x16321 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17820 = x17818 + x17819;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17821 = x16322 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17822 = x17820 + x17821;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17823 = x16323 * x13902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17824 = x17822 + x17823;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17825 = x16302 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17826 = x16303 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17827 = x17825 + x17826;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17828 = x16304 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17829 = x17827 + x17828;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17830 = x16305 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17831 = x17829 + x17830;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17832 = x16306 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17833 = x17831 + x17832;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17834 = x16307 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17835 = x17833 + x17834;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17836 = x16308 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17837 = x17835 + x17836;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17838 = x16309 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17839 = x17837 + x17838;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17840 = x16310 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17841 = x17839 + x17840;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17842 = x16311 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17843 = x17841 + x17842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17844 = x16312 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17845 = x17843 + x17844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17846 = x16313 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17847 = x17845 + x17846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17848 = x16314 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17849 = x17847 + x17848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17850 = x16315 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17851 = x17849 + x17850;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17852 = x16316 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17853 = x17851 + x17852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17854 = x16317 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17855 = x17853 + x17854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17856 = x16318 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17857 = x17855 + x17856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17858 = x16319 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17859 = x17857 + x17858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17860 = x16320 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17861 = x17859 + x17860;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17862 = x16321 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17863 = x17861 + x17862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17864 = x16322 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17865 = x17863 + x17864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17866 = x16323 * x13903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17867 = x17865 + x17866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17868 = x16303 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17869 = x16304 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17870 = x17868 + x17869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17871 = x16305 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17872 = x17870 + x17871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17873 = x16306 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17874 = x17872 + x17873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17875 = x16307 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17876 = x17874 + x17875;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17877 = x16308 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17878 = x17876 + x17877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17879 = x16309 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17880 = x17878 + x17879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17881 = x16310 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17882 = x17880 + x17881;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17883 = x16311 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17884 = x17882 + x17883;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17885 = x16312 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17886 = x17884 + x17885;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17887 = x16313 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17888 = x17886 + x17887;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17889 = x16314 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17890 = x17888 + x17889;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17891 = x16315 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17892 = x17890 + x17891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17893 = x16316 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17894 = x17892 + x17893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17895 = x16317 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17896 = x17894 + x17895;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17897 = x16318 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17898 = x17896 + x17897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17899 = x16319 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17900 = x17898 + x17899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17901 = x16320 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17902 = x17900 + x17901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17903 = x16321 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17904 = x17902 + x17903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17905 = x16322 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17906 = x17904 + x17905;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17907 = x16323 * x13904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17908 = x17906 + x17907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17909 = x16304 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17910 = x16305 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17911 = x17909 + x17910;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17912 = x16306 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17913 = x17911 + x17912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17914 = x16307 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17915 = x17913 + x17914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17916 = x16308 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17917 = x17915 + x17916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17918 = x16309 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17919 = x17917 + x17918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17920 = x16310 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17921 = x17919 + x17920;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17922 = x16311 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17923 = x17921 + x17922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17924 = x16312 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17925 = x17923 + x17924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17926 = x16313 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17927 = x17925 + x17926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17928 = x16314 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17929 = x17927 + x17928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17930 = x16315 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17931 = x17929 + x17930;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17932 = x16316 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17933 = x17931 + x17932;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17934 = x16317 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17935 = x17933 + x17934;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17936 = x16318 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17937 = x17935 + x17936;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17938 = x16319 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17939 = x17937 + x17938;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17940 = x16320 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17941 = x17939 + x17940;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17942 = x16321 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17943 = x17941 + x17942;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17944 = x16322 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17945 = x17943 + x17944;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17946 = x16323 * x13906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17947 = x17945 + x17946;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17948 = x16305 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17949 = x16306 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17950 = x17948 + x17949;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17951 = x16307 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17952 = x17950 + x17951;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17953 = x16308 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17954 = x17952 + x17953;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17955 = x16309 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17956 = x17954 + x17955;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17957 = x16310 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17958 = x17956 + x17957;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17959 = x16311 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17960 = x17958 + x17959;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17961 = x16312 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17962 = x17960 + x17961;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17963 = x16313 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17964 = x17962 + x17963;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17965 = x16314 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17966 = x17964 + x17965;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17967 = x16315 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17968 = x17966 + x17967;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17969 = x16316 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17970 = x17968 + x17969;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17971 = x16317 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17972 = x17970 + x17971;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17973 = x16318 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17974 = x17972 + x17973;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17975 = x16319 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17976 = x17974 + x17975;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17977 = x16320 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17978 = x17976 + x17977;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17979 = x16321 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17980 = x17978 + x17979;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17981 = x16322 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17982 = x17980 + x17981;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17983 = x16323 * x13907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17984 = x17982 + x17983;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17985 = x16306 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17986 = x16307 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17987 = x17985 + x17986;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17988 = x16308 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17989 = x17987 + x17988;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17990 = x16309 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17991 = x17989 + x17990;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17992 = x16310 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17993 = x17991 + x17992;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17994 = x16311 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17995 = x17993 + x17994;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17996 = x16312 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17997 = x17995 + x17996;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17998 = x16313 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x17999 = x17997 + x17998;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18000 = x16314 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18001 = x17999 + x18000;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18002 = x16315 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18003 = x18001 + x18002;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18004 = x16316 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18005 = x18003 + x18004;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18006 = x16317 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18007 = x18005 + x18006;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18008 = x16318 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18009 = x18007 + x18008;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18010 = x16319 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18011 = x18009 + x18010;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18012 = x16320 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18013 = x18011 + x18012;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18014 = x16321 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18015 = x18013 + x18014;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18016 = x16322 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18017 = x18015 + x18016;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18018 = x16323 * x13908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18019 = x18017 + x18018;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18020 = x16307 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18021 = x16308 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18022 = x18020 + x18021;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18023 = x16309 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18024 = x18022 + x18023;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18025 = x16310 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18026 = x18024 + x18025;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18027 = x16311 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18028 = x18026 + x18027;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18029 = x16312 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18030 = x18028 + x18029;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18031 = x16313 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18032 = x18030 + x18031;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18033 = x16314 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18034 = x18032 + x18033;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18035 = x16315 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18036 = x18034 + x18035;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18037 = x16316 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18038 = x18036 + x18037;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18039 = x16317 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18040 = x18038 + x18039;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18041 = x16318 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18042 = x18040 + x18041;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18043 = x16319 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18044 = x18042 + x18043;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18045 = x16320 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18046 = x18044 + x18045;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18047 = x16321 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18048 = x18046 + x18047;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18049 = x16322 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18050 = x18048 + x18049;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18051 = x16323 * x13909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18052 = x18050 + x18051;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18053 = x16308 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18054 = x16309 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18055 = x18053 + x18054;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18056 = x16310 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18057 = x18055 + x18056;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18058 = x16311 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18059 = x18057 + x18058;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18060 = x16312 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18061 = x18059 + x18060;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18062 = x16313 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18063 = x18061 + x18062;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18064 = x16314 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18065 = x18063 + x18064;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18066 = x16315 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18067 = x18065 + x18066;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18068 = x16316 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18069 = x18067 + x18068;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18070 = x16317 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18071 = x18069 + x18070;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18072 = x16318 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18073 = x18071 + x18072;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18074 = x16319 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18075 = x18073 + x18074;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18076 = x16320 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18077 = x18075 + x18076;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18078 = x16321 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18079 = x18077 + x18078;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18080 = x16322 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18081 = x18079 + x18080;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18082 = x16323 * x13911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18083 = x18081 + x18082;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18084 = x16309 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18085 = x16310 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18086 = x18084 + x18085;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18087 = x16311 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18088 = x18086 + x18087;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18089 = x16312 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18090 = x18088 + x18089;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18091 = x16313 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18092 = x18090 + x18091;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18093 = x16314 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18094 = x18092 + x18093;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18095 = x16315 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18096 = x18094 + x18095;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18097 = x16316 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18098 = x18096 + x18097;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18099 = x16317 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18100 = x18098 + x18099;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18101 = x16318 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18102 = x18100 + x18101;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18103 = x16319 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18104 = x18102 + x18103;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18105 = x16320 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18106 = x18104 + x18105;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18107 = x16321 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18108 = x18106 + x18107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18109 = x16322 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18110 = x18108 + x18109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18111 = x16323 * x13912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18112 = x18110 + x18111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18113 = x16310 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18114 = x16311 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18115 = x18113 + x18114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18116 = x16312 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18117 = x18115 + x18116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18118 = x16313 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18119 = x18117 + x18118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18120 = x16314 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18121 = x18119 + x18120;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18122 = x16315 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18123 = x18121 + x18122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18124 = x16316 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18125 = x18123 + x18124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18126 = x16317 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18127 = x18125 + x18126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18128 = x16318 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18129 = x18127 + x18128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18130 = x16319 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18131 = x18129 + x18130;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18132 = x16320 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18133 = x18131 + x18132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18134 = x16321 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18135 = x18133 + x18134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18136 = x16322 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18137 = x18135 + x18136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18138 = x16323 * x13913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18139 = x18137 + x18138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18140 = x16311 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18141 = x16312 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18142 = x18140 + x18141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18143 = x16313 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18144 = x18142 + x18143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18145 = x16314 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18146 = x18144 + x18145;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18147 = x16315 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18148 = x18146 + x18147;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18149 = x16316 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18150 = x18148 + x18149;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18151 = x16317 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18152 = x18150 + x18151;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18153 = x16318 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18154 = x18152 + x18153;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18155 = x16319 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18156 = x18154 + x18155;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18157 = x16320 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18158 = x18156 + x18157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18159 = x16321 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18160 = x18158 + x18159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18161 = x16322 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18162 = x18160 + x18161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18163 = x16323 * x13914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18164 = x18162 + x18163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18165 = x16312 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18166 = x16313 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18167 = x18165 + x18166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18168 = x16314 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18169 = x18167 + x18168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18170 = x16315 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18171 = x18169 + x18170;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18172 = x16316 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18173 = x18171 + x18172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18174 = x16317 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18175 = x18173 + x18174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18176 = x16318 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18177 = x18175 + x18176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18178 = x16319 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18179 = x18177 + x18178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18180 = x16320 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18181 = x18179 + x18180;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18182 = x16321 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18183 = x18181 + x18182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18184 = x16322 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18185 = x18183 + x18184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18186 = x16323 * x13916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18187 = x18185 + x18186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18188 = x16313 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18189 = x16314 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18190 = x18188 + x18189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18191 = x16315 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18192 = x18190 + x18191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18193 = x16316 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18194 = x18192 + x18193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18195 = x16317 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18196 = x18194 + x18195;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18197 = x16318 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18198 = x18196 + x18197;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18199 = x16319 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18200 = x18198 + x18199;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18201 = x16320 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18202 = x18200 + x18201;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18203 = x16321 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18204 = x18202 + x18203;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18205 = x16322 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18206 = x18204 + x18205;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18207 = x16323 * x13917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18208 = x18206 + x18207;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18209 = x16314 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18210 = x16315 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18211 = x18209 + x18210;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18212 = x16316 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18213 = x18211 + x18212;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18214 = x16317 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18215 = x18213 + x18214;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18216 = x16318 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18217 = x18215 + x18216;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18218 = x16319 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18219 = x18217 + x18218;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18220 = x16320 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18221 = x18219 + x18220;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18222 = x16321 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18223 = x18221 + x18222;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18224 = x16322 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18225 = x18223 + x18224;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18226 = x16323 * x13918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18227 = x18225 + x18226;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18228 = x16315 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18229 = x16316 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18230 = x18228 + x18229;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18231 = x16317 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18232 = x18230 + x18231;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18233 = x16318 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18234 = x18232 + x18233;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18235 = x16319 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18236 = x18234 + x18235;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18237 = x16320 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18238 = x18236 + x18237;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18239 = x16321 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18240 = x18238 + x18239;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18241 = x16322 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18242 = x18240 + x18241;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18243 = x16323 * x13919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18244 = x18242 + x18243;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18245 = x16316 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18246 = x16317 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18247 = x18245 + x18246;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18248 = x16318 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18249 = x18247 + x18248;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18250 = x16319 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18251 = x18249 + x18250;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18252 = x16320 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18253 = x18251 + x18252;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18254 = x16321 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18255 = x18253 + x18254;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18256 = x16322 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18257 = x18255 + x18256;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18258 = x16323 * x13921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18259 = x18257 + x18258;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18260 = x16317 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18261 = x16318 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18262 = x18260 + x18261;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18263 = x16319 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18264 = x18262 + x18263;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18265 = x16320 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18266 = x18264 + x18265;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18267 = x16321 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18268 = x18266 + x18267;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18269 = x16322 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18270 = x18268 + x18269;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18271 = x16323 * x13922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18272 = x18270 + x18271;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18273 = x16318 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18274 = x16319 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18275 = x18273 + x18274;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18276 = x16320 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18277 = x18275 + x18276;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18278 = x16321 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18279 = x18277 + x18278;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18280 = x16322 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18281 = x18279 + x18280;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18282 = x16323 * x13923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18283 = x18281 + x18282;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18284 = x16319 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18285 = x16320 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18286 = x18284 + x18285;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18287 = x16321 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18288 = x18286 + x18287;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18289 = x16322 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18290 = x18288 + x18289;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18291 = x16323 * x13924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18292 = x18290 + x18291;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18293 = x16320 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18294 = x16321 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18295 = x18293 + x18294;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18296 = x16322 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18297 = x18295 + x18296;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18298 = x16323 * x13926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18299 = x18297 + x18298;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18300 = x16321 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18301 = x16322 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18302 = x18300 + x18301;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18303 = x16323 * x13927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18304 = x18302 + x18303;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18305 = x16322 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18306 = x16323 * x13928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18307 = x18305 + x18306;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:0)
        auto x18308 = x16323 * x13929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18309 = x13930 - x16324;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18310 = x13933 - x16327;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18311 = x13938 - x16332;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18312 = x13945 - x16339;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18313 = x13954 - x16348;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18314 = x13965 - x16359;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18315 = x13978 - x16372;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18316 = x13993 - x16387;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18317 = x14010 - x16404;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18318 = x14029 - x16423;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18319 = x14050 - x16444;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18320 = x14073 - x16467;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18321 = x14098 - x16492;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18322 = x14125 - x16519;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18323 = x14154 - x16548;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18324 = x14185 - x16579;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18325 = x14218 - x16612;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18326 = x14253 - x16647;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18327 = x14290 - x16684;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18328 = x14329 - x16723;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18329 = x14370 - x16764;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18330 = x14413 - x16807;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18331 = x14458 - x16852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18332 = x14505 - x16899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18333 = x14554 - x16948;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18334 = x14605 - x16999;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18335 = x14658 - x17052;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18336 = x14713 - x17107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18337 = x14770 - x17164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18338 = x14829 - x17223;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18339 = x14890 - x17284;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18340 = x14953 - x17347;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18341 = x15014 - x17408;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18342 = x15073 - x17467;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18343 = x15130 - x17524;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18344 = x15185 - x17579;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18345 = x15238 - x17632;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18346 = x15289 - x17683;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18347 = x15338 - x17732;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18348 = x15385 - x17779;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18349 = x15430 - x17824;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18350 = x15473 - x17867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18351 = x15514 - x17908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18352 = x15553 - x17947;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18353 = x15590 - x17984;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18354 = x15625 - x18019;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18355 = x15658 - x18052;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18356 = x15689 - x18083;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18357 = x15718 - x18112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18358 = x15745 - x18139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18359 = x15770 - x18164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18360 = x15793 - x18187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18361 = x15814 - x18208;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18362 = x15833 - x18227;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18363 = x15850 - x18244;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18364 = x15865 - x18259;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18365 = x15878 - x18272;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18366 = x15889 - x18283;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18367 = x15898 - x18292;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18368 = x15905 - x18299;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18369 = x15910 - x18304;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18370 = x15913 - x18307;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:0)
        auto x18371 = x15914 - x18308;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18372 = x18309 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18373 = Fp(x18372.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18374 = x18372 - x18373;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18375 = x18374 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18376 = x18375 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18377 = x18310 + x18376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18378 = x18377 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18379 = Fp(x18378.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18380 = x18378 - x18379;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18381 = x18380 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18382 = x18381 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18383 = x18311 + x18382;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18384 = x18383 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18385 = Fp(x18384.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18386 = x18384 - x18385;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18387 = x18386 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18388 = x18387 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18389 = x18312 + x18388;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18390 = x18389 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18391 = Fp(x18390.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18392 = x18390 - x18391;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18393 = x18392 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18394 = x18393 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18395 = x18313 + x18394;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18396 = x18395 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18397 = Fp(x18396.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18398 = x18396 - x18397;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18399 = x18398 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18400 = x18399 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18401 = x18314 + x18400;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18402 = x18401 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18403 = Fp(x18402.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18404 = x18402 - x18403;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18405 = x18404 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18406 = x18405 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18407 = x18315 + x18406;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18408 = x18407 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18409 = Fp(x18408.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18410 = x18408 - x18409;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18411 = x18410 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18412 = x18411 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18413 = x18316 + x18412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18414 = x18413 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18415 = Fp(x18414.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18416 = x18414 - x18415;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18417 = x18416 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18418 = x18417 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18419 = x18317 + x18418;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18420 = x18419 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18421 = Fp(x18420.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18422 = x18420 - x18421;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18423 = x18422 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18424 = x18423 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18425 = x18318 + x18424;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18426 = x18425 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18427 = Fp(x18426.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18428 = x18426 - x18427;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18429 = x18428 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18430 = x18429 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18431 = x18319 + x18430;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18432 = x18431 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18433 = Fp(x18432.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18434 = x18432 - x18433;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18435 = x18434 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18436 = x18435 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18437 = x18320 + x18436;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18438 = x18437 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18439 = Fp(x18438.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18440 = x18438 - x18439;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18441 = x18440 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18442 = x18441 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18443 = x18321 + x18442;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18444 = x18443 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18445 = Fp(x18444.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18446 = x18444 - x18445;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18447 = x18446 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18448 = x18447 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18449 = x18322 + x18448;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18450 = x18449 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18451 = Fp(x18450.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18452 = x18450 - x18451;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18453 = x18452 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18454 = x18453 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18455 = x18323 + x18454;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18456 = x18455 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18457 = Fp(x18456.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18458 = x18456 - x18457;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18459 = x18458 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18460 = x18459 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18461 = x18324 + x18460;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18462 = x18461 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18463 = Fp(x18462.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18464 = x18462 - x18463;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18465 = x18464 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18466 = x18465 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18467 = x18325 + x18466;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18468 = x18467 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18469 = Fp(x18468.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18470 = x18468 - x18469;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18471 = x18470 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18472 = x18471 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18473 = x18326 + x18472;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18474 = x18473 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18475 = Fp(x18474.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18476 = x18474 - x18475;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18477 = x18476 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18478 = x18477 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18479 = x18327 + x18478;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18480 = x18479 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18481 = Fp(x18480.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18482 = x18480 - x18481;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18483 = x18482 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18484 = x18483 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18485 = x18328 + x18484;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18486 = x18485 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18487 = Fp(x18486.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18488 = x18486 - x18487;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18489 = x18488 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18490 = x18489 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18491 = x18329 + x18490;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18492 = x18491 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18493 = Fp(x18492.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18494 = x18492 - x18493;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18495 = x18494 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18496 = x18495 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18497 = x18330 + x18496;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18498 = x18497 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18499 = Fp(x18498.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18500 = x18498 - x18499;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18501 = x18500 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18502 = x18501 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18503 = x18331 + x18502;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18504 = x18503 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18505 = Fp(x18504.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18506 = x18504 - x18505;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18507 = x18506 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18508 = x18507 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18509 = x18332 + x18508;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18510 = x18509 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18511 = Fp(x18510.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18512 = x18510 - x18511;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18513 = x18512 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18514 = x18513 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18515 = x18333 + x18514;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18516 = x18515 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18517 = Fp(x18516.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18518 = x18516 - x18517;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18519 = x18518 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18520 = x18519 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18521 = x18334 + x18520;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18522 = x18521 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18523 = Fp(x18522.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18524 = x18522 - x18523;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18525 = x18524 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18526 = x18525 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18527 = x18335 + x18526;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18528 = x18527 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18529 = Fp(x18528.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18530 = x18528 - x18529;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18531 = x18530 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18532 = x18531 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18533 = x18336 + x18532;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18534 = x18533 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18535 = Fp(x18534.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18536 = x18534 - x18535;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18537 = x18536 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18538 = x18537 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18539 = x18337 + x18538;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18540 = x18539 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18541 = Fp(x18540.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18542 = x18540 - x18541;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18543 = x18542 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18544 = x18543 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18545 = x18338 + x18544;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18546 = x18545 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18547 = Fp(x18546.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18548 = x18546 - x18547;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18549 = x18548 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18550 = x18549 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18551 = x18339 + x18550;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18552 = x18551 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18553 = Fp(x18552.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18554 = x18552 - x18553;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18555 = x18554 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18556 = x18555 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18557 = x18340 + x18556;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18558 = x18557 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18559 = Fp(x18558.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18560 = x18558 - x18559;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18561 = x18560 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18562 = x18561 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18563 = x18341 + x18562;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18564 = x18563 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18565 = Fp(x18564.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18566 = x18564 - x18565;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18567 = x18566 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18568 = x18567 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18569 = x18342 + x18568;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18570 = x18569 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18571 = Fp(x18570.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18572 = x18570 - x18571;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18573 = x18572 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18574 = x18573 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18575 = x18343 + x18574;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18576 = x18575 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18577 = Fp(x18576.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18578 = x18576 - x18577;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18579 = x18578 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18580 = x18579 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18581 = x18344 + x18580;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18582 = x18581 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18583 = Fp(x18582.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18584 = x18582 - x18583;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18585 = x18584 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18586 = x18585 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18587 = x18345 + x18586;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18588 = x18587 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18589 = Fp(x18588.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18590 = x18588 - x18589;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18591 = x18590 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18592 = x18591 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18593 = x18346 + x18592;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18594 = x18593 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18595 = Fp(x18594.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18596 = x18594 - x18595;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18597 = x18596 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18598 = x18597 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18599 = x18347 + x18598;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18600 = x18599 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18601 = Fp(x18600.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18602 = x18600 - x18601;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18603 = x18602 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18604 = x18603 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18605 = x18348 + x18604;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18606 = x18605 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18607 = Fp(x18606.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18608 = x18606 - x18607;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18609 = x18608 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18610 = x18609 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18611 = x18349 + x18610;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18612 = x18611 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18613 = Fp(x18612.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18614 = x18612 - x18613;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18615 = x18614 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18616 = x18615 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18617 = x18350 + x18616;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18618 = x18617 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18619 = Fp(x18618.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18620 = x18618 - x18619;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18621 = x18620 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18622 = x18621 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18623 = x18351 + x18622;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18624 = x18623 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18625 = Fp(x18624.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18626 = x18624 - x18625;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18627 = x18626 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18628 = x18627 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18629 = x18352 + x18628;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18630 = x18629 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18631 = Fp(x18630.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18632 = x18630 - x18631;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18633 = x18632 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18634 = x18633 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18635 = x18353 + x18634;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18636 = x18635 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18637 = Fp(x18636.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18638 = x18636 - x18637;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18639 = x18638 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18640 = x18639 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18641 = x18354 + x18640;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18642 = x18641 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18643 = Fp(x18642.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18644 = x18642 - x18643;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18645 = x18644 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18646 = x18645 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18647 = x18355 + x18646;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18648 = x18647 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18649 = Fp(x18648.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18650 = x18648 - x18649;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18651 = x18650 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18652 = x18651 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18653 = x18356 + x18652;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18654 = x18653 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18655 = Fp(x18654.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18656 = x18654 - x18655;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18657 = x18656 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18658 = x18657 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18659 = x18357 + x18658;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18660 = x18659 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18661 = Fp(x18660.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18662 = x18660 - x18661;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18663 = x18662 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18664 = x18663 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18665 = x18358 + x18664;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18666 = x18665 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18667 = Fp(x18666.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18668 = x18666 - x18667;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18669 = x18668 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18670 = x18669 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18671 = x18359 + x18670;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18672 = x18671 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18673 = Fp(x18672.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18674 = x18672 - x18673;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18675 = x18674 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18676 = x18675 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18677 = x18360 + x18676;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18678 = x18677 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18679 = Fp(x18678.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18680 = x18678 - x18679;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18681 = x18680 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18682 = x18681 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18683 = x18361 + x18682;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18684 = x18683 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18685 = Fp(x18684.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18686 = x18684 - x18685;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18687 = x18686 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18688 = x18687 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18689 = x18362 + x18688;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18690 = x18689 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18691 = Fp(x18690.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18692 = x18690 - x18691;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18693 = x18692 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18694 = x18693 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18695 = x18363 + x18694;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18696 = x18695 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18697 = Fp(x18696.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18698 = x18696 - x18697;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18699 = x18698 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18700 = x18699 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18701 = x18364 + x18700;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18702 = x18701 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18703 = Fp(x18702.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18704 = x18702 - x18703;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18705 = x18704 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18706 = x18705 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18707 = x18365 + x18706;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18708 = x18707 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18709 = Fp(x18708.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18710 = x18708 - x18709;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18711 = x18710 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18712 = x18711 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18713 = x18366 + x18712;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18714 = x18713 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18715 = Fp(x18714.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18716 = x18714 - x18715;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18717 = x18716 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18718 = x18717 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18719 = x18367 + x18718;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18720 = x18719 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18721 = Fp(x18720.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18722 = x18720 - x18721;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18723 = x18722 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18724 = x18723 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18725 = x18368 + x18724;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18726 = x18725 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18727 = Fp(x18726.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18728 = x18726 - x18727;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18729 = x18728 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18730 = x18729 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18731 = x18369 + x18730;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18732 = x18731 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18733 = Fp(x18732.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18734 = x18732 - x18733;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18735 = x18734 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18736 = x18735 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18737 = x18370 + x18736;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18738 = x18737 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18739 = Fp(x18738.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18740 = x18738 - x18739;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18741 = x18740 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18742 = x18741 - x12;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18743 = x18371 + x18742;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:0)
        auto x18744 = x18743 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:0)
        auto x18745 = Fp(x18744.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18746 = x18744 - x18745;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18747 = x18746 * x90;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:0)
        auto x18748 = x18747 - x12;
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][18 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18749 = Fp(x16292.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18749);
                reg = x18749;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18750 = Fp(x16308.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18750);
                reg = x18750;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18751 = x18376 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18752 = Fp(x18751.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18753 = Fp(x18752.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18753);
                reg = x18753;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18754 = x18424 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18755 = Fp(x18754.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18756 = Fp(x18755.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18756);
                reg = x18756;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18757 = x18472 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18758 = Fp(x18757.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18759 = Fp(x18758.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18759);
                reg = x18759;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18760 = x18520 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18761 = Fp(x18760.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18762 = Fp(x18761.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18762);
                reg = x18762;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18763 = Fp(x18373.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18763);
                reg = x18763;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18764 = Fp(x18469.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18764);
                reg = x18764;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][19 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18765 = Fp(x16293.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18765);
                reg = x18765;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18766 = Fp(x16309.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18766);
                reg = x18766;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18767 = x18376 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18768 = Fp(x18767.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18769 = x18768 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18770 = Fp(x18769.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18770);
                reg = x18770;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18771 = x18424 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18772 = Fp(x18771.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18773 = x18772 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18774 = Fp(x18773.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18774);
                reg = x18774;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18775 = x18472 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18776 = Fp(x18775.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18777 = x18776 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18778 = Fp(x18777.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18778);
                reg = x18778;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18779 = x18520 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18780 = Fp(x18779.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18781 = x18780 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18782 = Fp(x18781.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18782);
                reg = x18782;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18783 = Fp(x18379.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18783);
                reg = x18783;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18784 = Fp(x18475.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18784);
                reg = x18784;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][20 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18785 = Fp(x16294.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18785);
                reg = x18785;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18786 = Fp(x16310.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18786);
                reg = x18786;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18787 = x18382 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18788 = Fp(x18787.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18789 = Fp(x18788.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18789);
                reg = x18789;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18790 = x18430 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18791 = Fp(x18790.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18792 = Fp(x18791.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18792);
                reg = x18792;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18793 = x18478 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18794 = Fp(x18793.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18795 = Fp(x18794.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18795);
                reg = x18795;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18796 = x18526 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18797 = Fp(x18796.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18798 = Fp(x18797.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18798);
                reg = x18798;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18799 = Fp(x18385.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18799);
                reg = x18799;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18800 = Fp(x18481.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18800);
                reg = x18800;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][21 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18801 = Fp(x16295.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18801);
                reg = x18801;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18802 = Fp(x16311.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18802);
                reg = x18802;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18803 = x18382 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18804 = Fp(x18803.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18805 = x18804 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18806 = Fp(x18805.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18806);
                reg = x18806;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18807 = x18430 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18808 = Fp(x18807.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18809 = x18808 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18810 = Fp(x18809.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18810);
                reg = x18810;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18811 = x18478 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18812 = Fp(x18811.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18813 = x18812 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18814 = Fp(x18813.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18814);
                reg = x18814;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18815 = x18526 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18816 = Fp(x18815.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18817 = x18816 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18818 = Fp(x18817.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18818);
                reg = x18818;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18819 = Fp(x18391.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18819);
                reg = x18819;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18820 = Fp(x18487.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18820);
                reg = x18820;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][22 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18821 = Fp(x16296.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18821);
                reg = x18821;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18822 = Fp(x16312.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18822);
                reg = x18822;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18823 = x18388 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18824 = Fp(x18823.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18825 = Fp(x18824.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18825);
                reg = x18825;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18826 = x18436 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18827 = Fp(x18826.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18828 = Fp(x18827.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18828);
                reg = x18828;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18829 = x18484 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18830 = Fp(x18829.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18831 = Fp(x18830.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18831);
                reg = x18831;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18832 = x18532 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18833 = Fp(x18832.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18834 = Fp(x18833.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18834);
                reg = x18834;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18835 = Fp(x18397.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18835);
                reg = x18835;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18836 = Fp(x18493.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18836);
                reg = x18836;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][23 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18837 = Fp(x16297.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18837);
                reg = x18837;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18838 = Fp(x16313.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18838);
                reg = x18838;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18839 = x18388 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18840 = Fp(x18839.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18841 = x18840 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18842 = Fp(x18841.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18842);
                reg = x18842;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18843 = x18436 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18844 = Fp(x18843.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18845 = x18844 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18846 = Fp(x18845.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18846);
                reg = x18846;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18847 = x18484 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18848 = Fp(x18847.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18849 = x18848 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18850 = Fp(x18849.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18850);
                reg = x18850;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18851 = x18532 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18852 = Fp(x18851.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18853 = x18852 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18854 = Fp(x18853.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18854);
                reg = x18854;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18855 = Fp(x18403.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18855);
                reg = x18855;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18856 = Fp(x18499.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18856);
                reg = x18856;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][24 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18857 = Fp(x16298.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18857);
                reg = x18857;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18858 = Fp(x16314.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18858);
                reg = x18858;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18859 = x18394 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18860 = Fp(x18859.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18861 = Fp(x18860.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18861);
                reg = x18861;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18862 = x18442 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18863 = Fp(x18862.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18864 = Fp(x18863.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18864);
                reg = x18864;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18865 = x18490 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18866 = Fp(x18865.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18867 = Fp(x18866.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18867);
                reg = x18867;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18868 = x18538 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18869 = Fp(x18868.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18870 = Fp(x18869.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18870);
                reg = x18870;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18871 = Fp(x18409.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18871);
                reg = x18871;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18872 = Fp(x18505.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18872);
                reg = x18872;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][25 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18873 = Fp(x16299.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18873);
                reg = x18873;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18874 = Fp(x16315.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18874);
                reg = x18874;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18875 = x18394 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18876 = Fp(x18875.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18877 = x18876 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18878 = Fp(x18877.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18878);
                reg = x18878;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18879 = x18442 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18880 = Fp(x18879.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18881 = x18880 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18882 = Fp(x18881.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18882);
                reg = x18882;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18883 = x18490 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18884 = Fp(x18883.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18885 = x18884 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18886 = Fp(x18885.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18886);
                reg = x18886;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18887 = x18538 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18888 = Fp(x18887.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18889 = x18888 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18890 = Fp(x18889.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18890);
                reg = x18890;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18891 = Fp(x18415.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18891);
                reg = x18891;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18892 = Fp(x18511.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18892);
                reg = x18892;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][26 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18893 = Fp(x16300.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18893);
                reg = x18893;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18894 = Fp(x16316.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18894);
                reg = x18894;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18895 = x18400 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18896 = Fp(x18895.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18897 = Fp(x18896.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18897);
                reg = x18897;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18898 = x18448 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18899 = Fp(x18898.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18900 = Fp(x18899.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18900);
                reg = x18900;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18901 = x18496 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18902 = Fp(x18901.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18903 = Fp(x18902.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18903);
                reg = x18903;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18904 = x18544 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18905 = Fp(x18904.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18906 = Fp(x18905.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18906);
                reg = x18906;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18907 = Fp(x18421.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18907);
                reg = x18907;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18908 = Fp(x18517.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18908);
                reg = x18908;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][27 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18909 = Fp(x16301.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18909);
                reg = x18909;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18910 = Fp(x16317.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18910);
                reg = x18910;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18911 = x18400 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18912 = Fp(x18911.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18913 = x18912 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18914 = Fp(x18913.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18914);
                reg = x18914;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18915 = x18448 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18916 = Fp(x18915.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18917 = x18916 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18918 = Fp(x18917.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18918);
                reg = x18918;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18919 = x18496 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18920 = Fp(x18919.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18921 = x18920 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18922 = Fp(x18921.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18922);
                reg = x18922;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18923 = x18544 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18924 = Fp(x18923.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18925 = x18924 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18926 = Fp(x18925.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18926);
                reg = x18926;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18927 = Fp(x18427.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18927);
                reg = x18927;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18928 = Fp(x18523.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18928);
                reg = x18928;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][28 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18929 = Fp(x16302.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18929);
                reg = x18929;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18930 = Fp(x16318.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18930);
                reg = x18930;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18931 = x18406 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18932 = Fp(x18931.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18933 = Fp(x18932.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18933);
                reg = x18933;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18934 = x18454 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18935 = Fp(x18934.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18936 = Fp(x18935.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18936);
                reg = x18936;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18937 = x18502 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18938 = Fp(x18937.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18939 = Fp(x18938.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18939);
                reg = x18939;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18940 = x18550 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18941 = Fp(x18940.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18942 = Fp(x18941.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18942);
                reg = x18942;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18943 = Fp(x18433.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18943);
                reg = x18943;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18944 = Fp(x18529.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18944);
                reg = x18944;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18945 = Fp(x16303.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18945);
                reg = x18945;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18946 = Fp(x16319.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18946);
                reg = x18946;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18947 = x18406 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18948 = Fp(x18947.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18949 = x18948 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18950 = Fp(x18949.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18950);
                reg = x18950;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18951 = x18454 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18952 = Fp(x18951.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18953 = x18952 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18954 = Fp(x18953.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18954);
                reg = x18954;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18955 = x18502 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18956 = Fp(x18955.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18957 = x18956 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18958 = Fp(x18957.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18958);
                reg = x18958;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18959 = x18550 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18960 = Fp(x18959.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18961 = x18960 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18962 = Fp(x18961.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18962);
                reg = x18962;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18963 = Fp(x18439.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18963);
                reg = x18963;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18964 = Fp(x18535.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18964);
                reg = x18964;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][30 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18965 = Fp(x16304.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18965);
                reg = x18965;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18966 = Fp(x16320.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18966);
                reg = x18966;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18967 = x18412 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x18968 = Fp(x18967.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18969 = Fp(x18968.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18969);
                reg = x18969;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18970 = x18460 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x18971 = Fp(x18970.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18972 = Fp(x18971.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18972);
                reg = x18972;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18973 = x18508 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x18974 = Fp(x18973.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18975 = Fp(x18974.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18975);
                reg = x18975;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18976 = x18556 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x18977 = Fp(x18976.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18978 = Fp(x18977.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18978);
                reg = x18978;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18979 = Fp(x18445.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18979);
                reg = x18979;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18980 = Fp(x18541.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18980);
                reg = x18980;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][31 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18981 = Fp(x16305.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18981);
                reg = x18981;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18982 = Fp(x16321.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18982);
                reg = x18982;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18983 = x18412 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18984 = Fp(x18983.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x18985 = x18984 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18986 = Fp(x18985.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18986);
                reg = x18986;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18987 = x18460 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18988 = Fp(x18987.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x18989 = x18988 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18990 = Fp(x18989.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18990);
                reg = x18990;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18991 = x18508 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18992 = Fp(x18991.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x18993 = x18992 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18994 = Fp(x18993.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18994);
                reg = x18994;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18995 = x18556 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18996 = Fp(x18995.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x18997 = x18996 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18998 = Fp(x18997.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18998);
                reg = x18998;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x18999 = Fp(x18451.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18999);
                reg = x18999;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19000 = Fp(x18547.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19000);
                reg = x19000;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][32 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19001 = Fp(x16306.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19001);
                reg = x19001;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19002 = Fp(x16322.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19002);
                reg = x19002;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x19003 = x18418 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":296:0)
            auto x19004 = Fp(x19003.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19005 = Fp(x19004.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19005);
                reg = x19005;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x19006 = x18466 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":304:0)
            auto x19007 = Fp(x19006.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19008 = Fp(x19007.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19008);
                reg = x19008;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x19009 = x18514 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":314:0)
            auto x19010 = Fp(x19009.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19011 = Fp(x19010.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19011);
                reg = x19011;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x19012 = x18562 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":322:0)
            auto x19013 = Fp(x19012.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19014 = Fp(x19013.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19014);
                reg = x19014;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19015 = Fp(x18457.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19015);
                reg = x19015;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19016 = Fp(x18553.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19016);
                reg = x19016;
              }
            }
          }
        }
        if (x13636 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:0)
            {
              auto& reg = args[2][33 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13626 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19017 = Fp(x16307.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19017);
                reg = x19017;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19018 = Fp(x16323.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19018);
                reg = x19018;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x19019 = x18418 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x19020 = Fp(x19019.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":298:0)
            auto x19021 = x19020 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19022 = Fp(x19021.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19022);
                reg = x19022;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x19023 = x18466 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x19024 = Fp(x19023.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":306:0)
            auto x19025 = x19024 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19026 = Fp(x19025.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19026);
                reg = x19026;
              }
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x19027 = x18514 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x19028 = Fp(x19027.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":316:0)
            auto x19029 = x19028 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19030 = Fp(x19029.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19030);
                reg = x19030;
              }
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x19031 = x18562 + x12;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x19032 = Fp(x19031.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":324:0)
            auto x19033 = x19032 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19034 = Fp(x19033.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19034);
                reg = x19034;
              }
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19035 = Fp(x18463.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19035);
                reg = x19035;
              }
            }
          }
          if (x13620 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:0)
              auto x19036 = Fp(x18559.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:0)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19036);
                reg = x19036;
              }
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":343:0)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18568);
              reg = x18568;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:0)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18616);
              reg = x18616;
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":348:0)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18664);
              reg = x18664;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":351:0)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18712);
              reg = x18712;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":343:0)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18574);
              reg = x18574;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:0)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18622);
              reg = x18622;
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":348:0)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18670);
              reg = x18670;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":351:0)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18718);
              reg = x18718;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":343:0)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18580);
              reg = x18580;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:0)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18628);
              reg = x18628;
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":348:0)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18676);
              reg = x18676;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":351:0)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18724);
              reg = x18724;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":343:0)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18586);
              reg = x18586;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:0)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18634);
              reg = x18634;
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":348:0)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18682);
              reg = x18682;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":351:0)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18730);
              reg = x18730;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":343:0)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18592);
              reg = x18592;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:0)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18640);
              reg = x18640;
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":348:0)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18688);
              reg = x18688;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":351:0)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18736);
              reg = x18736;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":343:0)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18598);
              reg = x18598;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:0)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18646);
              reg = x18646;
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":348:0)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18694);
              reg = x18694;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":351:0)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18742);
              reg = x18742;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":343:0)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18604);
              reg = x18604;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:0)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18652);
              reg = x18652;
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":348:0)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18700);
              reg = x18700;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":351:0)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18748);
              reg = x18748;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":343:0)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18610);
              reg = x18610;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:0)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18658);
              reg = x18658;
            }
          }
        }
        if (x13629 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":348:0)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18706);
              reg = x18706;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":351:0)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16324);
              reg = x16324;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17408);
              reg = x17408;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18309);
              reg = x18309;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18341);
              reg = x18341;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16327);
              reg = x16327;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17467);
              reg = x17467;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18310);
              reg = x18310;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18342);
              reg = x18342;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16332);
              reg = x16332;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17524);
              reg = x17524;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18311);
              reg = x18311;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18343);
              reg = x18343;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16339);
              reg = x16339;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17579);
              reg = x17579;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18312);
              reg = x18312;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18344);
              reg = x18344;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16348);
              reg = x16348;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17632);
              reg = x17632;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18313);
              reg = x18313;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18345);
              reg = x18345;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16359);
              reg = x16359;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17683);
              reg = x17683;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18314);
              reg = x18314;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18346);
              reg = x18346;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16372);
              reg = x16372;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17732);
              reg = x17732;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18315);
              reg = x18315;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18347);
              reg = x18347;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16387);
              reg = x16387;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17779);
              reg = x17779;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18316);
              reg = x18316;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18348);
              reg = x18348;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16404);
              reg = x16404;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17824);
              reg = x17824;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18317);
              reg = x18317;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18349);
              reg = x18349;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16423);
              reg = x16423;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17867);
              reg = x17867;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18318);
              reg = x18318;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18350);
              reg = x18350;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16444);
              reg = x16444;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17908);
              reg = x17908;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18319);
              reg = x18319;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18351);
              reg = x18351;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16467);
              reg = x16467;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17947);
              reg = x17947;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18320);
              reg = x18320;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18352);
              reg = x18352;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16492);
              reg = x16492;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17984);
              reg = x17984;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18321);
              reg = x18321;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18353);
              reg = x18353;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16519);
              reg = x16519;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18019);
              reg = x18019;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18322);
              reg = x18322;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18354);
              reg = x18354;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16548);
              reg = x16548;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18052);
              reg = x18052;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18323);
              reg = x18323;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18355);
              reg = x18355;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16579);
              reg = x16579;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18083);
              reg = x18083;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18324);
              reg = x18324;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18356);
              reg = x18356;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16612);
              reg = x16612;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18112);
              reg = x18112;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18325);
              reg = x18325;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18357);
              reg = x18357;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16647);
              reg = x16647;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18139);
              reg = x18139;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18326);
              reg = x18326;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18358);
              reg = x18358;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16684);
              reg = x16684;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18164);
              reg = x18164;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18327);
              reg = x18327;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18359);
              reg = x18359;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16723);
              reg = x16723;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18187);
              reg = x18187;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18328);
              reg = x18328;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18360);
              reg = x18360;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16764);
              reg = x16764;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18208);
              reg = x18208;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18329);
              reg = x18329;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18361);
              reg = x18361;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16807);
              reg = x16807;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18227);
              reg = x18227;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18330);
              reg = x18330;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18362);
              reg = x18362;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16852);
              reg = x16852;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18244);
              reg = x18244;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18331);
              reg = x18331;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18363);
              reg = x18363;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16899);
              reg = x16899;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18259);
              reg = x18259;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18332);
              reg = x18332;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18364);
              reg = x18364;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16948);
              reg = x16948;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18272);
              reg = x18272;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18333);
              reg = x18333;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18365);
              reg = x18365;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16999);
              reg = x16999;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18283);
              reg = x18283;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18334);
              reg = x18334;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18366);
              reg = x18366;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17052);
              reg = x17052;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18292);
              reg = x18292;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18335);
              reg = x18335;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18367);
              reg = x18367;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17107);
              reg = x17107;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18299);
              reg = x18299;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18336);
              reg = x18336;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18368);
              reg = x18368;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17164);
              reg = x17164;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18304);
              reg = x18304;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18337);
              reg = x18337;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18369);
              reg = x18369;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17223);
              reg = x17223;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18307);
              reg = x18307;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18338);
              reg = x18338;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18370);
              reg = x18370;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17284);
              reg = x17284;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18308);
              reg = x18308;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18339);
              reg = x18339;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18371);
              reg = x18371;
            }
          }
        }
        if (x13622 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":360:0)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17347);
              reg = x17347;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:0)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13621 != 0) {
          if (x13669 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":364:0)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18340);
              reg = x18340;
            }
          }
          if (x13620 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:0)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19037 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x19037 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19037);
          reg = x19037;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19038 = args[2][119 * steps + ((cycle - 2) & mask)];
        assert(x19038 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19038);
          reg = x19038;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":379:0)
      auto x19039 = x13626 + x13629;
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19040 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19040 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19040);
          reg = x19040;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19041 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x19041 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19041);
          reg = x19041;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19042 = args[2][120 * steps + ((cycle - 2) & mask)];
        assert(x19042 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19042);
          reg = x19042;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19043 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19043 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19043);
          reg = x19043;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19044 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x19044 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19044);
          reg = x19044;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19045 = args[2][121 * steps + ((cycle - 2) & mask)];
        assert(x19045 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19045);
          reg = x19045;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19046 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19046 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19046);
          reg = x19046;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19047 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x19047 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19047);
          reg = x19047;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19048 = args[2][122 * steps + ((cycle - 2) & mask)];
        assert(x19048 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19048);
          reg = x19048;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19049 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19049 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19049);
          reg = x19049;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19050 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x19050 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19050);
          reg = x19050;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19051 = args[2][126 * steps + ((cycle - 2) & mask)];
        assert(x19051 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19051);
          reg = x19051;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19052 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19052 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19052);
          reg = x19052;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19053 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x19053 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19053);
          reg = x19053;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19054 = args[2][127 * steps + ((cycle - 2) & mask)];
        assert(x19054 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19054);
          reg = x19054;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19055 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19055 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19055);
          reg = x19055;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19056 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x19056 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19056);
          reg = x19056;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19057 = args[2][128 * steps + ((cycle - 2) & mask)];
        assert(x19057 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19057);
          reg = x19057;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19058 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19058 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19058);
          reg = x19058;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19059 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x19059 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19059);
          reg = x19059;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19060 = args[2][129 * steps + ((cycle - 2) & mask)];
        assert(x19060 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19060);
          reg = x19060;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19061 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19061 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19061);
          reg = x19061;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19062 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x19062 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19062);
          reg = x19062;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19063 = args[2][133 * steps + ((cycle - 2) & mask)];
        assert(x19063 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19063);
          reg = x19063;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19064 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19064 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19064);
          reg = x19064;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19065 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x19065 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19065);
          reg = x19065;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19066 = args[2][134 * steps + ((cycle - 2) & mask)];
        assert(x19066 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19066);
          reg = x19066;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19067 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19067 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19067);
          reg = x19067;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19068 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x19068 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19068);
          reg = x19068;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19069 = args[2][135 * steps + ((cycle - 2) & mask)];
        assert(x19069 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19069);
          reg = x19069;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19070 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19070 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19070);
          reg = x19070;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19071 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x19071 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19071);
          reg = x19071;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19072 = args[2][136 * steps + ((cycle - 2) & mask)];
        assert(x19072 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19072);
          reg = x19072;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19073 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19073 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19073);
          reg = x19073;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19074 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x19074 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19074);
          reg = x19074;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19075 = args[2][140 * steps + ((cycle - 2) & mask)];
        assert(x19075 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19075);
          reg = x19075;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19076 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19076 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19076);
          reg = x19076;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19077 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x19077 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19077);
          reg = x19077;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19078 = args[2][141 * steps + ((cycle - 2) & mask)];
        assert(x19078 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19078);
          reg = x19078;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19079 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19079 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19079);
          reg = x19079;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19080 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x19080 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19080);
          reg = x19080;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19081 = args[2][142 * steps + ((cycle - 2) & mask)];
        assert(x19081 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19081);
          reg = x19081;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19082 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19082 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19082);
          reg = x19082;
        }
      }
      if (x13626 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19083 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x19083 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":373:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19083);
          reg = x19083;
        }
      }
      if (x13629 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19084 = args[2][143 * steps + ((cycle - 2) & mask)];
        assert(x19084 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":376:0)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19084);
          reg = x19084;
        }
      }
      if (x19039 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19085 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19085 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:0)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19085);
          reg = x19085;
        }
      }
      if (x13635 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19086 = args[2][19 * steps + ((cycle - 5) & mask)];
        assert(x19086 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19087 = x19086 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19088 = args[2][18 * steps + ((cycle - 5) & mask)];
        assert(x19088 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19089 = x19088 + x19087;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19090 = x19089 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19091 = args[2][18 * steps + ((cycle - 1) & mask)];
        assert(x19091 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19092 = args[2][180 * steps + ((cycle - 1) & mask)];
        assert(x19092 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19093 = x19090 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19094 = x19093 + x19091;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19095 = x19092 - x19094;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19095 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19096 = args[2][21 * steps + ((cycle - 5) & mask)];
        assert(x19096 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19097 = x19096 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19098 = args[2][20 * steps + ((cycle - 5) & mask)];
        assert(x19098 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19099 = x19098 + x19097;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19100 = x19099 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19101 = args[2][19 * steps + ((cycle - 1) & mask)];
        assert(x19101 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19102 = args[2][181 * steps + ((cycle - 1) & mask)];
        assert(x19102 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19103 = x19100 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19104 = x19103 + x19101;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19105 = x19102 + x19090;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19106 = x19105 - x19104;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19106 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19107 = args[2][23 * steps + ((cycle - 5) & mask)];
        assert(x19107 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19108 = x19107 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19109 = args[2][22 * steps + ((cycle - 5) & mask)];
        assert(x19109 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19110 = x19109 + x19108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19111 = x19110 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19112 = args[2][20 * steps + ((cycle - 1) & mask)];
        assert(x19112 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19113 = args[2][182 * steps + ((cycle - 1) & mask)];
        assert(x19113 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19114 = x19111 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19115 = x19114 + x19112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19116 = x19113 + x19100;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19117 = x19116 - x19115;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19117 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19118 = args[2][25 * steps + ((cycle - 5) & mask)];
        assert(x19118 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19119 = x19118 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19120 = args[2][24 * steps + ((cycle - 5) & mask)];
        assert(x19120 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19121 = x19120 + x19119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19122 = x19121 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19123 = args[2][21 * steps + ((cycle - 1) & mask)];
        assert(x19123 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19124 = args[2][183 * steps + ((cycle - 1) & mask)];
        assert(x19124 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19125 = x19122 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19126 = x19125 + x19123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19127 = x19124 + x19111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19128 = x19127 - x19126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19128 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19129 = args[2][27 * steps + ((cycle - 5) & mask)];
        assert(x19129 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19130 = x19129 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19131 = args[2][26 * steps + ((cycle - 5) & mask)];
        assert(x19131 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19132 = x19131 + x19130;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19133 = x19132 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19134 = args[2][22 * steps + ((cycle - 1) & mask)];
        assert(x19134 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19135 = args[2][184 * steps + ((cycle - 1) & mask)];
        assert(x19135 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19136 = x19133 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19137 = x19136 + x19134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19138 = x19135 + x19122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19139 = x19138 - x19137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19139 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19140 = args[2][29 * steps + ((cycle - 5) & mask)];
        assert(x19140 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19141 = x19140 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19142 = args[2][28 * steps + ((cycle - 5) & mask)];
        assert(x19142 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19143 = x19142 + x19141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19144 = x19143 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19145 = args[2][23 * steps + ((cycle - 1) & mask)];
        assert(x19145 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19146 = args[2][185 * steps + ((cycle - 1) & mask)];
        assert(x19146 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19147 = x19144 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19148 = x19147 + x19145;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19149 = x19146 + x19133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19150 = x19149 - x19148;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19150 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19151 = args[2][31 * steps + ((cycle - 5) & mask)];
        assert(x19151 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19152 = x19151 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19153 = args[2][30 * steps + ((cycle - 5) & mask)];
        assert(x19153 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19154 = x19153 + x19152;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19155 = x19154 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19156 = args[2][24 * steps + ((cycle - 1) & mask)];
        assert(x19156 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19157 = args[2][186 * steps + ((cycle - 1) & mask)];
        assert(x19157 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19158 = x19155 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19159 = x19158 + x19156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19160 = x19157 + x19144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19161 = x19160 - x19159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19161 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19162 = args[2][33 * steps + ((cycle - 5) & mask)];
        assert(x19162 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19163 = x19162 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19164 = args[2][32 * steps + ((cycle - 5) & mask)];
        assert(x19164 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19165 = x19164 + x19163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19166 = x19165 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19167 = args[2][25 * steps + ((cycle - 1) & mask)];
        assert(x19167 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19168 = args[2][187 * steps + ((cycle - 1) & mask)];
        assert(x19168 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19169 = x19166 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19170 = x19169 + x19167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19171 = x19168 + x19155;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19172 = x19171 - x19170;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19172 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19173 = args[2][19 * steps + ((cycle - 4) & mask)];
        assert(x19173 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19174 = x19173 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19175 = args[2][18 * steps + ((cycle - 4) & mask)];
        assert(x19175 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19176 = x19175 + x19174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19177 = x19176 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19178 = args[2][26 * steps + ((cycle - 1) & mask)];
        assert(x19178 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19179 = args[2][188 * steps + ((cycle - 1) & mask)];
        assert(x19179 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19180 = x19177 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19181 = x19180 + x19178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19182 = x19179 + x19166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19183 = x19182 - x19181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19183 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19184 = args[2][21 * steps + ((cycle - 4) & mask)];
        assert(x19184 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19185 = x19184 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19186 = args[2][20 * steps + ((cycle - 4) & mask)];
        assert(x19186 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19187 = x19186 + x19185;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19188 = x19187 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19189 = args[2][27 * steps + ((cycle - 1) & mask)];
        assert(x19189 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19190 = args[2][189 * steps + ((cycle - 1) & mask)];
        assert(x19190 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19191 = x19188 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19192 = x19191 + x19189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19193 = x19190 + x19177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19194 = x19193 - x19192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19194 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19195 = args[2][23 * steps + ((cycle - 4) & mask)];
        assert(x19195 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19196 = x19195 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19197 = args[2][22 * steps + ((cycle - 4) & mask)];
        assert(x19197 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19198 = x19197 + x19196;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19199 = x19198 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19200 = args[2][28 * steps + ((cycle - 1) & mask)];
        assert(x19200 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19201 = args[2][190 * steps + ((cycle - 1) & mask)];
        assert(x19201 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19202 = x19199 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19203 = x19202 + x19200;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19204 = x19201 + x19188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19205 = x19204 - x19203;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19205 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19206 = args[2][25 * steps + ((cycle - 4) & mask)];
        assert(x19206 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19207 = x19206 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19208 = args[2][24 * steps + ((cycle - 4) & mask)];
        assert(x19208 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19209 = x19208 + x19207;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19210 = x19209 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19211 = args[2][29 * steps + ((cycle - 1) & mask)];
        assert(x19211 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19212 = args[2][191 * steps + ((cycle - 1) & mask)];
        assert(x19212 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19213 = x19210 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19214 = x19213 + x19211;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19215 = x19212 + x19199;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19216 = x19215 - x19214;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19216 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19217 = args[2][27 * steps + ((cycle - 4) & mask)];
        assert(x19217 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19218 = x19217 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19219 = args[2][26 * steps + ((cycle - 4) & mask)];
        assert(x19219 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19220 = x19219 + x19218;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19221 = x19220 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19222 = args[2][30 * steps + ((cycle - 1) & mask)];
        assert(x19222 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19223 = args[2][192 * steps + ((cycle - 1) & mask)];
        assert(x19223 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19224 = x19221 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19225 = x19224 + x19222;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19226 = x19223 + x19210;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19227 = x19226 - x19225;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19227 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19228 = args[2][29 * steps + ((cycle - 4) & mask)];
        assert(x19228 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19229 = x19228 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19230 = args[2][28 * steps + ((cycle - 4) & mask)];
        assert(x19230 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19231 = x19230 + x19229;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19232 = x19231 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19233 = args[2][31 * steps + ((cycle - 1) & mask)];
        assert(x19233 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19234 = args[2][193 * steps + ((cycle - 1) & mask)];
        assert(x19234 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19235 = x19232 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19236 = x19235 + x19233;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19237 = x19234 + x19221;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19238 = x19237 - x19236;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19238 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19239 = args[2][31 * steps + ((cycle - 4) & mask)];
        assert(x19239 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19240 = x19239 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19241 = args[2][30 * steps + ((cycle - 4) & mask)];
        assert(x19241 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19242 = x19241 + x19240;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19243 = x19242 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19244 = args[2][32 * steps + ((cycle - 1) & mask)];
        assert(x19244 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19245 = args[2][194 * steps + ((cycle - 1) & mask)];
        assert(x19245 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19246 = x19243 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19247 = x19246 + x19244;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19248 = x19245 + x19232;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19249 = x19248 - x19247;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19249 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19250 = args[2][33 * steps + ((cycle - 4) & mask)];
        assert(x19250 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19251 = x19250 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19252 = args[2][32 * steps + ((cycle - 4) & mask)];
        assert(x19252 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19253 = x19252 + x19251;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19254 = x19253 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19255 = args[2][33 * steps + ((cycle - 1) & mask)];
        assert(x19255 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19256 = args[2][195 * steps + ((cycle - 1) & mask)];
        assert(x19256 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19257 = x19254 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19258 = x19257 + x19255;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19259 = x19256 + x19243;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19260 = x19259 - x19258;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19260 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19261 = args[2][19 * steps + ((cycle - 3) & mask)];
        assert(x19261 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19262 = x19261 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19263 = args[2][18 * steps + ((cycle - 3) & mask)];
        assert(x19263 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19264 = x19263 + x19262;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19265 = x19264 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19266 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x19266 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19267 = args[2][196 * steps + ((cycle - 1) & mask)];
        assert(x19267 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19268 = x19265 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19269 = x19268 + x19266;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19270 = x19267 + x19254;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19271 = x19270 - x19269;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19271 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19272 = args[2][21 * steps + ((cycle - 3) & mask)];
        assert(x19272 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19273 = x19272 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19274 = args[2][20 * steps + ((cycle - 3) & mask)];
        assert(x19274 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19275 = x19274 + x19273;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19276 = x19275 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19277 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x19277 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19278 = args[2][197 * steps + ((cycle - 1) & mask)];
        assert(x19278 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19279 = x19276 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19280 = x19279 + x19277;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19281 = x19278 + x19265;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19282 = x19281 - x19280;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19282 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19283 = args[2][23 * steps + ((cycle - 3) & mask)];
        assert(x19283 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19284 = x19283 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19285 = args[2][22 * steps + ((cycle - 3) & mask)];
        assert(x19285 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19286 = x19285 + x19284;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19287 = x19286 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19288 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x19288 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19289 = args[2][198 * steps + ((cycle - 1) & mask)];
        assert(x19289 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19290 = x19287 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19291 = x19290 + x19288;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19292 = x19289 + x19276;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19293 = x19292 - x19291;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19293 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19294 = args[2][25 * steps + ((cycle - 3) & mask)];
        assert(x19294 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19295 = x19294 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19296 = args[2][24 * steps + ((cycle - 3) & mask)];
        assert(x19296 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19297 = x19296 + x19295;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19298 = x19297 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19299 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x19299 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19300 = args[2][199 * steps + ((cycle - 1) & mask)];
        assert(x19300 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19301 = x19298 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19302 = x19301 + x19299;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19303 = x19300 + x19287;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19304 = x19303 - x19302;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19304 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19305 = args[2][27 * steps + ((cycle - 3) & mask)];
        assert(x19305 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19306 = x19305 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19307 = args[2][26 * steps + ((cycle - 3) & mask)];
        assert(x19307 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19308 = x19307 + x19306;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19309 = x19308 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19310 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x19310 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19311 = args[2][200 * steps + ((cycle - 1) & mask)];
        assert(x19311 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19312 = x19309 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19313 = x19312 + x19310;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19314 = x19311 + x19298;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19315 = x19314 - x19313;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19315 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19316 = args[2][29 * steps + ((cycle - 3) & mask)];
        assert(x19316 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19317 = x19316 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19318 = args[2][28 * steps + ((cycle - 3) & mask)];
        assert(x19318 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19319 = x19318 + x19317;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19320 = x19319 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19321 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x19321 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19322 = args[2][201 * steps + ((cycle - 1) & mask)];
        assert(x19322 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19323 = x19320 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19324 = x19323 + x19321;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19325 = x19322 + x19309;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19326 = x19325 - x19324;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19326 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19327 = args[2][31 * steps + ((cycle - 3) & mask)];
        assert(x19327 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19328 = x19327 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19329 = args[2][30 * steps + ((cycle - 3) & mask)];
        assert(x19329 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19330 = x19329 + x19328;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19331 = x19330 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19332 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x19332 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19333 = args[2][202 * steps + ((cycle - 1) & mask)];
        assert(x19333 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19334 = x19331 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19335 = x19334 + x19332;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19336 = x19333 + x19320;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19337 = x19336 - x19335;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19337 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19338 = args[2][33 * steps + ((cycle - 3) & mask)];
        assert(x19338 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19339 = x19338 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19340 = args[2][32 * steps + ((cycle - 3) & mask)];
        assert(x19340 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19341 = x19340 + x19339;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19342 = x19341 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19343 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x19343 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19344 = args[2][203 * steps + ((cycle - 1) & mask)];
        assert(x19344 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19345 = x19342 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19346 = x19345 + x19343;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19347 = x19344 + x19331;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19348 = x19347 - x19346;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19348 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19349 = args[2][19 * steps + ((cycle - 2) & mask)];
        assert(x19349 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19350 = x19349 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19351 = args[2][18 * steps + ((cycle - 2) & mask)];
        assert(x19351 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19352 = x19351 + x19350;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19353 = x19352 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19354 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x19354 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19355 = args[2][204 * steps + ((cycle - 1) & mask)];
        assert(x19355 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19356 = x19353 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19357 = x19356 + x19354;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19358 = x19355 + x19342;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19359 = x19358 - x19357;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19359 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19360 = args[2][21 * steps + ((cycle - 2) & mask)];
        assert(x19360 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19361 = x19360 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19362 = args[2][20 * steps + ((cycle - 2) & mask)];
        assert(x19362 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19363 = x19362 + x19361;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19364 = x19363 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19365 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x19365 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19366 = args[2][205 * steps + ((cycle - 1) & mask)];
        assert(x19366 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19367 = x19364 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19368 = x19367 + x19365;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19369 = x19366 + x19353;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19370 = x19369 - x19368;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19370 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19371 = args[2][23 * steps + ((cycle - 2) & mask)];
        assert(x19371 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19372 = x19371 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19373 = args[2][22 * steps + ((cycle - 2) & mask)];
        assert(x19373 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19374 = x19373 + x19372;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19375 = x19374 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19376 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x19376 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19377 = args[2][206 * steps + ((cycle - 1) & mask)];
        assert(x19377 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19378 = x19375 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19379 = x19378 + x19376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19380 = x19377 + x19364;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19381 = x19380 - x19379;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19381 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19382 = args[2][25 * steps + ((cycle - 2) & mask)];
        assert(x19382 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19383 = x19382 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19384 = args[2][24 * steps + ((cycle - 2) & mask)];
        assert(x19384 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19385 = x19384 + x19383;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19386 = x19385 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19387 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x19387 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19388 = args[2][207 * steps + ((cycle - 1) & mask)];
        assert(x19388 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19389 = x19386 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19390 = x19389 + x19387;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19391 = x19388 + x19375;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19392 = x19391 - x19390;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19392 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19393 = args[2][27 * steps + ((cycle - 2) & mask)];
        assert(x19393 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19394 = x19393 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19395 = args[2][26 * steps + ((cycle - 2) & mask)];
        assert(x19395 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19396 = x19395 + x19394;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19397 = x19396 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19398 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x19398 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19399 = args[2][208 * steps + ((cycle - 1) & mask)];
        assert(x19399 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19400 = x19397 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19401 = x19400 + x19398;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19402 = x19399 + x19386;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19403 = x19402 - x19401;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19403 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19404 = args[2][29 * steps + ((cycle - 2) & mask)];
        assert(x19404 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19405 = x19404 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19406 = args[2][28 * steps + ((cycle - 2) & mask)];
        assert(x19406 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19407 = x19406 + x19405;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19408 = x19407 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19409 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x19409 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19410 = args[2][209 * steps + ((cycle - 1) & mask)];
        assert(x19410 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19411 = x19408 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19412 = x19411 + x19409;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19413 = x19410 + x19397;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19414 = x19413 - x19412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19414 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19415 = args[2][31 * steps + ((cycle - 2) & mask)];
        assert(x19415 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19416 = x19415 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19417 = args[2][30 * steps + ((cycle - 2) & mask)];
        assert(x19417 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19418 = x19417 + x19416;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19419 = x19418 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19420 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x19420 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19421 = args[2][210 * steps + ((cycle - 1) & mask)];
        assert(x19421 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19422 = x19419 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19423 = x19422 + x19420;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19424 = x19421 + x19408;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19425 = x19424 - x19423;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19425 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19426 = args[2][33 * steps + ((cycle - 2) & mask)];
        assert(x19426 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19427 = x19426 * x91;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19428 = args[2][32 * steps + ((cycle - 2) & mask)];
        assert(x19428 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:0)
        auto x19429 = x19428 + x19427;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:0)
        auto x19430 = x19429 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19431 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x19431 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19432 = args[2][211 * steps + ((cycle - 1) & mask)];
        assert(x19432 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19433 = x19430 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19434 = x19433 + x19431;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19435 = x19432 + x19419;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19436 = x19435 - x19434;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19436 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19437 = args[2][212 * steps + ((cycle - 5) & mask)];
        assert(x19437 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19438 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x19438 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19439 = x19437 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19440 = x19438 + x19430;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19441 = x19440 - x19439;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19441 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19442 = args[2][213 * steps + ((cycle - 5) & mask)];
        assert(x19442 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19443 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x19443 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19444 = x19442 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19445 = x19443 + x19437;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19446 = x19445 - x19444;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19446 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19447 = args[2][214 * steps + ((cycle - 5) & mask)];
        assert(x19447 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19448 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x19448 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19449 = x19447 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19450 = x19448 + x19442;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19451 = x19450 - x19449;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19451 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19452 = args[2][215 * steps + ((cycle - 5) & mask)];
        assert(x19452 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19453 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x19453 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19454 = x19452 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19455 = x19453 + x19447;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19456 = x19455 - x19454;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19456 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19457 = args[2][216 * steps + ((cycle - 5) & mask)];
        assert(x19457 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19458 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x19458 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19459 = x19457 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19460 = x19458 + x19452;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19461 = x19460 - x19459;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19461 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19462 = args[2][217 * steps + ((cycle - 5) & mask)];
        assert(x19462 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19463 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x19463 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19464 = x19462 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19465 = x19463 + x19457;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19466 = x19465 - x19464;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19466 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19467 = args[2][218 * steps + ((cycle - 5) & mask)];
        assert(x19467 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19468 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x19468 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19469 = x19467 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19470 = x19468 + x19462;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19471 = x19470 - x19469;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19471 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19472 = args[2][219 * steps + ((cycle - 5) & mask)];
        assert(x19472 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19473 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x19473 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19474 = x19472 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19475 = x19473 + x19467;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19476 = x19475 - x19474;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19476 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19477 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x19477 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19478 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x19478 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19479 = x19477 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19480 = x19478 + x19472;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19481 = x19480 - x19479;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19481 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19482 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x19482 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19483 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x19483 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19484 = x19482 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19485 = x19483 + x19477;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19486 = x19485 - x19484;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19486 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19487 = args[2][214 * steps + ((cycle - 4) & mask)];
        assert(x19487 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19488 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x19488 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19489 = x19487 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19490 = x19488 + x19482;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19491 = x19490 - x19489;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19491 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19492 = args[2][215 * steps + ((cycle - 4) & mask)];
        assert(x19492 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19493 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x19493 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19494 = x19492 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19495 = x19493 + x19487;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19496 = x19495 - x19494;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19496 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19497 = args[2][216 * steps + ((cycle - 4) & mask)];
        assert(x19497 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19498 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x19498 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19499 = x19497 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19500 = x19498 + x19492;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19501 = x19500 - x19499;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19501 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19502 = args[2][217 * steps + ((cycle - 4) & mask)];
        assert(x19502 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19503 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x19503 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19504 = x19502 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19505 = x19503 + x19497;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19506 = x19505 - x19504;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19506 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19507 = args[2][218 * steps + ((cycle - 4) & mask)];
        assert(x19507 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19508 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x19508 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19509 = x19507 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19510 = x19508 + x19502;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19511 = x19510 - x19509;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19511 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19512 = args[2][219 * steps + ((cycle - 4) & mask)];
        assert(x19512 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19513 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x19513 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19514 = x19512 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19515 = x19513 + x19507;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19516 = x19515 - x19514;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19516 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19517 = args[2][212 * steps + ((cycle - 3) & mask)];
        assert(x19517 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19518 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x19518 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19519 = x19517 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19520 = x19518 + x19512;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19521 = x19520 - x19519;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19521 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19522 = args[2][213 * steps + ((cycle - 3) & mask)];
        assert(x19522 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19523 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x19523 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19524 = x19522 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19525 = x19523 + x19517;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19526 = x19525 - x19524;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19526 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19527 = args[2][214 * steps + ((cycle - 3) & mask)];
        assert(x19527 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19528 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x19528 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19529 = x19527 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19530 = x19528 + x19522;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19531 = x19530 - x19529;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19531 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19532 = args[2][215 * steps + ((cycle - 3) & mask)];
        assert(x19532 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19533 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x19533 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19534 = x19532 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19535 = x19533 + x19527;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19536 = x19535 - x19534;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19536 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19537 = args[2][216 * steps + ((cycle - 3) & mask)];
        assert(x19537 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19538 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x19538 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19539 = x19537 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19540 = x19538 + x19532;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19541 = x19540 - x19539;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19541 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19542 = args[2][217 * steps + ((cycle - 3) & mask)];
        assert(x19542 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19543 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x19543 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19544 = x19542 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19545 = x19543 + x19537;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19546 = x19545 - x19544;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19546 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19547 = args[2][218 * steps + ((cycle - 3) & mask)];
        assert(x19547 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19548 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x19548 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19549 = x19547 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19550 = x19548 + x19542;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19551 = x19550 - x19549;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19551 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19552 = args[2][219 * steps + ((cycle - 3) & mask)];
        assert(x19552 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19553 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x19553 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19554 = x19552 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19555 = x19553 + x19547;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19556 = x19555 - x19554;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19556 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19557 = args[2][212 * steps + ((cycle - 2) & mask)];
        assert(x19557 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19558 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x19558 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19559 = x19557 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19560 = x19558 + x19552;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19561 = x19560 - x19559;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19561 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19562 = args[2][213 * steps + ((cycle - 2) & mask)];
        assert(x19562 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19563 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x19563 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19564 = x19562 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19565 = x19563 + x19557;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19566 = x19565 - x19564;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19566 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19567 = args[2][214 * steps + ((cycle - 2) & mask)];
        assert(x19567 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19568 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x19568 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19569 = x19567 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19570 = x19568 + x19562;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19571 = x19570 - x19569;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19571 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19572 = args[2][215 * steps + ((cycle - 2) & mask)];
        assert(x19572 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19573 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x19573 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19574 = x19572 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19575 = x19573 + x19567;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19576 = x19575 - x19574;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19576 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19577 = args[2][216 * steps + ((cycle - 2) & mask)];
        assert(x19577 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19578 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x19578 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19579 = x19577 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19580 = x19578 + x19572;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19581 = x19580 - x19579;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19581 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":415:0))
        auto x19582 = args[2][217 * steps + ((cycle - 2) & mask)];
        assert(x19582 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19583 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x19583 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19584 = x19582 * x91;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19585 = x19583 + x19577;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19586 = x19585 - x19584;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19586 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":425:0))
        auto x19587 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x19587 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        auto x19588 = x19587 + x19582;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":428:0)
        if (x19588 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:428");
      }
      if (x13621 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19589 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x19589 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19590 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x19590 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19591 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x19591 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19592 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x19592 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":438:0)
        auto x19593 = x13620 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x19594 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x19594 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":438:0)
        auto x19595 = x19594 + x19593;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19592);
          reg = x19592;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19591);
          reg = x19591;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19590);
          reg = x19590;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19589);
          reg = x19589;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x19595, x19592, x19591, x19590, x19589, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19596 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19596 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19597 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19597 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19598 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19598 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19599 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19599 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19595);
          reg = x19595;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19596);
          reg = x19596;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19597);
          reg = x19597;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19598);
          reg = x19598;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19599);
          reg = x19599;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19600 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x19600 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19601 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x19601 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19602 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x19602 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19603 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x19603 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":438:0)
        auto x19604 = x19595 + x96;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19603);
          reg = x19603;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19602);
          reg = x19602;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19601);
          reg = x19601;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19600);
          reg = x19600;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x19604, x19603, x19602, x19601, x19600, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19605 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19605 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19606 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19606 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19607 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19607 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19608 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19608 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19604);
          reg = x19604;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19605);
          reg = x19605;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19606);
          reg = x19606;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19607);
          reg = x19607;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19608);
          reg = x19608;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19609 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x19609 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19610 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x19610 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19611 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x19611 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19612 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x19612 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":438:0)
        auto x19613 = x19595 + x93;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19612);
          reg = x19612;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19611);
          reg = x19611;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19610);
          reg = x19610;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19609);
          reg = x19609;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x19613, x19612, x19611, x19610, x19609, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19614 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19614 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19615 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19615 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19616 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19616 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19617 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19617 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19613);
          reg = x19613;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19614);
          reg = x19614;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19615);
          reg = x19615;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19616);
          reg = x19616;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19617);
          reg = x19617;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19618 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x19618 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19619 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x19619 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19620 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x19620 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:0))
        auto x19621 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x19621 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":438:0)
        auto x19622 = x19595 + x76;
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19621);
          reg = x19621;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19620);
          reg = x19620;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19619);
          reg = x19619;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19618);
          reg = x19618;
        }
        {
          extern_ramWrite(ctx, cycle, "", {x19622, x19621, x19620, x19619, x19618, x93});
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19623 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19623 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19624 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19624 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19625 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19625 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19626 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19626 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:0)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19622);
          reg = x19622;
        }
        // loc("zirgen/components/ram.cpp":169:0)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("zirgen/components/ram.cpp":170:0)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19623);
          reg = x19623;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19624);
          reg = x19624;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19625);
          reg = x19625;
        }
        // loc("zirgen/components/u32.cpp":34:0)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19626);
          reg = x19626;
        }
        // loc("./zirgen/components/u32.h":27:0)
        auto x19627 = x19626 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x19628 = x19625 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x19629 = x19624 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x19630 = x19623 + x19629;
        // loc("./zirgen/components/u32.h":26:0)
        auto x19631 = x19630 + x19628;
        // loc("./zirgen/components/u32.h":27:0)
        auto x19632 = x19631 + x19627;
        // loc("./zirgen/components/u32.h":27:0)
        auto x19633 = x19617 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x19634 = x19616 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x19635 = x19615 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x19636 = x19614 + x19635;
        // loc("./zirgen/components/u32.h":26:0)
        auto x19637 = x19636 + x19634;
        // loc("./zirgen/components/u32.h":27:0)
        auto x19638 = x19637 + x19633;
        // loc("./zirgen/components/u32.h":27:0)
        auto x19639 = x19608 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x19640 = x19607 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x19641 = x19606 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x19642 = x19605 + x19641;
        // loc("./zirgen/components/u32.h":26:0)
        auto x19643 = x19642 + x19640;
        // loc("./zirgen/components/u32.h":27:0)
        auto x19644 = x19643 + x19639;
        // loc("./zirgen/components/u32.h":27:0)
        auto x19645 = x19599 * x79;
        // loc("./zirgen/components/u32.h":26:0)
        auto x19646 = x19598 * x78;
        // loc("./zirgen/components/u32.h":25:0)
        auto x19647 = x19597 * x91;
        // loc("./zirgen/components/u32.h":25:0)
        auto x19648 = x19596 + x19647;
        // loc("./zirgen/components/u32.h":26:0)
        auto x19649 = x19648 + x19646;
        // loc("./zirgen/components/u32.h":27:0)
        auto x19650 = x19649 + x19645;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":445:0)
        auto x19651 = x19594 * x77;
        extern_log(ctx, cycle, "  Writing: ioAddr = 0x%x, data = { %u, %u, %u, %u }", {x19651, x19650, x19644, x19638, x19632});
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":453:0)
      auto x19652 = x96 - x13635;
      if (x19652 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x19653 = x959 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x19654 = Fp(x19653.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19654);
            reg = x19654;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x19655 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x19655 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19656 = x19653 - x19655;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19657 = x19656 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x19658 = Fp(x19657.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19658);
            reg = x19658;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x19659 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x19659 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19660 = x19657 - x19659;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19661 = x19660 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x19662 = Fp(x19661.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19662);
            reg = x19662;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x19663 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x19663 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19664 = x19661 - x19663;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19665 = x19664 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x19666 = Fp(x19665.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19666);
            reg = x19666;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19667 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x19667 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x19668 = x19665 - x19667;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x19669 = x19668 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19669);
          reg = x19669;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19670 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x19670 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x19671 = x96 - x19670;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x19672 = x19670 * x19671;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19672);
          reg = x19672;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x19673 = x93 - x19670;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x19674 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x19674 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x19675 = x19674 * x19673;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x19675 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":455:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
      }
      if (x13635 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":458:0)
        auto x19676 = x959 + x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
        auto x19677 = x19676 + x77;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x19678 = Fp(x19677.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19678);
            reg = x19678;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x19679 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x19679 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19680 = x19677 - x19679;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19681 = x19680 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x19682 = Fp(x19681.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19682);
            reg = x19682;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x19683 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x19683 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19684 = x19681 - x19683;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19685 = x19684 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:0)
          auto x19686 = Fp(x19685.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:0)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19686);
            reg = x19686;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
        auto x19687 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x19687 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19688 = x19685 - x19687;
        // loc("zirgen/components/bytes.cpp":97:0)
        auto x19689 = x19688 * x90;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
          auto x19690 = Fp(x19689.asUInt32() & x76.asUInt32());
          // loc("./zirgen/components/bits.h":68:0)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19690);
            reg = x19690;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19691 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x19691 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x19692 = x19689 - x19691;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
        auto x19693 = x19692 * x75;
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19693);
          reg = x19693;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19694 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x19694 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x19695 = x96 - x19694;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        auto x19696 = x19694 * x19695;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19696);
          reg = x19696;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x19697 = x93 - x19694;
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
        auto x19698 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x19698 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        auto x19699 = x19698 * x19697;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
        if (x19699 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":459:0)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/components/mux.h":49:0))
    auto x19700 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19700 != Fp::invalid());
    if (x19700 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":137:0))
      auto x19701 = args[2][115 * steps + ((cycle - 1) & mask)];
      assert(x19701 != Fp::invalid());
      if (x19701 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":139:0))
        auto x19702 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x19702 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":139:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19702);
          reg = x19702;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":140:0))
        auto x19703 = args[2][117 * steps + ((cycle - 1) & mask)];
        assert(x19703 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":140:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19703);
          reg = x19703;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":141:0))
        auto x19704 = args[2][118 * steps + ((cycle - 1) & mask)];
        assert(x19704 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":141:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19704);
          reg = x19704;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":144:0))
      auto x19705 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x19705 != Fp::invalid());
      if (x19705 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":147:0))
        auto x19706 = args[2][187 * steps + ((cycle - 1) & mask)];
        assert(x19706 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":148:0)
        auto x19707 = x96 - x19706;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":148:0)
        if (x19707 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:148");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19708 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x19708 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19709 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x19709 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/0(ECallHalt)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":152:0))
        auto x19710 = args[2][192 * steps + ((cycle - 1) & mask)];
        assert(x19710 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":152:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19710);
          reg = x19710;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":153:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19708);
          reg = x19708;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":154:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19709);
          reg = x19709;
        }
        extern_log(ctx, cycle, "isFromEcall, set sysExitCode: %u", {x19708});
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":156:0)
        args[1][104] = x19708;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":157:0)
        args[1][105] = x19709;
        {
          extern_halt(ctx, cycle, "", {x19708, x959});
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":163:0))
      auto x19711 = args[2][112 * steps + ((cycle - 1) & mask)];
      assert(x19711 != Fp::invalid());
      if (x19711 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":165:0)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":166:0)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":167:0)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x0);
          reg = x0;
        }
        extern_log(ctx, cycle, "isFromPageFault, set sysExitCode: %u", {x93});
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":169:0)
        args[1][104] = x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":170:0)
        args[1][105] = x95;
        {
          extern_halt(ctx, cycle, "", {x93, x959});
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":14:0)
      auto x19712 = x959 + x77;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x19713 = Fp(x19712.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19713);
          reg = x19713;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x19714 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x19714 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x19715 = x19712 - x19714;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x19716 = x19715 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x19717 = Fp(x19716.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19717);
          reg = x19717;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x19718 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x19718 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x19719 = x19716 - x19718;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x19720 = x19719 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:0)
        auto x19721 = Fp(x19720.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:0)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19721);
          reg = x19721;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:0))
      auto x19722 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x19722 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x19723 = x19720 - x19722;
      // loc("zirgen/components/bytes.cpp":97:0)
      auto x19724 = x19723 * x90;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":17:0)
        auto x19725 = Fp(x19724.asUInt32() & x76.asUInt32());
        // loc("./zirgen/components/bits.h":68:0)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19725);
          reg = x19725;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19726 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x19726 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x19727 = x19724 - x19726;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":18:0)
      auto x19728 = x19727 * x75;
      // loc("./zirgen/components/bits.h":68:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x19728);
        reg = x19728;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19729 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x19729 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x19730 = x96 - x19729;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      auto x19731 = x19729 * x19730;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":22:0)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x19731);
        reg = x19731;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x19732 = x93 - x19729;
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:0))
      auto x19733 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x19733 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      auto x19734 = x19733 * x19732;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":23:0)
      if (x19734 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:23");
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":177:0)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x73);
        reg = x73;
      }
    }
  }
  // loc("Top/Code/OneHot/hot[6](Reg)"("./zirgen/components/mux.h":49:0))
  auto x19735 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x19735 != Fp::invalid());
  if (x19735 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x19736 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x19736 != Fp::invalid());
    extern_log(ctx, cycle, "%u: RamFini", {x19736});
  }
  // loc("Top/Code/OneHot/hot[7](Reg)"("./zirgen/components/mux.h":49:0))
  auto x19737 = args[0][8 * steps + ((cycle - 0) & mask)];
  assert(x19737 != Fp::invalid());
  if (x19737 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:0))
    auto x19738 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x19738 != Fp::invalid());
    extern_log(ctx, cycle, "%u: BytesFini", {x19738});
  }
  // loc("Top/Code/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0))
  auto x19739 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x19739 != Fp::invalid());
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0)
  auto x19740 = x19739 + x97;
  // loc("Top/Code/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0))
  auto x19741 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x19741 != Fp::invalid());
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0)
  auto x19742 = x19740 + x19741;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0)
  auto x19743 = x19742 + x422;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0)
  auto x19744 = x19743 + x475;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0)
  auto x19745 = x19744 + x944;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0)
  auto x19746 = x19745 + x19735;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":78:0)
  auto x19747 = x19746 + x19737;
  if (x944 != 0) {
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("zirgen/circuit/rv32im/v1/edsl/top.cpp":86:0))
    auto x19748 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19748 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":87:0)
    {
      auto& reg = args[2][2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x19748);
      reg = x19748;
    }
  }
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":89:0)
  auto x19749 = x19747 - x944;
  if (x19749 != 0) {
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":89:0)
    {
      auto& reg = args[2][2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
  }
  // loc("Top/halted(Reg)"("./zirgen/compiler/edsl/edsl.h":117:0))
  auto x19750 = args[2][2 * steps + ((cycle - 0) & mask)];
  assert(x19750 != Fp::invalid());
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":90:0)
  auto x19751 = x96 - x19750;
  if (x19741 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
  }
  if (x422 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/ram.cpp":43:0)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/ram.cpp":44:0)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/ram.cpp":45:0)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":28:0)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/u32.cpp":28:0)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/u32.cpp":28:0)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/u32.cpp":28:0)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
  }
  if (x475 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
  }
  if (x944 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19752 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x19752 != Fp::invalid());
    if (x19752 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19753 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x19753 != Fp::invalid());
    if (x19753 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19754 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x19754 != Fp::invalid());
    if (x19754 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19755 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x19755 != Fp::invalid());
    if (x19755 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19756 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x19756 != Fp::invalid());
    if (x19756 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19757 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x19757 != Fp::invalid());
    if (x19757 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19758 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x19758 != Fp::invalid());
    if (x19758 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19759 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x19759 != Fp::invalid());
    if (x19759 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19760 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x19760 != Fp::invalid());
    if (x19760 != 0) {
      // loc("zirgen/compiler/edsl/component.cpp":39:0)
      auto x19761 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x19761 != Fp::invalid());
      if (x19761 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:0)
      auto x19762 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x19762 != Fp::invalid());
      if (x19762 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:0)
      auto x19763 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x19763 != Fp::invalid());
      if (x19763 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:0)
      auto x19764 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x19764 != Fp::invalid());
      if (x19764 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:0)
      auto x19765 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x19765 != Fp::invalid());
      if (x19765 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:0)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:0)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:0)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:0)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:0)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:0)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19766 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x19766 != Fp::invalid());
    if (x19766 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19767 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x19767 != Fp::invalid());
    if (x19767 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19768 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x19768 != Fp::invalid());
    if (x19768 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19769 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x19769 != Fp::invalid());
    if (x19769 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19770 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x19770 != Fp::invalid());
    if (x19770 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19771 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x19771 != Fp::invalid());
    if (x19771 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19772 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19772 != Fp::invalid());
    if (x19772 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:0)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:0)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
  }
  if (x19735 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:0)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:0)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
  }
  if (x422 != 0) {
    {
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19773 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x19773 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19774 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x19774 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19775 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x19775 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19776 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x19776 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19777 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x19777 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19778 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x19778 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19779 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x19779 != Fp::invalid());
      extern_plonkWrite_ram(ctx, cycle, "ram", {x19773, x19774, x19775, x19776, x19777, x19778, x19779});
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19780 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x19780 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19781 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x19781 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19782 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x19782 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19783 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x19783 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19784 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x19784 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19785 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x19785 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19786 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x19786 != Fp::invalid());
      extern_plonkWrite_ram(ctx, cycle, "ram", {x19780, x19781, x19782, x19783, x19784, x19785, x19786});
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19787 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x19787 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19788 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x19788 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19789 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x19789 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19790 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x19790 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19791 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x19791 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19792 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x19792 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19793 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x19793 != Fp::invalid());
      extern_plonkWrite_ram(ctx, cycle, "ram", {x19787, x19788, x19789, x19790, x19791, x19792, x19793});
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19794 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x19794 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19795 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x19795 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19796 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x19796 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19797 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x19797 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19798 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x19798 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19799 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x19799 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19800 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x19800 != Fp::invalid());
      extern_plonkWrite_ram(ctx, cycle, "ram", {x19794, x19795, x19796, x19797, x19798, x19799, x19800});
    }
  }
  if (x475 != 0) {
    {
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19801 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x19801 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19802 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x19802 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19803 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x19803 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19804 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x19804 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19805 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x19805 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19806 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x19806 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19807 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x19807 != Fp::invalid());
      extern_plonkWrite_ram(ctx, cycle, "ram", {x19801, x19802, x19803, x19804, x19805, x19806, x19807});
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19808 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x19808 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19809 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x19809 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19810 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x19810 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19811 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x19811 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19812 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x19812 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19813 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x19813 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19814 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x19814 != Fp::invalid());
      extern_plonkWrite_ram(ctx, cycle, "ram", {x19808, x19809, x19810, x19811, x19812, x19813, x19814});
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19815 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x19815 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19816 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x19816 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19817 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x19817 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19818 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x19818 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19819 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x19819 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19820 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x19820 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19821 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x19821 != Fp::invalid());
      extern_plonkWrite_ram(ctx, cycle, "ram", {x19815, x19816, x19817, x19818, x19819, x19820, x19821});
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19822 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x19822 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19823 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x19823 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19824 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x19824 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19825 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x19825 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19826 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x19826 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19827 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x19827 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
      auto x19828 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x19828 != Fp::invalid());
      extern_plonkWrite_ram(ctx, cycle, "ram", {x19822, x19823, x19824, x19825, x19826, x19827, x19828});
    }
  }
  if (x944 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19829 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x19829 != Fp::invalid());
    if (x19829 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19830 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19830 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19831 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19831 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19832 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19832 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19833 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19833 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19834 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19834 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19835 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19835 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19836 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19836 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19830, x19831, x19832, x19833, x19834, x19835, x19836});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19837 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19837 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19838 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19838 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19839 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19839 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19840 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19840 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19841 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19841 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19842 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19842 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19843 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19843 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19837, x19838, x19839, x19840, x19841, x19842, x19843});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19844 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19844 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19845 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19845 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19846 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19846 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19847 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19847 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19848 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19848 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19849 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19849 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19850 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19850 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19844, x19845, x19846, x19847, x19848, x19849, x19850});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19851 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19851 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19852 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19852 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19853 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19853 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19854 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19854 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19855 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19855 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19856 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19856 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19857 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19857 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19851, x19852, x19853, x19854, x19855, x19856, x19857});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19858 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x19858 != Fp::invalid());
    if (x19858 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19859 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19859 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19860 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19860 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19861 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19861 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19862 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19862 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19863 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19863 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19864 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19864 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19865 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19865 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19859, x19860, x19861, x19862, x19863, x19864, x19865});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19866 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19866 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19867 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19867 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19868 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19868 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19869 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19869 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19870 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19870 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19871 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19871 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19872 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19872 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19866, x19867, x19868, x19869, x19870, x19871, x19872});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19873 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19873 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19874 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19874 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19875 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19875 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19876 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19876 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19877 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19877 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19878 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19878 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19879 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19879 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19873, x19874, x19875, x19876, x19877, x19878, x19879});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19880 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19880 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19881 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19881 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19882 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19882 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19883 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19883 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19884 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19884 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19885 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19885 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19886 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19886 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19880, x19881, x19882, x19883, x19884, x19885, x19886});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19887 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x19887 != Fp::invalid());
    if (x19887 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19888 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19888 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19889 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19889 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19890 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19890 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19891 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19891 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19892 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19892 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19893 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19893 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19894 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19894 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19888, x19889, x19890, x19891, x19892, x19893, x19894});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19895 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19895 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19896 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19896 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19897 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19897 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19898 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19898 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19899 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19899 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19900 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19900 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19901 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19901 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19895, x19896, x19897, x19898, x19899, x19900, x19901});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19902 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19902 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19903 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19903 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19904 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19904 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19905 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19905 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19906 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19906 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19907 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19907 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19908 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19908 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19902, x19903, x19904, x19905, x19906, x19907, x19908});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19909 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19909 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19910 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19910 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19911 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19911 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19912 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19912 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19913 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19913 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19914 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19914 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19915 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19915 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19909, x19910, x19911, x19912, x19913, x19914, x19915});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19916 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x19916 != Fp::invalid());
    if (x19916 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19917 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19917 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19918 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19918 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19919 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19919 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19920 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19920 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19921 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19921 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19922 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19922 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19923 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19923 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19917, x19918, x19919, x19920, x19921, x19922, x19923});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19924 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19924 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19925 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19925 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19926 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19926 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19927 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19927 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19928 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19928 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19929 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19929 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19930 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19930 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19924, x19925, x19926, x19927, x19928, x19929, x19930});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19931 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19931 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19932 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19932 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19933 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19933 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19934 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19934 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19935 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19935 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19936 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19936 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19937 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19937 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19931, x19932, x19933, x19934, x19935, x19936, x19937});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19938 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19938 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19939 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19939 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19940 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19940 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19941 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19941 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19942 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19942 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19943 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19943 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19944 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19944 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19938, x19939, x19940, x19941, x19942, x19943, x19944});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19945 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x19945 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19946 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x19946 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19947 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x19947 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19948 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x19948 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19949 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x19949 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19950 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x19950 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19951 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x19951 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19945, x19946, x19947, x19948, x19949, x19950, x19951});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19952 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x19952 != Fp::invalid());
    if (x19952 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19953 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19953 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19954 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19954 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19955 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19955 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19956 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19956 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19957 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19957 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19958 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19958 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19959 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19959 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19953, x19954, x19955, x19956, x19957, x19958, x19959});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19960 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19960 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19961 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19961 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19962 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19962 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19963 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19963 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19964 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19964 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19965 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19965 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19966 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19966 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19960, x19961, x19962, x19963, x19964, x19965, x19966});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19967 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19967 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19968 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19968 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19969 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19969 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19970 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19970 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19971 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19971 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19972 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19972 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19973 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19973 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19967, x19968, x19969, x19970, x19971, x19972, x19973});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19974 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19974 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19975 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19975 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19976 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19976 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19977 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19977 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19978 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19978 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19979 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19979 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19980 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19980 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19974, x19975, x19976, x19977, x19978, x19979, x19980});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x19981 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x19981 != Fp::invalid());
    if (x19981 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19982 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19982 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19983 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19983 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19984 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19984 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19985 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19985 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19986 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19986 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19987 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19987 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19988 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19988 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19982, x19983, x19984, x19985, x19986, x19987, x19988});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19989 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19989 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19990 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19990 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19991 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19991 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19992 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19992 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19993 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19993 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19994 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19994 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19995 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19995 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19989, x19990, x19991, x19992, x19993, x19994, x19995});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19996 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19996 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19997 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19997 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19998 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19998 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x19999 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19999 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20000 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x20000 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20001 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x20001 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20002 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x20002 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x19996, x19997, x19998, x19999, x20000, x20001, x20002});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20003 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x20003 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20004 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x20004 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20005 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x20005 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20006 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x20006 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20007 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x20007 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20008 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x20008 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20009 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x20009 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20003, x20004, x20005, x20006, x20007, x20008, x20009});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x20010 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x20010 != Fp::invalid());
    if (x20010 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20011 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x20011 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20012 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x20012 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20013 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x20013 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20014 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x20014 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20015 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x20015 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20016 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x20016 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20017 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x20017 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20011, x20012, x20013, x20014, x20015, x20016, x20017});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20018 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x20018 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20019 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x20019 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20020 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x20020 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20021 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x20021 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20022 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x20022 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20023 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x20023 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20024 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x20024 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20018, x20019, x20020, x20021, x20022, x20023, x20024});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20025 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x20025 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20026 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x20026 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20027 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x20027 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20028 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x20028 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20029 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x20029 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20030 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x20030 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20031 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x20031 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20025, x20026, x20027, x20028, x20029, x20030, x20031});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20032 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x20032 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20033 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x20033 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20034 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x20034 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20035 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x20035 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20036 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x20036 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20037 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x20037 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20038 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x20038 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20032, x20033, x20034, x20035, x20036, x20037, x20038});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20039 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x20039 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20040 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x20040 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20041 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x20041 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20042 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x20042 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20043 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x20043 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20044 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x20044 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20045 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x20045 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20039, x20040, x20041, x20042, x20043, x20044, x20045});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x20046 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x20046 != Fp::invalid());
    if (x20046 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20047 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x20047 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20048 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x20048 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20049 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x20049 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20050 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x20050 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20051 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x20051 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20052 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x20052 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20053 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x20053 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20047, x20048, x20049, x20050, x20051, x20052, x20053});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20054 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x20054 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20055 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x20055 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20056 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x20056 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20057 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x20057 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20058 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x20058 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20059 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x20059 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20060 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x20060 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20054, x20055, x20056, x20057, x20058, x20059, x20060});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x20061 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x20061 != Fp::invalid());
    if (x20061 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20062 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x20062 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20063 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x20063 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20064 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x20064 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20065 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x20065 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20066 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x20066 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20067 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x20067 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20068 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x20068 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20062, x20063, x20064, x20065, x20066, x20067, x20068});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20069 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x20069 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20070 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x20070 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20071 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x20071 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20072 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x20072 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20073 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x20073 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20074 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x20074 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20075 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x20075 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20069, x20070, x20071, x20072, x20073, x20074, x20075});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x20076 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x20076 != Fp::invalid());
    if (x20076 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20077 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x20077 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20078 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x20078 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20079 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x20079 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20080 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x20080 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20081 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x20081 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20082 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x20082 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20083 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x20083 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20077, x20078, x20079, x20080, x20081, x20082, x20083});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20084 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x20084 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20085 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x20085 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20086 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x20086 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20087 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x20087 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20088 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x20088 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20089 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x20089 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20090 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x20090 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20084, x20085, x20086, x20087, x20088, x20089, x20090});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x20091 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x20091 != Fp::invalid());
    if (x20091 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20092 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x20092 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20093 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x20093 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20094 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x20094 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20095 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x20095 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20096 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x20096 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20097 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x20097 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20098 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x20098 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20092, x20093, x20094, x20095, x20096, x20097, x20098});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20099 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x20099 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20100 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x20100 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20101 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x20101 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20102 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x20102 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20103 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x20103 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20104 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x20104 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20105 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x20105 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20099, x20100, x20101, x20102, x20103, x20104, x20105});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20106 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x20106 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20107 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x20107 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20108 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x20108 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20109 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x20109 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20110 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x20110 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20111 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x20111 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20112 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x20112 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20106, x20107, x20108, x20109, x20110, x20111, x20112});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20113 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x20113 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20114 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x20114 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20115 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x20115 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20116 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x20116 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20117 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x20117 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20118 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x20118 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20119 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x20119 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20113, x20114, x20115, x20116, x20117, x20118, x20119});
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:0)
    auto x20120 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x20120 != Fp::invalid());
    if (x20120 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20121 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x20121 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20122 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x20122 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20123 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x20123 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20124 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x20124 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20125 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x20125 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20126 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x20126 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20127 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x20127 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20121, x20122, x20123, x20124, x20125, x20126, x20127});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20128 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x20128 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20129 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x20129 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20130 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x20130 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20131 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x20131 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20132 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x20132 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20133 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x20133 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20134 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x20134 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20128, x20129, x20130, x20131, x20132, x20133, x20134});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20135 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x20135 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20136 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x20136 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20137 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x20137 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20138 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x20138 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20139 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x20139 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20140 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x20140 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20141 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x20141 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20135, x20136, x20137, x20138, x20139, x20140, x20141});
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20142 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x20142 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20143 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x20143 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20144 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x20144 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20145 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x20145 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20146 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x20146 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20147 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x20147 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:0))
        auto x20148 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x20148 != Fp::invalid());
        extern_plonkWrite_ram(ctx, cycle, "ram", {x20142, x20143, x20144, x20145, x20146, x20147, x20148});
      }
    }
  }
  return x19751;
}

} // namespace risc0::circuit::rv32im
// clang-format on
