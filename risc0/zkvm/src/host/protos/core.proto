syntax = "proto3";

import "base.proto";

package protos.core;

message ProveInfo {
  Receipt receipt = 1;
  SessionStats stats = 2;
}

message SessionStats {
  uint64 segments = 1;
  uint64 total_cycles = 2;
  uint64 user_cycles = 3;
}

message Receipt {
  protos.base.CompatVersion version = 1;
  InnerReceipt inner = 2;
  bytes journal = 3;
  ReceiptMetadata metadata = 4;
}

message ReceiptMetadata {
  Digest verifier_parameters = 1;
}

message InnerReceipt {
  oneof kind {
    CompositeReceipt composite = 1;
    SuccinctReceipt succinct = 2;
    FakeReceipt fake = 3;
    Groth16Receipt groth16 = 4;
  }
}

message CompositeReceipt {
  repeated SegmentReceipt segments = 1;
  repeated InnerReceipt assumptions = 2;
  Digest journal_digest = 3;
}

message SegmentReceipt {
  protos.base.CompatVersion version = 1;
  bytes seal = 2;
  uint32 index = 3;
  string hashfn = 4;
  ReceiptClaim claim = 5;
}

message SuccinctReceipt {
  protos.base.CompatVersion version = 1;
  bytes seal = 2;
  Digest control_id = 3;
  ReceiptClaim claim = 4;
}

message Groth16Receipt {
  protos.base.CompatVersion version = 1;
  bytes seal = 2;
  ReceiptClaim claim = 3;
}

message ReceiptClaim {
  MaybePruned pre = 1;  // MaybePruned<SystemState>
  MaybePruned post = 2; // MaybePruned<SystemState>
  protos.base.ExitCode exit_code = 3;
  MaybePruned input = 4; // Option<MaybePruned<Input>>
  MaybePruned output = 5; // Option<MaybePruned<Output>>
}

message MaybePruned {
  oneof kind {
    // Protobuf encoded bytes of the inner value.
    bytes value = 1;
    Digest pruned = 2;
  }
}

message SystemState {
  uint32 pc = 1;
  Digest merkle_root = 2;
}

message Input {}

message Output {
  MaybePruned journal = 1;     // MaybePruned<bytes>
  MaybePruned assumptions = 2; // MaybePruned<Assumptions>
}

message Assumptions {
  repeated MaybePruned inner = 1; // MaybePruned<ReceiptClaim>
}

message FakeReceipt {
  ReceiptClaim claim = 1;
}

message Digest {
  repeated uint32 words = 1;
}
