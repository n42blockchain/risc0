#!/usr/bin/env bash

MIN_RUST_VERSION="1.74.1" # Minimum required Rust version
VERBOSE_MODE=0

print_banner() {
  cat <<"EOF"

    ██████  █▀▀▀██
    ██████  █ ▄▀ █       A zero-knowledge verifiable
    ██████  ██▄▄▄█       general computing platform.
    ██████
    ██████   RISC
    ██████   ZERO

Contribute      : https://github.com/risc0/
Documentation   : https://dev.risczero.com/
Chat & Support  : https://discord.com/invite/risczero/

EOF
}

log_verbose() {
  if [ "$VERBOSE_MODE" -eq 1 ]; then
    echo "$@"
  fi
}

version_gte() {
  local -a version1=(${1//./ })
  local -a version2=(${2//./ })
  for ((i = 0; i < ${#version1[@]}; i++)); do
    if [[ -z ${version2[i]} ]]; then version2[i]=0; fi
    if ((10#${version1[i]} > 10#${version2[i]})); then return 0; fi
    if ((10#${version1[i]} < 10#${version2[i]})); then return 1; fi
  done
  return 0
}

execute_with_feedback() {
  local COMMAND="$1"
  local MESSAGE="$2"

  echo "$MESSAGE..."

  if [ "$VERBOSE_MODE" -eq 1 ]; then
    echo "Executing: $COMMAND"
    eval "$COMMAND"
    local STATUS=$?
    if [ $STATUS -ne 0 ]; then
      echo "Error executing command: $COMMAND"
      exit $STATUS
    fi
  else
    eval "$COMMAND" >/dev/null 2>&1 &
    pid=$!
    local spinstr='|/-\'
    while kill -0 $pid 2>/dev/null; do
      local temp=${spinstr#?}
      printf " [%c]  " "$spinstr"
      local spinstr=$temp${spinstr%"$temp"}
      sleep 0.1
      printf "\b\b\b\b\b\b"
    done
    wait $pid
    local STATUS=$?
    if [ $STATUS -ne 0 ]; then
      echo "Error executing command: $COMMAND"
      exit $STATUS
    fi
  fi
}

check_rust_version() {
  if ! command -v rustc &>/dev/null; then
    echo "Rust is not installed. Please install Rust using https://rustup.rs/ and rerun this script."
    exit 1
  else
    local current_version=$(rustc --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
    if version_gte $current_version $MIN_RUST_VERSION; then
      log_verbose "Rust version $current_version meets the minimum requirement."
    else
      echo "Your Rust version ($current_version) is below the minimum requirement ($MIN_RUST_VERSION)."
      echo "Please update Rust by running 'rustup update' and rerun this script."
      exit 1
    fi
  fi
}

install_cargo_binstall() {
  execute_with_feedback "cargo install cargo-binstall --quiet" "Installing cargo-binstall"
}

binstall_cargo_risczero() {
  execute_with_feedback "cargo binstall cargo-risczero --no-confirm" "Installing the latest version of cargo-risczero"
}

install_risczero() {
  execute_with_feedback "cargo risczero install" "Installing the risc0 toolchain"
}

usage() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "    --verbose                   Enable verbose output"
  echo "    -h, --help                  Display this help message and exit"
}

parse_args() {
  while [[ "$#" -gt 0 ]]; do
    case $1 in
    --verbose) VERBOSE_MODE=1 ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1" >&2
      usage
      exit 1
      ;;
    esac
    shift
  done
}

main() {
  parse_args "$@"
  print_banner
  check_rust_version
  install_cargo_binstall
  binstall_cargo_risczero
  install_risczero

  echo "Installation complete. Run cargo risczero --help to get started."
}

main "$@"
