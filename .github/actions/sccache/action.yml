name: sccache install
description: Install sccache

inputs:
  key:
    required: true
    default: rust-cache-${{ runner.os }}-${{ runner.arch }}
  disable_s3:
    default: false

runs:
  using: composite
  steps:
    - name: Disable idle timeout to run sccache permanently
      run: |
        echo "SCCACHE_IDLE_TIMEOUT=0" >> $GITHUB_ENV
      shell: bash

    - if: runner.os == 'Linux' && runner.arch == 'X64'
      run: |
        echo "SCCACHE_ARCH=x86_64-unknown-linux-musl" >> $GITHUB_ENV
      shell: bash

    - if: runner.os == 'macOS' && runner.arch == 'X64'
      run: |
        echo "SCCACHE_ARCH=x86_64-apple-darwin" >> $GITHUB_ENV
      shell: bash

    - if: runner.os == 'macOS' && runner.arch == 'ARM64'
      run: |
        echo "SCCACHE_ARCH=aarch64-apple-darwin" >> $GITHUB_ENV
      shell: bash

    - if: runner.os == 'Linux' && runner.arch == 'ARM64'
      run: |
        echo "SCCACHE_ARCH=aarch64-unknown-linux-musl" >> $GITHUB_ENV
      shell: bash

    - env:
        SCCACHE_URL: https://github.com/mozilla/sccache/releases/download
        SCCACHE_VERSION: v0.7.1
      run: |
        SCCACHE_FILE=sccache-$SCCACHE_VERSION-$SCCACHE_ARCH
        curl -L "$SCCACHE_URL/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
        mkdir -p $HOME/.local/bin
        mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - if: runner.os == 'Linux' && inputs.disable_s3 == 'false' && startsWith(runner.name, 'i-') == true
      run: |
        echo "SCCACHE_REGION=us-west-2" >> $GITHUB_ENV
        echo "SCCACHE_BUCKET=risc0-ci-cache" >> $GITHUB_ENV
        echo "SCCACHE_S3_KEY_PREFIX=public/${{ inputs.key }}/sccache" >> $GITHUB_ENV
      shell: bash

    - run: |
        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
        echo "CARGO_PROFILE_DEV_DEBUG=0" >> $GITHUB_ENV
        echo "CC=sccache clang" >> $GITHUB_ENV
        echo "CMAKE_C_COMPILER_LAUNCHER=sccache" >> $GITHUB_ENV
        echo "CMAKE_CXX_COMPILER_LAUNCHER=sccache" >> $GITHUB_ENV
        echo "CXX=sccache clang++" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
      shell: bash
      
    - name: (Internal PR) Configure AWS Credentials
      if: >
        runner.os == 'Linux' && inputs.disable_s3 == 'false' &&
        github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
      id: aws-creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-west-2
        role-to-assume: arn:aws:iam::083632199359:role/gha_oidc_risc0_cache_public_access
        output-credentials: true

    - if: >
        runner.os == 'Linux' && inputs.disable_s3 == 'false' &&
        github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
      uses: risc0/actions-cache@cba095d7af782a955b8f4fa13396fbf0ab62bd4b
      with:
        path: |
          ~/.cache/risc0
        key: public/${{ inputs.key }}/actions-cache
        bucket: risc0-ci-cache
        accessKey: ${{ steps.aws-creds.outputs.aws-access-key-id }}
        secretKey: ${{ steps.aws-creds.outputs.aws-secret-access-key }}
        sessionToken: ${{ steps.aws-creds.outputs.aws-session-token }}
        use-fallback: false

    - name: (External PR) Install AWS Signer (macOS)
      if: >
        runner.os == 'macOS' &&
        github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name &&
        runner.environment == 'self-hosted'
      env:
        DARWIN_SIGNER_URL: https://rolesanywhere.amazonaws.com/releases/1.1.1/X86_64/Darwin/aws_signing_helper
        IAM_RA_PATH: ../../_aws
      run: |
        curl $DARWIN_SIGNER_URL -o $IAM_RA_PATH/aws_signing_helper
        chmod +x $IAM_RA_PATH/aws_signing_helper
      shell: bash

    - name: (External PR) Configure AWS Credentials
      if: >
        github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name &&
        runner.environment == 'self-hosted' &&
        (runner.os == 'Linux' && (startsWith(runner.name, 'i-') != true)) || (runner.os == 'macOS')
      env:
        TRUST_ANCHOR_ARN: arn:aws:rolesanywhere:us-west-2:083632199359:trust-anchor/f3ef0e42-f374-43e5-8933-15b46537f855
        PROFILE_ARN: arn:aws:rolesanywhere:us-west-2:083632199359:profile/fb3ace7d-a3c5-4786-bc26-15b74ea0d164
        ROLE_ARN: arn:aws:iam::083632199359:role/gha_instance_risc0_cache_access
        IAM_RA_PATH: ../../_aws
      run: |
        aws configure set credential_process "$IAM_RA_PATH/aws_signing_helper credential-process --trust-anchor-arn $TRUST_ANCHOR_ARN --profile-arn $PROFILE_ARN --role-arn $ROLE_ARN --certificate $IAM_RA_PATH/certificate.pem --private-key $IAM_RA_PATH/runner_key.pem" --profile default
        echo "##vso[task.setvariable variable=AWS_SDK_LOAD_CONFIG;]1"
      shell: bash